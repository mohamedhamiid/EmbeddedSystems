
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00003442  000034d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800078  00800078  000034ee  2**0
                  ALLOC
  3 .stab         000041e8  00000000  00000000  000034f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002ce1  00000000  00000000  000076d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a4f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a669  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d19d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000df4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e339  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 19 	call	0x3334	; 0x3334 <main>
      8a:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_voidInit>:
#include "../../../INCLUDE/MCAL/UART/UART_priv.h"
#include "../../../SERVICES/bit_utilies.h"
//#include "../../../INCLUDE/MCAL/GIE/GIE.h"
u8 Global_u8UBRRH_Value=0;
u8 Global_u8UCSRC_Value=0;
void UART_voidInit(UART_structCfg*Add_structUARTcfg){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
	// SET BAUD RATE
	switch(Add_structUARTcfg->UART_u8BaudRate){
     b5e:	e9 81       	ldd	r30, Y+1	; 0x01
     b60:	fa 81       	ldd	r31, Y+2	; 0x02
     b62:	85 81       	ldd	r24, Z+5	; 0x05
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	38 8b       	std	Y+16, r19	; 0x10
     b6a:	2f 87       	std	Y+15, r18	; 0x0f
     b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b6e:	98 89       	ldd	r25, Y+16	; 0x10
     b70:	8c 30       	cpi	r24, 0x0C	; 12
     b72:	91 05       	cpc	r25, r1
     b74:	09 f4       	brne	.+2      	; 0xb78 <UART_voidInit+0x32>
     b76:	7f c0       	rjmp	.+254    	; 0xc76 <UART_voidInit+0x130>
     b78:	2f 85       	ldd	r18, Y+15	; 0x0f
     b7a:	38 89       	ldd	r19, Y+16	; 0x10
     b7c:	2d 30       	cpi	r18, 0x0D	; 13
     b7e:	31 05       	cpc	r19, r1
     b80:	24 f5       	brge	.+72     	; 0xbca <UART_voidInit+0x84>
     b82:	8f 85       	ldd	r24, Y+15	; 0x0f
     b84:	98 89       	ldd	r25, Y+16	; 0x10
     b86:	83 30       	cpi	r24, 0x03	; 3
     b88:	91 05       	cpc	r25, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <UART_voidInit+0x48>
     b8c:	8c c0       	rjmp	.+280    	; 0xca6 <UART_voidInit+0x160>
     b8e:	2f 85       	ldd	r18, Y+15	; 0x0f
     b90:	38 89       	ldd	r19, Y+16	; 0x10
     b92:	24 30       	cpi	r18, 0x04	; 4
     b94:	31 05       	cpc	r19, r1
     b96:	64 f4       	brge	.+24     	; 0xbb0 <UART_voidInit+0x6a>
     b98:	8f 85       	ldd	r24, Y+15	; 0x0f
     b9a:	98 89       	ldd	r25, Y+16	; 0x10
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	09 f4       	brne	.+2      	; 0xba2 <UART_voidInit+0x5c>
     ba0:	92 c0       	rjmp	.+292    	; 0xcc6 <UART_voidInit+0x180>
     ba2:	2f 85       	ldd	r18, Y+15	; 0x0f
     ba4:	38 89       	ldd	r19, Y+16	; 0x10
     ba6:	21 30       	cpi	r18, 0x01	; 1
     ba8:	31 05       	cpc	r19, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <UART_voidInit+0x68>
     bac:	84 c0       	rjmp	.+264    	; 0xcb6 <UART_voidInit+0x170>
     bae:	91 c0       	rjmp	.+290    	; 0xcd2 <UART_voidInit+0x18c>
     bb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb2:	98 89       	ldd	r25, Y+16	; 0x10
     bb4:	86 30       	cpi	r24, 0x06	; 6
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <UART_voidInit+0x76>
     bba:	6d c0       	rjmp	.+218    	; 0xc96 <UART_voidInit+0x150>
     bbc:	2f 85       	ldd	r18, Y+15	; 0x0f
     bbe:	38 89       	ldd	r19, Y+16	; 0x10
     bc0:	28 30       	cpi	r18, 0x08	; 8
     bc2:	31 05       	cpc	r19, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <UART_voidInit+0x82>
     bc6:	5f c0       	rjmp	.+190    	; 0xc86 <UART_voidInit+0x140>
     bc8:	84 c0       	rjmp	.+264    	; 0xcd2 <UART_voidInit+0x18c>
     bca:	8f 85       	ldd	r24, Y+15	; 0x0f
     bcc:	98 89       	ldd	r25, Y+16	; 0x10
     bce:	82 32       	cpi	r24, 0x22	; 34
     bd0:	91 05       	cpc	r25, r1
     bd2:	c9 f1       	breq	.+114    	; 0xc46 <UART_voidInit+0x100>
     bd4:	2f 85       	ldd	r18, Y+15	; 0x0f
     bd6:	38 89       	ldd	r19, Y+16	; 0x10
     bd8:	23 32       	cpi	r18, 0x23	; 35
     bda:	31 05       	cpc	r19, r1
     bdc:	64 f4       	brge	.+24     	; 0xbf6 <UART_voidInit+0xb0>
     bde:	8f 85       	ldd	r24, Y+15	; 0x0f
     be0:	98 89       	ldd	r25, Y+16	; 0x10
     be2:	80 31       	cpi	r24, 0x10	; 16
     be4:	91 05       	cpc	r25, r1
     be6:	09 f4       	brne	.+2      	; 0xbea <UART_voidInit+0xa4>
     be8:	3e c0       	rjmp	.+124    	; 0xc66 <UART_voidInit+0x120>
     bea:	2f 85       	ldd	r18, Y+15	; 0x0f
     bec:	38 89       	ldd	r19, Y+16	; 0x10
     bee:	29 31       	cpi	r18, 0x19	; 25
     bf0:	31 05       	cpc	r19, r1
     bf2:	89 f1       	breq	.+98     	; 0xc56 <UART_voidInit+0x110>
     bf4:	6e c0       	rjmp	.+220    	; 0xcd2 <UART_voidInit+0x18c>
     bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf8:	98 89       	ldd	r25, Y+16	; 0x10
     bfa:	87 36       	cpi	r24, 0x67	; 103
     bfc:	91 05       	cpc	r25, r1
     bfe:	99 f0       	breq	.+38     	; 0xc26 <UART_voidInit+0xe0>
     c00:	2f 85       	ldd	r18, Y+15	; 0x0f
     c02:	38 89       	ldd	r19, Y+16	; 0x10
     c04:	2f 3c       	cpi	r18, 0xCF	; 207
     c06:	31 05       	cpc	r19, r1
     c08:	31 f0       	breq	.+12     	; 0xc16 <UART_voidInit+0xd0>
     c0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c0c:	98 89       	ldd	r25, Y+16	; 0x10
     c0e:	83 33       	cpi	r24, 0x33	; 51
     c10:	91 05       	cpc	r25, r1
     c12:	89 f0       	breq	.+34     	; 0xc36 <UART_voidInit+0xf0>
     c14:	5e c0       	rjmp	.+188    	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_2400     :UBRRL|=UART_BAUD_RATE_2400     ;break;
     c16:	a9 e2       	ldi	r26, 0x29	; 41
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e9 e2       	ldi	r30, 0x29	; 41
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	8f 6c       	ori	r24, 0xCF	; 207
     c22:	8c 93       	st	X, r24
     c24:	56 c0       	rjmp	.+172    	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_4800     :UBRRL|=UART_BAUD_RATE_4800     ;break;
     c26:	a9 e2       	ldi	r26, 0x29	; 41
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e9 e2       	ldi	r30, 0x29	; 41
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	87 66       	ori	r24, 0x67	; 103
     c32:	8c 93       	st	X, r24
     c34:	4e c0       	rjmp	.+156    	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_9600     :UBRRL|=UART_BAUD_RATE_9600     ;break;
     c36:	a9 e2       	ldi	r26, 0x29	; 41
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e9 e2       	ldi	r30, 0x29	; 41
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	83 63       	ori	r24, 0x33	; 51
     c42:	8c 93       	st	X, r24
     c44:	46 c0       	rjmp	.+140    	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_14K      :UBRRL|=UART_BAUD_RATE_14K      ;break;
     c46:	a9 e2       	ldi	r26, 0x29	; 41
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	82 62       	ori	r24, 0x22	; 34
     c52:	8c 93       	st	X, r24
     c54:	3e c0       	rjmp	.+124    	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_19K      :UBRRL|=UART_BAUD_RATE_19K      ;break;
     c56:	a9 e2       	ldi	r26, 0x29	; 41
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e9 e2       	ldi	r30, 0x29	; 41
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	89 61       	ori	r24, 0x19	; 25
     c62:	8c 93       	st	X, r24
     c64:	36 c0       	rjmp	.+108    	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_28K      :UBRRL|=UART_BAUD_RATE_28K      ;break;
     c66:	a9 e2       	ldi	r26, 0x29	; 41
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e9 e2       	ldi	r30, 0x29	; 41
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	80 61       	ori	r24, 0x10	; 16
     c72:	8c 93       	st	X, r24
     c74:	2e c0       	rjmp	.+92     	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_38K      :UBRRL|=UART_BAUD_RATE_38K      ;break;
     c76:	a9 e2       	ldi	r26, 0x29	; 41
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e9 e2       	ldi	r30, 0x29	; 41
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	8c 60       	ori	r24, 0x0C	; 12
     c82:	8c 93       	st	X, r24
     c84:	26 c0       	rjmp	.+76     	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_57K      :UBRRL|=UART_BAUD_RATE_57K      ;break;
     c86:	a9 e2       	ldi	r26, 0x29	; 41
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e9 e2       	ldi	r30, 0x29	; 41
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	88 60       	ori	r24, 0x08	; 8
     c92:	8c 93       	st	X, r24
     c94:	1e c0       	rjmp	.+60     	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_76K      :UBRRL|=UART_BAUD_RATE_76K      ;break;
     c96:	a9 e2       	ldi	r26, 0x29	; 41
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e9 e2       	ldi	r30, 0x29	; 41
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	86 60       	ori	r24, 0x06	; 6
     ca2:	8c 93       	st	X, r24
     ca4:	16 c0       	rjmp	.+44     	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_115K     :UBRRL|=UART_BAUD_RATE_115K     ;break;
     ca6:	a9 e2       	ldi	r26, 0x29	; 41
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e9 e2       	ldi	r30, 0x29	; 41
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	83 60       	ori	r24, 0x03	; 3
     cb2:	8c 93       	st	X, r24
     cb4:	0e c0       	rjmp	.+28     	; 0xcd2 <UART_voidInit+0x18c>
	case UART_BAUD_RATE_230K     :UBRRL|=UART_BAUD_RATE_230K     ;break;
     cb6:	a9 e2       	ldi	r26, 0x29	; 41
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e9 e2       	ldi	r30, 0x29	; 41
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	81 60       	ori	r24, 0x01	; 1
     cc2:	8c 93       	st	X, r24
     cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <UART_voidInit+0x18c>
	//case UART_BAUD_RATE_250K     :UBRRL|=UART_BAUD_RATE_250K     ;break;
	case UART_BAUD_RATE_HALF_MEGA:UBRRL|=UART_BAUD_RATE_HALF_MEGA;break;
     cc6:	e9 e2       	ldi	r30, 0x29	; 41
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	a9 e2       	ldi	r26, 0x29	; 41
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	8c 91       	ld	r24, X
     cd0:	80 83       	st	Z, r24
	}
	// SET FRAME FORMAT
	// 1- SYNC OR ASYNC
	switch(Add_structUARTcfg->UART_u8Mode){
     cd2:	e9 81       	ldd	r30, Y+1	; 0x01
     cd4:	fa 81       	ldd	r31, Y+2	; 0x02
     cd6:	80 81       	ld	r24, Z
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	3e 87       	std	Y+14, r19	; 0x0e
     cde:	2d 87       	std	Y+13, r18	; 0x0d
     ce0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce4:	80 38       	cpi	r24, 0x80	; 128
     ce6:	91 05       	cpc	r25, r1
     ce8:	41 f1       	breq	.+80     	; 0xd3a <UART_voidInit+0x1f4>
     cea:	2d 85       	ldd	r18, Y+13	; 0x0d
     cec:	3e 85       	ldd	r19, Y+14	; 0x0e
     cee:	20 3c       	cpi	r18, 0xC0	; 192
     cf0:	31 05       	cpc	r19, r1
     cf2:	41 f5       	brne	.+80     	; 0xd44 <UART_voidInit+0x1fe>
	case UART_MODE_SYNCHRONOUS:
		Global_u8UCSRC_Value|=UART_MODE_SYNCHRONOUS;
     cf4:	80 91 79 00 	lds	r24, 0x0079
     cf8:	80 6c       	ori	r24, 0xC0	; 192
     cfa:	80 93 79 00 	sts	0x0079, r24
		// SET WHEN ACTION HAPPENS
		switch(Add_structUARTcfg->UART_u8ClockPolarity){
     cfe:	e9 81       	ldd	r30, Y+1	; 0x01
     d00:	fa 81       	ldd	r31, Y+2	; 0x02
     d02:	84 81       	ldd	r24, Z+4	; 0x04
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	3c 87       	std	Y+12, r19	; 0x0c
     d0a:	2b 87       	std	Y+11, r18	; 0x0b
     d0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d0e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d10:	80 38       	cpi	r24, 0x80	; 128
     d12:	91 05       	cpc	r25, r1
     d14:	31 f0       	breq	.+12     	; 0xd22 <UART_voidInit+0x1dc>
     d16:	2b 85       	ldd	r18, Y+11	; 0x0b
     d18:	3c 85       	ldd	r19, Y+12	; 0x0c
     d1a:	21 38       	cpi	r18, 0x81	; 129
     d1c:	31 05       	cpc	r19, r1
     d1e:	39 f0       	breq	.+14     	; 0xd2e <UART_voidInit+0x1e8>
     d20:	11 c0       	rjmp	.+34     	; 0xd44 <UART_voidInit+0x1fe>
		case UART_CLOCK_POLARITY_TX_RISING_RX_FALLING: Global_u8UCSRC_Value|=UART_CLOCK_POLARITY_TX_RISING_RX_FALLING;break;
     d22:	80 91 79 00 	lds	r24, 0x0079
     d26:	80 68       	ori	r24, 0x80	; 128
     d28:	80 93 79 00 	sts	0x0079, r24
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <UART_voidInit+0x1fe>
		case UART_CLOCK_POLARITY_TX_FALLING_RX_RISING: Global_u8UCSRC_Value|=UART_CLOCK_POLARITY_TX_FALLING_RX_RISING;break;
     d2e:	80 91 79 00 	lds	r24, 0x0079
     d32:	81 68       	ori	r24, 0x81	; 129
     d34:	80 93 79 00 	sts	0x0079, r24
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <UART_voidInit+0x1fe>
		}
	break;
	case UART_MODE_ASYNCHRONOUS: Global_u8UCSRC_Value|=UART_MODE_ASYNCHRONOUS;break;
     d3a:	80 91 79 00 	lds	r24, 0x0079
     d3e:	80 68       	ori	r24, 0x80	; 128
     d40:	80 93 79 00 	sts	0x0079, r24
	}

	// 2- PARITY
	switch(Add_structUARTcfg->UART_u8Parity){
     d44:	e9 81       	ldd	r30, Y+1	; 0x01
     d46:	fa 81       	ldd	r31, Y+2	; 0x02
     d48:	81 81       	ldd	r24, Z+1	; 0x01
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	3a 87       	std	Y+10, r19	; 0x0a
     d50:	29 87       	std	Y+9, r18	; 0x09
     d52:	89 85       	ldd	r24, Y+9	; 0x09
     d54:	9a 85       	ldd	r25, Y+10	; 0x0a
     d56:	80 3a       	cpi	r24, 0xA0	; 160
     d58:	91 05       	cpc	r25, r1
     d5a:	81 f0       	breq	.+32     	; 0xd7c <UART_voidInit+0x236>
     d5c:	29 85       	ldd	r18, Y+9	; 0x09
     d5e:	3a 85       	ldd	r19, Y+10	; 0x0a
     d60:	20 3b       	cpi	r18, 0xB0	; 176
     d62:	31 05       	cpc	r19, r1
     d64:	89 f0       	breq	.+34     	; 0xd88 <UART_voidInit+0x242>
     d66:	89 85       	ldd	r24, Y+9	; 0x09
     d68:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6a:	80 38       	cpi	r24, 0x80	; 128
     d6c:	91 05       	cpc	r25, r1
     d6e:	89 f4       	brne	.+34     	; 0xd92 <UART_voidInit+0x24c>
	case UART_PARITY_DISABLED: Global_u8UCSRC_Value|=UART_PARITY_DISABLED;break;
     d70:	80 91 79 00 	lds	r24, 0x0079
     d74:	80 68       	ori	r24, 0x80	; 128
     d76:	80 93 79 00 	sts	0x0079, r24
     d7a:	0b c0       	rjmp	.+22     	; 0xd92 <UART_voidInit+0x24c>
	case UART_PARITY_EVEN: Global_u8UCSRC_Value|=UART_PARITY_EVEN;break;
     d7c:	80 91 79 00 	lds	r24, 0x0079
     d80:	80 6a       	ori	r24, 0xA0	; 160
     d82:	80 93 79 00 	sts	0x0079, r24
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <UART_voidInit+0x24c>
	case UART_PARITY_ODD: Global_u8UCSRC_Value|=UART_PARITY_ODD;break;
     d88:	80 91 79 00 	lds	r24, 0x0079
     d8c:	80 6b       	ori	r24, 0xB0	; 176
     d8e:	80 93 79 00 	sts	0x0079, r24
	}

	// 3- CHARACTER SIZE
	switch(Add_structUARTcfg->UART_u8CharSize){
     d92:	e9 81       	ldd	r30, Y+1	; 0x01
     d94:	fa 81       	ldd	r31, Y+2	; 0x02
     d96:	83 81       	ldd	r24, Z+3	; 0x03
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	38 87       	std	Y+8, r19	; 0x08
     d9e:	2f 83       	std	Y+7, r18	; 0x07
     da0:	8f 81       	ldd	r24, Y+7	; 0x07
     da2:	98 85       	ldd	r25, Y+8	; 0x08
     da4:	82 38       	cpi	r24, 0x82	; 130
     da6:	91 05       	cpc	r25, r1
     da8:	e1 f0       	breq	.+56     	; 0xde2 <UART_voidInit+0x29c>
     daa:	2f 81       	ldd	r18, Y+7	; 0x07
     dac:	38 85       	ldd	r19, Y+8	; 0x08
     dae:	23 38       	cpi	r18, 0x83	; 131
     db0:	31 05       	cpc	r19, r1
     db2:	34 f4       	brge	.+12     	; 0xdc0 <UART_voidInit+0x27a>
     db4:	8f 81       	ldd	r24, Y+7	; 0x07
     db6:	98 85       	ldd	r25, Y+8	; 0x08
     db8:	80 38       	cpi	r24, 0x80	; 128
     dba:	91 05       	cpc	r25, r1
     dbc:	61 f0       	breq	.+24     	; 0xdd6 <UART_voidInit+0x290>
     dbe:	22 c0       	rjmp	.+68     	; 0xe04 <UART_voidInit+0x2be>
     dc0:	2f 81       	ldd	r18, Y+7	; 0x07
     dc2:	38 85       	ldd	r19, Y+8	; 0x08
     dc4:	24 38       	cpi	r18, 0x84	; 132
     dc6:	31 05       	cpc	r19, r1
     dc8:	91 f0       	breq	.+36     	; 0xdee <UART_voidInit+0x2a8>
     dca:	8f 81       	ldd	r24, Y+7	; 0x07
     dcc:	98 85       	ldd	r25, Y+8	; 0x08
     dce:	86 38       	cpi	r24, 0x86	; 134
     dd0:	91 05       	cpc	r25, r1
     dd2:	99 f0       	breq	.+38     	; 0xdfa <UART_voidInit+0x2b4>
     dd4:	17 c0       	rjmp	.+46     	; 0xe04 <UART_voidInit+0x2be>
	case UART_CHARACTER_SIZE_5_BIT: Global_u8UCSRC_Value|=UART_CHARACTER_SIZE_5_BIT;break;
     dd6:	80 91 79 00 	lds	r24, 0x0079
     dda:	80 68       	ori	r24, 0x80	; 128
     ddc:	80 93 79 00 	sts	0x0079, r24
     de0:	11 c0       	rjmp	.+34     	; 0xe04 <UART_voidInit+0x2be>
	case UART_CHARACTER_SIZE_6_BIT: Global_u8UCSRC_Value|=UART_CHARACTER_SIZE_6_BIT;break;
     de2:	80 91 79 00 	lds	r24, 0x0079
     de6:	82 68       	ori	r24, 0x82	; 130
     de8:	80 93 79 00 	sts	0x0079, r24
     dec:	0b c0       	rjmp	.+22     	; 0xe04 <UART_voidInit+0x2be>
	case UART_CHARACTER_SIZE_7_BIT: Global_u8UCSRC_Value|=UART_CHARACTER_SIZE_7_BIT;break;
     dee:	80 91 79 00 	lds	r24, 0x0079
     df2:	84 68       	ori	r24, 0x84	; 132
     df4:	80 93 79 00 	sts	0x0079, r24
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <UART_voidInit+0x2be>
	case UART_CHARACTER_SIZE_8_BIT: Global_u8UCSRC_Value|=UART_CHARACTER_SIZE_8_BIT;break;
     dfa:	80 91 79 00 	lds	r24, 0x0079
     dfe:	86 68       	ori	r24, 0x86	; 134
     e00:	80 93 79 00 	sts	0x0079, r24
//		UCSRB|=UART_CHARACTER_SIZE_9_BIT_UCSRB_REG;
//	break;
	}

	// STOP BIT
	switch(Add_structUARTcfg->UART_u8StopBit){
     e04:	e9 81       	ldd	r30, Y+1	; 0x01
     e06:	fa 81       	ldd	r31, Y+2	; 0x02
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	3e 83       	std	Y+6, r19	; 0x06
     e10:	2d 83       	std	Y+5, r18	; 0x05
     e12:	8d 81       	ldd	r24, Y+5	; 0x05
     e14:	9e 81       	ldd	r25, Y+6	; 0x06
     e16:	80 38       	cpi	r24, 0x80	; 128
     e18:	91 05       	cpc	r25, r1
     e1a:	31 f0       	breq	.+12     	; 0xe28 <UART_voidInit+0x2e2>
     e1c:	2d 81       	ldd	r18, Y+5	; 0x05
     e1e:	3e 81       	ldd	r19, Y+6	; 0x06
     e20:	28 38       	cpi	r18, 0x88	; 136
     e22:	31 05       	cpc	r19, r1
     e24:	39 f0       	breq	.+14     	; 0xe34 <UART_voidInit+0x2ee>
     e26:	0b c0       	rjmp	.+22     	; 0xe3e <UART_voidInit+0x2f8>
	case UART_STOP_BIT_SELECT_1_BIT: Global_u8UCSRC_Value |= UART_STOP_BIT_SELECT_1_BIT;break;
     e28:	80 91 79 00 	lds	r24, 0x0079
     e2c:	80 68       	ori	r24, 0x80	; 128
     e2e:	80 93 79 00 	sts	0x0079, r24
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <UART_voidInit+0x2f8>
	case UART_STOP_BIT_SELECT_2_BIT: Global_u8UCSRC_Value |= UART_STOP_BIT_SELECT_2_BIT;break;
     e34:	80 91 79 00 	lds	r24, 0x0079
     e38:	88 68       	ori	r24, 0x88	; 136
     e3a:	80 93 79 00 	sts	0x0079, r24
	}
	UCSRC=Global_u8UCSRC_Value;
     e3e:	e0 e4       	ldi	r30, 0x40	; 64
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 91 79 00 	lds	r24, 0x0079
     e46:	80 83       	st	Z, r24
	//////////////////////////////////////////////////////////////////////////////////////////
	/***************************** ENABLE RX OR TX ******************************************/
	switch(Add_structUARTcfg->UART_u8EnableTXorRX){
     e48:	e9 81       	ldd	r30, Y+1	; 0x01
     e4a:	fa 81       	ldd	r31, Y+2	; 0x02
     e4c:	86 81       	ldd	r24, Z+6	; 0x06
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	3c 83       	std	Y+4, r19	; 0x04
     e54:	2b 83       	std	Y+3, r18	; 0x03
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	80 31       	cpi	r24, 0x10	; 16
     e5c:	91 05       	cpc	r25, r1
     e5e:	91 f0       	breq	.+36     	; 0xe84 <UART_voidInit+0x33e>
     e60:	2b 81       	ldd	r18, Y+3	; 0x03
     e62:	3c 81       	ldd	r19, Y+4	; 0x04
     e64:	28 31       	cpi	r18, 0x18	; 24
     e66:	31 05       	cpc	r19, r1
     e68:	a9 f0       	breq	.+42     	; 0xe94 <UART_voidInit+0x34e>
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	88 30       	cpi	r24, 0x08	; 8
     e70:	91 05       	cpc	r25, r1
     e72:	b9 f4       	brne	.+46     	; 0xea2 <UART_voidInit+0x35c>
	case UART_ENABLE_TX:UCSRB|=UART_ENABLE_TX;break;
     e74:	aa e2       	ldi	r26, 0x2A	; 42
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ea e2       	ldi	r30, 0x2A	; 42
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	88 60       	ori	r24, 0x08	; 8
     e80:	8c 93       	st	X, r24
     e82:	0f c0       	rjmp	.+30     	; 0xea2 <UART_voidInit+0x35c>
	case UART_ENABLE_RX:UCSRB|=UART_ENABLE_RX;break;
     e84:	aa e2       	ldi	r26, 0x2A	; 42
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	ea e2       	ldi	r30, 0x2A	; 42
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 61       	ori	r24, 0x10	; 16
     e90:	8c 93       	st	X, r24
     e92:	07 c0       	rjmp	.+14     	; 0xea2 <UART_voidInit+0x35c>
	case UART_ENABLE_TX_RX:UCSRB|=UART_ENABLE_TX_RX;break;
     e94:	aa e2       	ldi	r26, 0x2A	; 42
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ea e2       	ldi	r30, 0x2A	; 42
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	88 61       	ori	r24, 0x18	; 24
     ea0:	8c 93       	st	X, r24
//	UBRRH = 0;
//	// SET FRAME FORMAT --> 8 DATA , 1 STOP , NO PARITY
//	UCSRC = 0x86;
//	// ENABLE RX AND TX
//	UCSRB = 0x18;
}
     ea2:	60 96       	adiw	r28, 0x10	; 16
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <UART_voidSendChar>:

void UART_voidSendChar(u8 Copy_u8Data){
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <UART_voidSendChar+0x6>
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8UARTtimeOut=200;
     ec0:	88 ec       	ldi	r24, 0xC8	; 200
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	0f c0       	rjmp	.+30     	; 0xee4 <UART_voidSendChar+0x30>
	while(Loc_u8UARTtimeOut>0){
	if(GET_BIT(UCSRA,UART_DATA_REGISTER_EMPTY)==1)
     ec6:	eb e2       	ldi	r30, 0x2B	; 43
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	82 95       	swap	r24
     ece:	86 95       	lsr	r24
     ed0:	87 70       	andi	r24, 0x07	; 7
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	81 70       	andi	r24, 0x01	; 1
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	88 23       	and	r24, r24
     edc:	31 f4       	brne	.+12     	; 0xeea <UART_voidSendChar+0x36>
		break;
	else
		#warning TimeOut DATA REGISTER NOT EMPTY
	Loc_u8UARTtimeOut--;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	81 50       	subi	r24, 0x01	; 1
     ee2:	89 83       	std	Y+1, r24	; 0x01
//	UCSRB = 0x18;
}

void UART_voidSendChar(u8 Copy_u8Data){
	u8 Loc_u8UARTtimeOut=200;
	while(Loc_u8UARTtimeOut>0){
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	88 23       	and	r24, r24
     ee8:	71 f7       	brne	.-36     	; 0xec6 <UART_voidSendChar+0x12>
		break;
	else
		#warning TimeOut DATA REGISTER NOT EMPTY
	Loc_u8UARTtimeOut--;
	}
	UDR_T=Copy_u8Data;
     eea:	ec e2       	ldi	r30, 0x2C	; 44
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	80 83       	st	Z, r24
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <UART_u8GetChar>:

u8 UART_u8GetChar(void){
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <UART_u8GetChar+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_u8Res;
	u8 Loc_u8UARTtimeOut=200;
     f06:	88 ec       	ldi	r24, 0xC8	; 200
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	0b c0       	rjmp	.+22     	; 0xf22 <UART_u8GetChar+0x26>
	while(Loc_u8UARTtimeOut>0){
		if(GET_BIT(UCSRA,UART_RECIEVE_COMPLETE)==1)
     f0c:	eb e2       	ldi	r30, 0x2B	; 43
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	88 1f       	adc	r24, r24
     f14:	88 27       	eor	r24, r24
     f16:	88 1f       	adc	r24, r24
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	31 f0       	breq	.+12     	; 0xf28 <UART_u8GetChar+0x2c>
			break;
		else
			#warning TimeOut RECIEVE NOT COMPLETED
		Loc_u8UARTtimeOut--;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	89 83       	std	Y+1, r24	; 0x01
}

u8 UART_u8GetChar(void){
	u8 Loc_u8Res;
	u8 Loc_u8UARTtimeOut=200;
	while(Loc_u8UARTtimeOut>0){
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	88 23       	and	r24, r24
     f26:	91 f7       	brne	.-28     	; 0xf0c <UART_u8GetChar+0x10>
			break;
		else
			#warning TimeOut RECIEVE NOT COMPLETED
		Loc_u8UARTtimeOut--;
	}
	Loc_u8Res = UDR_R;
     f28:	ec e2       	ldi	r30, 0x2C	; 44
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8a 83       	std	Y+2, r24	; 0x02
	return Loc_u8Res;
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <TIMER_voidTimerInit>:
volatile f32 Global_u8TickTimeValue=0;
volatile f32 Global_u16PeriodicTimeValue=0;
volatile u16 Global_u8WaveFormGenerationMode;
volatile u8 Loc_u8BigDelayValueCounterMaxValue;

void TIMER_voidTimerInit(Timer_structTimerCfg*Add_structTimerCfg){
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	68 97       	sbiw	r28, 0x18	; 24
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01
	switch(Add_structTimerCfg->Timer_u8TimerNo){
     f54:	e9 81       	ldd	r30, Y+1	; 0x01
     f56:	fa 81       	ldd	r31, Y+2	; 0x02
     f58:	80 81       	ld	r24, Z
     f5a:	83 70       	andi	r24, 0x03	; 3
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	38 8f       	std	Y+24, r19	; 0x18
     f62:	2f 8b       	std	Y+23, r18	; 0x17
     f64:	8f 89       	ldd	r24, Y+23	; 0x17
     f66:	98 8d       	ldd	r25, Y+24	; 0x18
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	39 f0       	breq	.+14     	; 0xf7a <TIMER_voidTimerInit+0x3e>
     f6c:	2f 89       	ldd	r18, Y+23	; 0x17
     f6e:	38 8d       	ldd	r19, Y+24	; 0x18
     f70:	21 30       	cpi	r18, 0x01	; 1
     f72:	31 05       	cpc	r19, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <TIMER_voidTimerInit+0x3c>
     f76:	2a c1       	rjmp	.+596    	; 0x11cc <TIMER_voidTimerInit+0x290>
     f78:	c6 c3       	rjmp	.+1932   	; 0x1706 <TIMER_voidTimerInit+0x7ca>
	case TIMER_NO_TIMER0:

		switch(Add_structTimerCfg->Timer_u8TimerForceOutputCompare){
     f7a:	e9 81       	ldd	r30, Y+1	; 0x01
     f7c:	fa 81       	ldd	r31, Y+2	; 0x02
     f7e:	81 81       	ldd	r24, Z+1	; 0x01
     f80:	92 81       	ldd	r25, Z+2	; 0x02
     f82:	9e 8b       	std	Y+22, r25	; 0x16
     f84:	8d 8b       	std	Y+21, r24	; 0x15
     f86:	2d 89       	ldd	r18, Y+21	; 0x15
     f88:	3e 89       	ldd	r19, Y+22	; 0x16
     f8a:	21 15       	cp	r18, r1
     f8c:	31 05       	cpc	r19, r1
     f8e:	69 f0       	breq	.+26     	; 0xfaa <TIMER_voidTimerInit+0x6e>
     f90:	8d 89       	ldd	r24, Y+21	; 0x15
     f92:	9e 89       	ldd	r25, Y+22	; 0x16
     f94:	80 38       	cpi	r24, 0x80	; 128
     f96:	91 05       	cpc	r25, r1
     f98:	71 f4       	brne	.+28     	; 0xfb6 <TIMER_voidTimerInit+0x7a>
		case TIMER0_FOC_ON:TCCR0|=TIMER0_FOC_ON;break;
     f9a:	a3 e5       	ldi	r26, 0x53	; 83
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e3 e5       	ldi	r30, 0x53	; 83
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	80 68       	ori	r24, 0x80	; 128
     fa6:	8c 93       	st	X, r24
     fa8:	06 c0       	rjmp	.+12     	; 0xfb6 <TIMER_voidTimerInit+0x7a>
		case TIMER0_FOC_OFF:TCCR0|=TIMER0_FOC_OFF;break;
     faa:	e3 e5       	ldi	r30, 0x53	; 83
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	a3 e5       	ldi	r26, 0x53	; 83
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	8c 91       	ld	r24, X
     fb4:	80 83       	st	Z, r24
		}

		switch(Add_structTimerCfg->Timer_u8WaveFormGenerationMode){
     fb6:	e9 81       	ldd	r30, Y+1	; 0x01
     fb8:	fa 81       	ldd	r31, Y+2	; 0x02
     fba:	23 81       	ldd	r18, Z+3	; 0x03
     fbc:	34 81       	ldd	r19, Z+4	; 0x04
     fbe:	3c 8b       	std	Y+20, r19	; 0x14
     fc0:	2b 8b       	std	Y+19, r18	; 0x13
     fc2:	8b 89       	ldd	r24, Y+19	; 0x13
     fc4:	9c 89       	ldd	r25, Y+20	; 0x14
     fc6:	88 34       	cpi	r24, 0x48	; 72
     fc8:	91 05       	cpc	r25, r1
     fca:	a1 f1       	breq	.+104    	; 0x1034 <TIMER_voidTimerInit+0xf8>
     fcc:	2b 89       	ldd	r18, Y+19	; 0x13
     fce:	3c 89       	ldd	r19, Y+20	; 0x14
     fd0:	29 34       	cpi	r18, 0x49	; 73
     fd2:	31 05       	cpc	r19, r1
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <TIMER_voidTimerInit+0x9c>
     fd6:	49 c0       	rjmp	.+146    	; 0x106a <TIMER_voidTimerInit+0x12e>
     fd8:	8b 89       	ldd	r24, Y+19	; 0x13
     fda:	9c 89       	ldd	r25, Y+20	; 0x14
     fdc:	80 34       	cpi	r24, 0x40	; 64
     fde:	91 05       	cpc	r25, r1
     fe0:	d9 f0       	breq	.+54     	; 0x1018 <TIMER_voidTimerInit+0xdc>
     fe2:	2b 89       	ldd	r18, Y+19	; 0x13
     fe4:	3c 89       	ldd	r19, Y+20	; 0x14
     fe6:	21 34       	cpi	r18, 0x41	; 65
     fe8:	31 05       	cpc	r19, r1
     fea:	08 f0       	brcs	.+2      	; 0xfee <TIMER_voidTimerInit+0xb2>
     fec:	3e c0       	rjmp	.+124    	; 0x106a <TIMER_voidTimerInit+0x12e>
     fee:	8b 89       	ldd	r24, Y+19	; 0x13
     ff0:	9c 89       	ldd	r25, Y+20	; 0x14
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	31 f0       	breq	.+12     	; 0x1002 <TIMER_voidTimerInit+0xc6>
     ff6:	2b 89       	ldd	r18, Y+19	; 0x13
     ff8:	3c 89       	ldd	r19, Y+20	; 0x14
     ffa:	28 30       	cpi	r18, 0x08	; 8
     ffc:	31 05       	cpc	r19, r1
     ffe:	41 f1       	breq	.+80     	; 0x1050 <TIMER_voidTimerInit+0x114>
    1000:	34 c0       	rjmp	.+104    	; 0x106a <TIMER_voidTimerInit+0x12e>
		case TIMER0_MODE_NORMAL:			TCCR0|=TIMER0_MODE_NORMAL;Global_u8WaveFormGenerationMode=TIMER0_MODE_NORMAL;break;
    1002:	e3 e5       	ldi	r30, 0x53	; 83
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	a3 e5       	ldi	r26, 0x53	; 83
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	8c 91       	ld	r24, X
    100c:	80 83       	st	Z, r24
    100e:	10 92 85 00 	sts	0x0085, r1
    1012:	10 92 84 00 	sts	0x0084, r1
    1016:	29 c0       	rjmp	.+82     	; 0x106a <TIMER_voidTimerInit+0x12e>
		case TIMER0_MODE_CTC:				TCCR0|=TIMER0_MODE_CTC;Global_u8WaveFormGenerationMode=TIMER0_MODE_CTC;break;
    1018:	a3 e5       	ldi	r26, 0x53	; 83
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e3 e5       	ldi	r30, 0x53	; 83
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 64       	ori	r24, 0x40	; 64
    1024:	8c 93       	st	X, r24
    1026:	80 e4       	ldi	r24, 0x40	; 64
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	90 93 85 00 	sts	0x0085, r25
    102e:	80 93 84 00 	sts	0x0084, r24
    1032:	1b c0       	rjmp	.+54     	; 0x106a <TIMER_voidTimerInit+0x12e>
		case TIMER0_MODE_PWM_FAST:			TCCR0|=TIMER0_MODE_PWM_FAST;Global_u8WaveFormGenerationMode=TIMER0_MODE_PWM_FAST;break;
    1034:	a3 e5       	ldi	r26, 0x53	; 83
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e3 e5       	ldi	r30, 0x53	; 83
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	88 64       	ori	r24, 0x48	; 72
    1040:	8c 93       	st	X, r24
    1042:	88 e4       	ldi	r24, 0x48	; 72
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	90 93 85 00 	sts	0x0085, r25
    104a:	80 93 84 00 	sts	0x0084, r24
    104e:	0d c0       	rjmp	.+26     	; 0x106a <TIMER_voidTimerInit+0x12e>
		case TIMER0_MODE_PWM_PHASE_CORRECT: TCCR0|=TIMER0_MODE_PWM_PHASE_CORRECT;Global_u8WaveFormGenerationMode=TIMER0_MODE_PWM_PHASE_CORRECT;break;
    1050:	a3 e5       	ldi	r26, 0x53	; 83
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e3 e5       	ldi	r30, 0x53	; 83
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	88 60       	ori	r24, 0x08	; 8
    105c:	8c 93       	st	X, r24
    105e:	88 e0       	ldi	r24, 0x08	; 8
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	90 93 85 00 	sts	0x0085, r25
    1066:	80 93 84 00 	sts	0x0084, r24
		}

		switch(Add_structTimerCfg->Timer_u8OcBehaviour){
    106a:	e9 81       	ldd	r30, Y+1	; 0x01
    106c:	fa 81       	ldd	r31, Y+2	; 0x02
    106e:	87 81       	ldd	r24, Z+7	; 0x07
    1070:	90 85       	ldd	r25, Z+8	; 0x08
    1072:	9a 8b       	std	Y+18, r25	; 0x12
    1074:	89 8b       	std	Y+17, r24	; 0x11
    1076:	29 89       	ldd	r18, Y+17	; 0x11
    1078:	3a 89       	ldd	r19, Y+18	; 0x12
    107a:	20 31       	cpi	r18, 0x10	; 16
    107c:	31 05       	cpc	r19, r1
    107e:	e9 f0       	breq	.+58     	; 0x10ba <TIMER_voidTimerInit+0x17e>
    1080:	89 89       	ldd	r24, Y+17	; 0x11
    1082:	9a 89       	ldd	r25, Y+18	; 0x12
    1084:	81 31       	cpi	r24, 0x11	; 17
    1086:	91 05       	cpc	r25, r1
    1088:	30 f4       	brcc	.+12     	; 0x1096 <TIMER_voidTimerInit+0x15a>
    108a:	29 89       	ldd	r18, Y+17	; 0x11
    108c:	3a 89       	ldd	r19, Y+18	; 0x12
    108e:	21 15       	cp	r18, r1
    1090:	31 05       	cpc	r19, r1
    1092:	61 f0       	breq	.+24     	; 0x10ac <TIMER_voidTimerInit+0x170>
    1094:	29 c0       	rjmp	.+82     	; 0x10e8 <TIMER_voidTimerInit+0x1ac>
    1096:	89 89       	ldd	r24, Y+17	; 0x11
    1098:	9a 89       	ldd	r25, Y+18	; 0x12
    109a:	80 32       	cpi	r24, 0x20	; 32
    109c:	91 05       	cpc	r25, r1
    109e:	a9 f0       	breq	.+42     	; 0x10ca <TIMER_voidTimerInit+0x18e>
    10a0:	29 89       	ldd	r18, Y+17	; 0x11
    10a2:	3a 89       	ldd	r19, Y+18	; 0x12
    10a4:	20 33       	cpi	r18, 0x30	; 48
    10a6:	31 05       	cpc	r19, r1
    10a8:	c1 f0       	breq	.+48     	; 0x10da <TIMER_voidTimerInit+0x19e>
    10aa:	1e c0       	rjmp	.+60     	; 0x10e8 <TIMER_voidTimerInit+0x1ac>
		case TIMER0_OC0_NO_PWM_NORMAL_OPERATION:TCCR0|=TIMER0_OC0_NO_PWM_NORMAL_OPERATION;break;
    10ac:	e3 e5       	ldi	r30, 0x53	; 83
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	a3 e5       	ldi	r26, 0x53	; 83
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	8c 91       	ld	r24, X
    10b6:	80 83       	st	Z, r24
    10b8:	17 c0       	rjmp	.+46     	; 0x10e8 <TIMER_voidTimerInit+0x1ac>
		case TIMER0_OC0_NO_PWM_TOGGLE_OPERATION:TCCR0|=TIMER0_OC0_NO_PWM_TOGGLE_OPERATION;break;
    10ba:	a3 e5       	ldi	r26, 0x53	; 83
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e3 e5       	ldi	r30, 0x53	; 83
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	80 61       	ori	r24, 0x10	; 16
    10c6:	8c 93       	st	X, r24
    10c8:	0f c0       	rjmp	.+30     	; 0x10e8 <TIMER_voidTimerInit+0x1ac>
		case TIMER0_OC0_NO_PWM_CLEAR_OPERATION: TCCR0|=TIMER0_OC0_NO_PWM_CLEAR_OPERATION;break;
    10ca:	a3 e5       	ldi	r26, 0x53	; 83
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e3 e5       	ldi	r30, 0x53	; 83
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 62       	ori	r24, 0x20	; 32
    10d6:	8c 93       	st	X, r24
    10d8:	07 c0       	rjmp	.+14     	; 0x10e8 <TIMER_voidTimerInit+0x1ac>
		case TIMER0_OC0_NO_PWM_SET_OPERATION:   TCCR0|=TIMER0_OC0_NO_PWM_SET_OPERATION;break;
    10da:	a3 e5       	ldi	r26, 0x53	; 83
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e3 e5       	ldi	r30, 0x53	; 83
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 63       	ori	r24, 0x30	; 48
    10e6:	8c 93       	st	X, r24
		}


		switch(Add_structTimerCfg->Timer_u8ClockSelect){
    10e8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ea:	fa 81       	ldd	r31, Y+2	; 0x02
    10ec:	85 81       	ldd	r24, Z+5	; 0x05
    10ee:	96 81       	ldd	r25, Z+6	; 0x06
    10f0:	98 8b       	std	Y+16, r25	; 0x10
    10f2:	8f 87       	std	Y+15, r24	; 0x0f
    10f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    10f6:	38 89       	ldd	r19, Y+16	; 0x10
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	79 f1       	breq	.+94     	; 0x115c <TIMER_voidTimerInit+0x220>
    10fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1100:	98 89       	ldd	r25, Y+16	; 0x10
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	58 f4       	brcc	.+22     	; 0x111e <TIMER_voidTimerInit+0x1e2>
    1108:	2f 85       	ldd	r18, Y+15	; 0x0f
    110a:	38 89       	ldd	r19, Y+16	; 0x10
    110c:	21 15       	cp	r18, r1
    110e:	31 05       	cpc	r19, r1
    1110:	b1 f0       	breq	.+44     	; 0x113e <TIMER_voidTimerInit+0x202>
    1112:	8f 85       	ldd	r24, Y+15	; 0x0f
    1114:	98 89       	ldd	r25, Y+16	; 0x10
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	c1 f0       	breq	.+48     	; 0x114c <TIMER_voidTimerInit+0x210>
    111c:	f4 c2       	rjmp	.+1512   	; 0x1706 <TIMER_voidTimerInit+0x7ca>
    111e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1120:	38 89       	ldd	r19, Y+16	; 0x10
    1122:	24 30       	cpi	r18, 0x04	; 4
    1124:	31 05       	cpc	r19, r1
    1126:	b1 f1       	breq	.+108    	; 0x1194 <TIMER_voidTimerInit+0x258>
    1128:	8f 85       	ldd	r24, Y+15	; 0x0f
    112a:	98 89       	ldd	r25, Y+16	; 0x10
    112c:	84 30       	cpi	r24, 0x04	; 4
    112e:	91 05       	cpc	r25, r1
    1130:	18 f1       	brcs	.+70     	; 0x1178 <TIMER_voidTimerInit+0x23c>
    1132:	2f 85       	ldd	r18, Y+15	; 0x0f
    1134:	38 89       	ldd	r19, Y+16	; 0x10
    1136:	25 30       	cpi	r18, 0x05	; 5
    1138:	31 05       	cpc	r19, r1
    113a:	d1 f1       	breq	.+116    	; 0x11b0 <TIMER_voidTimerInit+0x274>
    113c:	e4 c2       	rjmp	.+1480   	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		case TIMER0_CLOCK_NO_CLOCK_SOURCE : TCCR0|=TIMER0_CLOCK_NO_CLOCK_SOURCE ; break;
    113e:	e3 e5       	ldi	r30, 0x53	; 83
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	a3 e5       	ldi	r26, 0x53	; 83
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	8c 91       	ld	r24, X
    1148:	80 83       	st	Z, r24
    114a:	dd c2       	rjmp	.+1466   	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		case TIMER0_CLOCK_NO_PRESCALLING  : TCCR0|=TIMER0_CLOCK_NO_PRESCALLING  ; break;
    114c:	a3 e5       	ldi	r26, 0x53	; 83
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e3 e5       	ldi	r30, 0x53	; 83
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	81 60       	ori	r24, 0x01	; 1
    1158:	8c 93       	st	X, r24
    115a:	d5 c2       	rjmp	.+1450   	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		case TIMER0_CLOCK_PRESCALLING_8   : TCCR0|=TIMER0_CLOCK_PRESCALLING_8;Global_u16TimerClockPrescalerValue=8; break;
    115c:	a3 e5       	ldi	r26, 0x53	; 83
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e3 e5       	ldi	r30, 0x53	; 83
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	82 60       	ori	r24, 0x02	; 2
    1168:	8c 93       	st	X, r24
    116a:	88 e0       	ldi	r24, 0x08	; 8
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	90 93 7b 00 	sts	0x007B, r25
    1172:	80 93 7a 00 	sts	0x007A, r24
    1176:	c7 c2       	rjmp	.+1422   	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		case TIMER0_CLOCK_PRESCALLING_64  : TCCR0|=TIMER0_CLOCK_PRESCALLING_64;Global_u16TimerClockPrescalerValue=64; break;
    1178:	a3 e5       	ldi	r26, 0x53	; 83
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e3 e5       	ldi	r30, 0x53	; 83
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	83 60       	ori	r24, 0x03	; 3
    1184:	8c 93       	st	X, r24
    1186:	80 e4       	ldi	r24, 0x40	; 64
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	90 93 7b 00 	sts	0x007B, r25
    118e:	80 93 7a 00 	sts	0x007A, r24
    1192:	b9 c2       	rjmp	.+1394   	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		case TIMER0_CLOCK_PRESCALLING_256 : TCCR0|=TIMER0_CLOCK_PRESCALLING_256;Global_u16TimerClockPrescalerValue=128;break;
    1194:	a3 e5       	ldi	r26, 0x53	; 83
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e3 e5       	ldi	r30, 0x53	; 83
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	84 60       	ori	r24, 0x04	; 4
    11a0:	8c 93       	st	X, r24
    11a2:	80 e8       	ldi	r24, 0x80	; 128
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	90 93 7b 00 	sts	0x007B, r25
    11aa:	80 93 7a 00 	sts	0x007A, r24
    11ae:	ab c2       	rjmp	.+1366   	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		case TIMER0_CLOCK_PRESCALLING_1024: TCCR0|=TIMER0_CLOCK_PRESCALLING_1024;Global_u16TimerClockPrescalerValue=1024;break;
    11b0:	a3 e5       	ldi	r26, 0x53	; 83
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e3 e5       	ldi	r30, 0x53	; 83
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	85 60       	ori	r24, 0x05	; 5
    11bc:	8c 93       	st	X, r24
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	94 e0       	ldi	r25, 0x04	; 4
    11c2:	90 93 7b 00 	sts	0x007B, r25
    11c6:	80 93 7a 00 	sts	0x007A, r24
    11ca:	9d c2       	rjmp	.+1338   	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		}
	break;
	case TIMER_NO_TIMER1:

		switch(Add_structTimerCfg->Timer_u8TimerForceOutputCompare){
    11cc:	e9 81       	ldd	r30, Y+1	; 0x01
    11ce:	fa 81       	ldd	r31, Y+2	; 0x02
    11d0:	81 81       	ldd	r24, Z+1	; 0x01
    11d2:	92 81       	ldd	r25, Z+2	; 0x02
    11d4:	9e 87       	std	Y+14, r25	; 0x0e
    11d6:	8d 87       	std	Y+13, r24	; 0x0d
    11d8:	2d 85       	ldd	r18, Y+13	; 0x0d
    11da:	3e 85       	ldd	r19, Y+14	; 0x0e
    11dc:	21 15       	cp	r18, r1
    11de:	31 05       	cpc	r19, r1
    11e0:	61 f1       	breq	.+88     	; 0x123a <TIMER_voidTimerInit+0x2fe>
    11e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	91 05       	cpc	r25, r1
    11ea:	09 f0       	breq	.+2      	; 0x11ee <TIMER_voidTimerInit+0x2b2>
    11ec:	4a c0       	rjmp	.+148    	; 0x1282 <TIMER_voidTimerInit+0x346>
		case TIMER1_FOC_ON:
			switch(Add_structTimerCfg->Timer1_u8Channel){
    11ee:	e9 81       	ldd	r30, Y+1	; 0x01
    11f0:	fa 81       	ldd	r31, Y+2	; 0x02
    11f2:	21 85       	ldd	r18, Z+9	; 0x09
    11f4:	32 85       	ldd	r19, Z+10	; 0x0a
    11f6:	3c 87       	std	Y+12, r19	; 0x0c
    11f8:	2b 87       	std	Y+11, r18	; 0x0b
    11fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    11fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	31 f0       	breq	.+12     	; 0x120e <TIMER_voidTimerInit+0x2d2>
    1202:	2b 85       	ldd	r18, Y+11	; 0x0b
    1204:	3c 85       	ldd	r19, Y+12	; 0x0c
    1206:	21 30       	cpi	r18, 0x01	; 1
    1208:	31 05       	cpc	r19, r1
    120a:	61 f0       	breq	.+24     	; 0x1224 <TIMER_voidTimerInit+0x2e8>
    120c:	3a c0       	rjmp	.+116    	; 0x1282 <TIMER_voidTimerInit+0x346>
				case TIMER1_CHANNEL_A: TCCR1|=TIMER1_FOC_CHANNEL_A_ON;break;
    120e:	ae e4       	ldi	r26, 0x4E	; 78
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ee e4       	ldi	r30, 0x4E	; 78
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	91 81       	ldd	r25, Z+1	; 0x01
    121a:	94 60       	ori	r25, 0x04	; 4
    121c:	11 96       	adiw	r26, 0x01	; 1
    121e:	9c 93       	st	X, r25
    1220:	8e 93       	st	-X, r24
    1222:	2f c0       	rjmp	.+94     	; 0x1282 <TIMER_voidTimerInit+0x346>
				case TIMER1_CHANNEL_B: TCCR1|=TIMER1_FOC_CHANNEL_B_ON;break;
    1224:	ae e4       	ldi	r26, 0x4E	; 78
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	ee e4       	ldi	r30, 0x4E	; 78
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	98 60       	ori	r25, 0x08	; 8
    1232:	11 96       	adiw	r26, 0x01	; 1
    1234:	9c 93       	st	X, r25
    1236:	8e 93       	st	-X, r24
    1238:	24 c0       	rjmp	.+72     	; 0x1282 <TIMER_voidTimerInit+0x346>
			}
		break;
		case TIMER1_FOC_OFF:
			switch(Add_structTimerCfg->Timer1_u8Channel){
    123a:	e9 81       	ldd	r30, Y+1	; 0x01
    123c:	fa 81       	ldd	r31, Y+2	; 0x02
    123e:	81 85       	ldd	r24, Z+9	; 0x09
    1240:	92 85       	ldd	r25, Z+10	; 0x0a
    1242:	9a 87       	std	Y+10, r25	; 0x0a
    1244:	89 87       	std	Y+9, r24	; 0x09
    1246:	29 85       	ldd	r18, Y+9	; 0x09
    1248:	3a 85       	ldd	r19, Y+10	; 0x0a
    124a:	21 15       	cp	r18, r1
    124c:	31 05       	cpc	r19, r1
    124e:	31 f0       	breq	.+12     	; 0x125c <TIMER_voidTimerInit+0x320>
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	91 05       	cpc	r25, r1
    1258:	59 f0       	breq	.+22     	; 0x1270 <TIMER_voidTimerInit+0x334>
    125a:	13 c0       	rjmp	.+38     	; 0x1282 <TIMER_voidTimerInit+0x346>
				case TIMER1_CHANNEL_A: TCCR1|=TIMER1_FOC_CHANNEL_A_OFF;break;
    125c:	ee e4       	ldi	r30, 0x4E	; 78
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	ae e4       	ldi	r26, 0x4E	; 78
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	8d 91       	ld	r24, X+
    1266:	9c 91       	ld	r25, X
    1268:	11 97       	sbiw	r26, 0x01	; 1
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	80 83       	st	Z, r24
    126e:	09 c0       	rjmp	.+18     	; 0x1282 <TIMER_voidTimerInit+0x346>
				case TIMER1_CHANNEL_B: TCCR1|=TIMER1_FOC_CHANNEL_B_OFF;break;
    1270:	ee e4       	ldi	r30, 0x4E	; 78
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	ae e4       	ldi	r26, 0x4E	; 78
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	8d 91       	ld	r24, X+
    127a:	9c 91       	ld	r25, X
    127c:	11 97       	sbiw	r26, 0x01	; 1
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	80 83       	st	Z, r24
			}
		break;
		}

		switch(Add_structTimerCfg->Timer_u8WaveFormGenerationMode){
    1282:	e9 81       	ldd	r30, Y+1	; 0x01
    1284:	fa 81       	ldd	r31, Y+2	; 0x02
    1286:	23 81       	ldd	r18, Z+3	; 0x03
    1288:	34 81       	ldd	r19, Z+4	; 0x04
    128a:	38 87       	std	Y+8, r19	; 0x08
    128c:	2f 83       	std	Y+7, r18	; 0x07
    128e:	8f 81       	ldd	r24, Y+7	; 0x07
    1290:	98 85       	ldd	r25, Y+8	; 0x08
    1292:	22 e0       	ldi	r18, 0x02	; 2
    1294:	80 30       	cpi	r24, 0x00	; 0
    1296:	92 07       	cpc	r25, r18
    1298:	09 f4       	brne	.+2      	; 0x129c <TIMER_voidTimerInit+0x360>
    129a:	84 c0       	rjmp	.+264    	; 0x13a4 <TIMER_voidTimerInit+0x468>
    129c:	8f 81       	ldd	r24, Y+7	; 0x07
    129e:	98 85       	ldd	r25, Y+8	; 0x08
    12a0:	22 e0       	ldi	r18, 0x02	; 2
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	92 07       	cpc	r25, r18
    12a6:	68 f5       	brcc	.+90     	; 0x1302 <TIMER_voidTimerInit+0x3c6>
    12a8:	8f 81       	ldd	r24, Y+7	; 0x07
    12aa:	98 85       	ldd	r25, Y+8	; 0x08
    12ac:	88 31       	cpi	r24, 0x18	; 24
    12ae:	91 05       	cpc	r25, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <TIMER_voidTimerInit+0x378>
    12b2:	05 c1       	rjmp	.+522    	; 0x14be <TIMER_voidTimerInit+0x582>
    12b4:	2f 81       	ldd	r18, Y+7	; 0x07
    12b6:	38 85       	ldd	r19, Y+8	; 0x08
    12b8:	29 31       	cpi	r18, 0x19	; 25
    12ba:	31 05       	cpc	r19, r1
    12bc:	60 f4       	brcc	.+24     	; 0x12d6 <TIMER_voidTimerInit+0x39a>
    12be:	8f 81       	ldd	r24, Y+7	; 0x07
    12c0:	98 85       	ldd	r25, Y+8	; 0x08
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <TIMER_voidTimerInit+0x38c>
    12c6:	4f c0       	rjmp	.+158    	; 0x1366 <TIMER_voidTimerInit+0x42a>
    12c8:	2f 81       	ldd	r18, Y+7	; 0x07
    12ca:	38 85       	ldd	r19, Y+8	; 0x08
    12cc:	28 30       	cpi	r18, 0x08	; 8
    12ce:	31 05       	cpc	r19, r1
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <TIMER_voidTimerInit+0x398>
    12d2:	8a c0       	rjmp	.+276    	; 0x13e8 <TIMER_voidTimerInit+0x4ac>
    12d4:	28 c1       	rjmp	.+592    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
    12d6:	8f 81       	ldd	r24, Y+7	; 0x07
    12d8:	98 85       	ldd	r25, Y+8	; 0x08
    12da:	21 e0       	ldi	r18, 0x01	; 1
    12dc:	88 30       	cpi	r24, 0x08	; 8
    12de:	92 07       	cpc	r25, r18
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <TIMER_voidTimerInit+0x3a8>
    12e2:	93 c0       	rjmp	.+294    	; 0x140a <TIMER_voidTimerInit+0x4ce>
    12e4:	8f 81       	ldd	r24, Y+7	; 0x07
    12e6:	98 85       	ldd	r25, Y+8	; 0x08
    12e8:	21 e0       	ldi	r18, 0x01	; 1
    12ea:	88 31       	cpi	r24, 0x18	; 24
    12ec:	92 07       	cpc	r25, r18
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <TIMER_voidTimerInit+0x3b6>
    12f0:	f7 c0       	rjmp	.+494    	; 0x14e0 <TIMER_voidTimerInit+0x5a4>
    12f2:	8f 81       	ldd	r24, Y+7	; 0x07
    12f4:	98 85       	ldd	r25, Y+8	; 0x08
    12f6:	21 e0       	ldi	r18, 0x01	; 1
    12f8:	80 30       	cpi	r24, 0x00	; 0
    12fa:	92 07       	cpc	r25, r18
    12fc:	09 f4       	brne	.+2      	; 0x1300 <TIMER_voidTimerInit+0x3c4>
    12fe:	41 c0       	rjmp	.+130    	; 0x1382 <TIMER_voidTimerInit+0x446>
    1300:	12 c1       	rjmp	.+548    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
    1302:	8f 81       	ldd	r24, Y+7	; 0x07
    1304:	98 85       	ldd	r25, Y+8	; 0x08
    1306:	23 e0       	ldi	r18, 0x03	; 3
    1308:	80 30       	cpi	r24, 0x00	; 0
    130a:	92 07       	cpc	r25, r18
    130c:	09 f4       	brne	.+2      	; 0x1310 <TIMER_voidTimerInit+0x3d4>
    130e:	5b c0       	rjmp	.+182    	; 0x13c6 <TIMER_voidTimerInit+0x48a>
    1310:	8f 81       	ldd	r24, Y+7	; 0x07
    1312:	98 85       	ldd	r25, Y+8	; 0x08
    1314:	23 e0       	ldi	r18, 0x03	; 3
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	92 07       	cpc	r25, r18
    131a:	78 f4       	brcc	.+30     	; 0x133a <TIMER_voidTimerInit+0x3fe>
    131c:	8f 81       	ldd	r24, Y+7	; 0x07
    131e:	98 85       	ldd	r25, Y+8	; 0x08
    1320:	22 e0       	ldi	r18, 0x02	; 2
    1322:	88 30       	cpi	r24, 0x08	; 8
    1324:	92 07       	cpc	r25, r18
    1326:	09 f4       	brne	.+2      	; 0x132a <TIMER_voidTimerInit+0x3ee>
    1328:	82 c0       	rjmp	.+260    	; 0x142e <TIMER_voidTimerInit+0x4f2>
    132a:	8f 81       	ldd	r24, Y+7	; 0x07
    132c:	98 85       	ldd	r25, Y+8	; 0x08
    132e:	22 e0       	ldi	r18, 0x02	; 2
    1330:	80 31       	cpi	r24, 0x10	; 16
    1332:	92 07       	cpc	r25, r18
    1334:	09 f4       	brne	.+2      	; 0x1338 <TIMER_voidTimerInit+0x3fc>
    1336:	9f c0       	rjmp	.+318    	; 0x1476 <TIMER_voidTimerInit+0x53a>
    1338:	f6 c0       	rjmp	.+492    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
    133a:	8f 81       	ldd	r24, Y+7	; 0x07
    133c:	98 85       	ldd	r25, Y+8	; 0x08
    133e:	23 e0       	ldi	r18, 0x03	; 3
    1340:	80 31       	cpi	r24, 0x10	; 16
    1342:	92 07       	cpc	r25, r18
    1344:	09 f4       	brne	.+2      	; 0x1348 <TIMER_voidTimerInit+0x40c>
    1346:	a9 c0       	rjmp	.+338    	; 0x149a <TIMER_voidTimerInit+0x55e>
    1348:	8f 81       	ldd	r24, Y+7	; 0x07
    134a:	98 85       	ldd	r25, Y+8	; 0x08
    134c:	23 e0       	ldi	r18, 0x03	; 3
    134e:	88 31       	cpi	r24, 0x18	; 24
    1350:	92 07       	cpc	r25, r18
    1352:	09 f4       	brne	.+2      	; 0x1356 <TIMER_voidTimerInit+0x41a>
    1354:	d7 c0       	rjmp	.+430    	; 0x1504 <TIMER_voidTimerInit+0x5c8>
    1356:	8f 81       	ldd	r24, Y+7	; 0x07
    1358:	98 85       	ldd	r25, Y+8	; 0x08
    135a:	23 e0       	ldi	r18, 0x03	; 3
    135c:	88 30       	cpi	r24, 0x08	; 8
    135e:	92 07       	cpc	r25, r18
    1360:	09 f4       	brne	.+2      	; 0x1364 <TIMER_voidTimerInit+0x428>
    1362:	77 c0       	rjmp	.+238    	; 0x1452 <TIMER_voidTimerInit+0x516>
    1364:	e0 c0       	rjmp	.+448    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_NORMAL                              :TCCR1|=TIMER1_MODE_NORMAL                              ;Global_u8WaveFormGenerationMode=TIMER1_MODE_NORMAL                             ;break;
    1366:	ee e4       	ldi	r30, 0x4E	; 78
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	ae e4       	ldi	r26, 0x4E	; 78
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	8d 91       	ld	r24, X+
    1370:	9c 91       	ld	r25, X
    1372:	11 97       	sbiw	r26, 0x01	; 1
    1374:	91 83       	std	Z+1, r25	; 0x01
    1376:	80 83       	st	Z, r24
    1378:	10 92 85 00 	sts	0x0085, r1
    137c:	10 92 84 00 	sts	0x0084, r1
    1380:	d2 c0       	rjmp	.+420    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT             :TCCR1|=TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT             ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT            ;break;
    1382:	ae e4       	ldi	r26, 0x4E	; 78
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	ee e4       	ldi	r30, 0x4E	; 78
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	91 60       	ori	r25, 0x01	; 1
    1390:	11 96       	adiw	r26, 0x01	; 1
    1392:	9c 93       	st	X, r25
    1394:	8e 93       	st	-X, r24
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	90 93 85 00 	sts	0x0085, r25
    139e:	80 93 84 00 	sts	0x0084, r24
    13a2:	c1 c0       	rjmp	.+386    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT             :TCCR1|=TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT             ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT            ;break;
    13a4:	ae e4       	ldi	r26, 0x4E	; 78
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ee e4       	ldi	r30, 0x4E	; 78
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	91 81       	ldd	r25, Z+1	; 0x01
    13b0:	92 60       	ori	r25, 0x02	; 2
    13b2:	11 96       	adiw	r26, 0x01	; 1
    13b4:	9c 93       	st	X, r25
    13b6:	8e 93       	st	-X, r24
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	92 e0       	ldi	r25, 0x02	; 2
    13bc:	90 93 85 00 	sts	0x0085, r25
    13c0:	80 93 84 00 	sts	0x0084, r24
    13c4:	b0 c0       	rjmp	.+352    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT            :TCCR1|=TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT           ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT           ;break;
    13c6:	ae e4       	ldi	r26, 0x4E	; 78
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ee e4       	ldi	r30, 0x4E	; 78
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	91 81       	ldd	r25, Z+1	; 0x01
    13d2:	93 60       	ori	r25, 0x03	; 3
    13d4:	11 96       	adiw	r26, 0x01	; 1
    13d6:	9c 93       	st	X, r25
    13d8:	8e 93       	st	-X, r24
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	93 e0       	ldi	r25, 0x03	; 3
    13de:	90 93 85 00 	sts	0x0085, r25
    13e2:	80 93 84 00 	sts	0x0084, r24
    13e6:	9f c0       	rjmp	.+318    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_CTC                                 :TCCR1|=TIMER1_MODE_CTC                                ;Global_u8WaveFormGenerationMode=TIMER1_MODE_CTC                                ;break;
    13e8:	ae e4       	ldi	r26, 0x4E	; 78
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	ee e4       	ldi	r30, 0x4E	; 78
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	88 60       	ori	r24, 0x08	; 8
    13f6:	11 96       	adiw	r26, 0x01	; 1
    13f8:	9c 93       	st	X, r25
    13fa:	8e 93       	st	-X, r24
    13fc:	88 e0       	ldi	r24, 0x08	; 8
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	90 93 85 00 	sts	0x0085, r25
    1404:	80 93 84 00 	sts	0x0084, r24
    1408:	8e c0       	rjmp	.+284    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_PWM_FAST_8_BIT                      :TCCR1|=TIMER1_MODE_PWM_FAST_8_BIT                     ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_FAST_8_BIT                     ;break;
    140a:	ae e4       	ldi	r26, 0x4E	; 78
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	ee e4       	ldi	r30, 0x4E	; 78
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	91 81       	ldd	r25, Z+1	; 0x01
    1416:	88 60       	ori	r24, 0x08	; 8
    1418:	91 60       	ori	r25, 0x01	; 1
    141a:	11 96       	adiw	r26, 0x01	; 1
    141c:	9c 93       	st	X, r25
    141e:	8e 93       	st	-X, r24
    1420:	88 e0       	ldi	r24, 0x08	; 8
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	90 93 85 00 	sts	0x0085, r25
    1428:	80 93 84 00 	sts	0x0084, r24
    142c:	7c c0       	rjmp	.+248    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_PWM_FAST_9_BIT                      :TCCR1|=TIMER1_MODE_PWM_FAST_9_BIT                     ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_FAST_9_BIT                     ;break;
    142e:	ae e4       	ldi	r26, 0x4E	; 78
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	ee e4       	ldi	r30, 0x4E	; 78
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
    143a:	88 60       	ori	r24, 0x08	; 8
    143c:	92 60       	ori	r25, 0x02	; 2
    143e:	11 96       	adiw	r26, 0x01	; 1
    1440:	9c 93       	st	X, r25
    1442:	8e 93       	st	-X, r24
    1444:	88 e0       	ldi	r24, 0x08	; 8
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	90 93 85 00 	sts	0x0085, r25
    144c:	80 93 84 00 	sts	0x0084, r24
    1450:	6a c0       	rjmp	.+212    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_PWM_FAST_10_BIT                     :TCCR1|=TIMER1_MODE_PWM_FAST_10_BIT                    ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_FAST_10_BIT                    ;break;
    1452:	ae e4       	ldi	r26, 0x4E	; 78
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ee e4       	ldi	r30, 0x4E	; 78
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	88 60       	ori	r24, 0x08	; 8
    1460:	93 60       	ori	r25, 0x03	; 3
    1462:	11 96       	adiw	r26, 0x01	; 1
    1464:	9c 93       	st	X, r25
    1466:	8e 93       	st	-X, r24
    1468:	88 e0       	ldi	r24, 0x08	; 8
    146a:	93 e0       	ldi	r25, 0x03	; 3
    146c:	90 93 85 00 	sts	0x0085, r25
    1470:	80 93 84 00 	sts	0x0084, r24
    1474:	58 c0       	rjmp	.+176    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_PWM_PHASE_CORRECT_SET_TOP_VALUE     :TCCR1|=TIMER1_MODE_PWM_PHASE_CORRECT_SET_TOP_VALUE    ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_PHASE_CORRECT_SET_TOP_VALUE    ;break;
    1476:	ae e4       	ldi	r26, 0x4E	; 78
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	ee e4       	ldi	r30, 0x4E	; 78
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	91 81       	ldd	r25, Z+1	; 0x01
    1482:	80 61       	ori	r24, 0x10	; 16
    1484:	92 60       	ori	r25, 0x02	; 2
    1486:	11 96       	adiw	r26, 0x01	; 1
    1488:	9c 93       	st	X, r25
    148a:	8e 93       	st	-X, r24
    148c:	80 e1       	ldi	r24, 0x10	; 16
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	90 93 85 00 	sts	0x0085, r25
    1494:	80 93 84 00 	sts	0x0084, r24
    1498:	46 c0       	rjmp	.+140    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_PWM_PHASE_CORRECT_COMPARE_CHANNEL_A :TCCR1|=TIMER1_MODE_PWM_PHASE_CORRECT_COMPARE_CHANNEL_A;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_PHASE_CORRECT_COMPARE_CHANNEL_A;break;
    149a:	ae e4       	ldi	r26, 0x4E	; 78
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ee e4       	ldi	r30, 0x4E	; 78
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	91 81       	ldd	r25, Z+1	; 0x01
    14a6:	80 61       	ori	r24, 0x10	; 16
    14a8:	93 60       	ori	r25, 0x03	; 3
    14aa:	11 96       	adiw	r26, 0x01	; 1
    14ac:	9c 93       	st	X, r25
    14ae:	8e 93       	st	-X, r24
    14b0:	80 e1       	ldi	r24, 0x10	; 16
    14b2:	93 e0       	ldi	r25, 0x03	; 3
    14b4:	90 93 85 00 	sts	0x0085, r25
    14b8:	80 93 84 00 	sts	0x0084, r24
    14bc:	34 c0       	rjmp	.+104    	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_PWM_CTC_SET_TOP_VALUE               :TCCR1|=TIMER1_MODE_PWM_CTC_SET_TOP_VALUE              ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_CTC_SET_TOP_VALUE              ;break;
    14be:	ae e4       	ldi	r26, 0x4E	; 78
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	ee e4       	ldi	r30, 0x4E	; 78
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	91 81       	ldd	r25, Z+1	; 0x01
    14ca:	88 61       	ori	r24, 0x18	; 24
    14cc:	11 96       	adiw	r26, 0x01	; 1
    14ce:	9c 93       	st	X, r25
    14d0:	8e 93       	st	-X, r24
    14d2:	88 e1       	ldi	r24, 0x18	; 24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	90 93 85 00 	sts	0x0085, r25
    14da:	80 93 84 00 	sts	0x0084, r24
    14de:	23 c0       	rjmp	.+70     	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_PWM_FAST_SET_TOP_VALUE              :TCCR1|=TIMER1_MODE_PWM_FAST_SET_TOP_VALUE             ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_FAST_SET_TOP_VALUE             ;break;
    14e0:	ae e4       	ldi	r26, 0x4E	; 78
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ee e4       	ldi	r30, 0x4E	; 78
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	91 81       	ldd	r25, Z+1	; 0x01
    14ec:	88 61       	ori	r24, 0x18	; 24
    14ee:	91 60       	ori	r25, 0x01	; 1
    14f0:	11 96       	adiw	r26, 0x01	; 1
    14f2:	9c 93       	st	X, r25
    14f4:	8e 93       	st	-X, r24
    14f6:	88 e1       	ldi	r24, 0x18	; 24
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	90 93 85 00 	sts	0x0085, r25
    14fe:	80 93 84 00 	sts	0x0084, r24
    1502:	11 c0       	rjmp	.+34     	; 0x1526 <TIMER_voidTimerInit+0x5ea>
		case TIMER1_MODE_PWM_FAST_COMPARE_CHANNEL_A          :TCCR1|=TIMER1_MODE_PWM_FAST_COMPARE_CHANNEL_A         ;Global_u8WaveFormGenerationMode=TIMER1_MODE_PWM_FAST_COMPARE_CHANNEL_A         ;break;
    1504:	ae e4       	ldi	r26, 0x4E	; 78
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ee e4       	ldi	r30, 0x4E	; 78
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	88 61       	ori	r24, 0x18	; 24
    1512:	93 60       	ori	r25, 0x03	; 3
    1514:	11 96       	adiw	r26, 0x01	; 1
    1516:	9c 93       	st	X, r25
    1518:	8e 93       	st	-X, r24
    151a:	88 e1       	ldi	r24, 0x18	; 24
    151c:	93 e0       	ldi	r25, 0x03	; 3
    151e:	90 93 85 00 	sts	0x0085, r25
    1522:	80 93 84 00 	sts	0x0084, r24

		}

		switch(Add_structTimerCfg->Timer_u8OcBehaviour){
    1526:	e9 81       	ldd	r30, Y+1	; 0x01
    1528:	fa 81       	ldd	r31, Y+2	; 0x02
    152a:	87 81       	ldd	r24, Z+7	; 0x07
    152c:	90 85       	ldd	r25, Z+8	; 0x08
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	2d 81       	ldd	r18, Y+5	; 0x05
    1534:	3e 81       	ldd	r19, Y+6	; 0x06
    1536:	80 e3       	ldi	r24, 0x30	; 48
    1538:	20 30       	cpi	r18, 0x00	; 0
    153a:	38 07       	cpc	r19, r24
    153c:	09 f4       	brne	.+2      	; 0x1540 <TIMER_voidTimerInit+0x604>
    153e:	4d c0       	rjmp	.+154    	; 0x15da <TIMER_voidTimerInit+0x69e>
    1540:	2d 81       	ldd	r18, Y+5	; 0x05
    1542:	3e 81       	ldd	r19, Y+6	; 0x06
    1544:	80 e3       	ldi	r24, 0x30	; 48
    1546:	21 30       	cpi	r18, 0x01	; 1
    1548:	38 07       	cpc	r19, r24
    154a:	90 f4       	brcc	.+36     	; 0x1570 <TIMER_voidTimerInit+0x634>
    154c:	2d 81       	ldd	r18, Y+5	; 0x05
    154e:	3e 81       	ldd	r19, Y+6	; 0x06
    1550:	80 e1       	ldi	r24, 0x10	; 16
    1552:	20 30       	cpi	r18, 0x00	; 0
    1554:	38 07       	cpc	r19, r24
    1556:	59 f1       	breq	.+86     	; 0x15ae <TIMER_voidTimerInit+0x672>
    1558:	2d 81       	ldd	r18, Y+5	; 0x05
    155a:	3e 81       	ldd	r19, Y+6	; 0x06
    155c:	80 e2       	ldi	r24, 0x20	; 32
    155e:	20 30       	cpi	r18, 0x00	; 0
    1560:	38 07       	cpc	r19, r24
    1562:	81 f1       	breq	.+96     	; 0x15c4 <TIMER_voidTimerInit+0x688>
    1564:	2d 81       	ldd	r18, Y+5	; 0x05
    1566:	3e 81       	ldd	r19, Y+6	; 0x06
    1568:	21 15       	cp	r18, r1
    156a:	31 05       	cpc	r19, r1
    156c:	b1 f0       	breq	.+44     	; 0x159a <TIMER_voidTimerInit+0x65e>
    156e:	60 c0       	rjmp	.+192    	; 0x1630 <TIMER_voidTimerInit+0x6f4>
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	20 e8       	ldi	r18, 0x80	; 128
    1576:	80 30       	cpi	r24, 0x00	; 0
    1578:	92 07       	cpc	r25, r18
    157a:	09 f4       	brne	.+2      	; 0x157e <TIMER_voidTimerInit+0x642>
    157c:	44 c0       	rjmp	.+136    	; 0x1606 <TIMER_voidTimerInit+0x6ca>
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	20 ec       	ldi	r18, 0xC0	; 192
    1584:	80 30       	cpi	r24, 0x00	; 0
    1586:	92 07       	cpc	r25, r18
    1588:	09 f4       	brne	.+2      	; 0x158c <TIMER_voidTimerInit+0x650>
    158a:	48 c0       	rjmp	.+144    	; 0x161c <TIMER_voidTimerInit+0x6e0>
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	9e 81       	ldd	r25, Y+6	; 0x06
    1590:	20 e4       	ldi	r18, 0x40	; 64
    1592:	80 30       	cpi	r24, 0x00	; 0
    1594:	92 07       	cpc	r25, r18
    1596:	61 f1       	breq	.+88     	; 0x15f0 <TIMER_voidTimerInit+0x6b4>
    1598:	4b c0       	rjmp	.+150    	; 0x1630 <TIMER_voidTimerInit+0x6f4>
		case TIMER1_CHANNEL_B_OC1_NO_PWM_NORMAL_OPERATION: TCCR1|=TIMER1_CHANNEL_B_OC1_NO_PWM_NORMAL_OPERATION;break;
    159a:	ee e4       	ldi	r30, 0x4E	; 78
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	ae e4       	ldi	r26, 0x4E	; 78
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	8d 91       	ld	r24, X+
    15a4:	9c 91       	ld	r25, X
    15a6:	11 97       	sbiw	r26, 0x01	; 1
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	80 83       	st	Z, r24
    15ac:	41 c0       	rjmp	.+130    	; 0x1630 <TIMER_voidTimerInit+0x6f4>
		case TIMER1_CHANNEL_B_OC1_NO_PWM_TOGGLE_OPERATION: TCCR1|=TIMER1_CHANNEL_B_OC1_NO_PWM_TOGGLE_OPERATION;break;
    15ae:	ae e4       	ldi	r26, 0x4E	; 78
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ee e4       	ldi	r30, 0x4E	; 78
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	90 61       	ori	r25, 0x10	; 16
    15bc:	11 96       	adiw	r26, 0x01	; 1
    15be:	9c 93       	st	X, r25
    15c0:	8e 93       	st	-X, r24
    15c2:	36 c0       	rjmp	.+108    	; 0x1630 <TIMER_voidTimerInit+0x6f4>
		case TIMER1_CHANNEL_B_OC1_NO_PWM_CLEAR_OPERATION : TCCR1|=TIMER1_CHANNEL_B_OC1_NO_PWM_CLEAR_OPERATION ;break;
    15c4:	ae e4       	ldi	r26, 0x4E	; 78
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	ee e4       	ldi	r30, 0x4E	; 78
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	90 62       	ori	r25, 0x20	; 32
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	9c 93       	st	X, r25
    15d6:	8e 93       	st	-X, r24
    15d8:	2b c0       	rjmp	.+86     	; 0x1630 <TIMER_voidTimerInit+0x6f4>
		case TIMER1_CHANNEL_B_OC1_NO_PWM_SET_OPERATION   : TCCR1|=TIMER1_CHANNEL_B_OC1_NO_PWM_SET_OPERATION   ;break;
    15da:	ae e4       	ldi	r26, 0x4E	; 78
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	ee e4       	ldi	r30, 0x4E	; 78
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	90 63       	ori	r25, 0x30	; 48
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	9c 93       	st	X, r25
    15ec:	8e 93       	st	-X, r24
    15ee:	20 c0       	rjmp	.+64     	; 0x1630 <TIMER_voidTimerInit+0x6f4>

//		case TIMER1_CHANNEL_A_OC1_NO_PWM_NORMAL_OPERATION: TCCR0|=TIMER1_CHANNEL_A_OC1_NO_PWM_NORMAL_OPERATION;break;
		case TIMER1_CHANNEL_A_OC1_NO_PWM_TOGGLE_OPERATION: TCCR1|=TIMER1_CHANNEL_A_OC1_NO_PWM_TOGGLE_OPERATION;break;
    15f0:	ae e4       	ldi	r26, 0x4E	; 78
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	ee e4       	ldi	r30, 0x4E	; 78
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	90 64       	ori	r25, 0x40	; 64
    15fe:	11 96       	adiw	r26, 0x01	; 1
    1600:	9c 93       	st	X, r25
    1602:	8e 93       	st	-X, r24
    1604:	15 c0       	rjmp	.+42     	; 0x1630 <TIMER_voidTimerInit+0x6f4>
		case TIMER1_CHANNEL_A_OC1_NO_PWM_CLEAR_OPERATION : TCCR1|=TIMER1_CHANNEL_A_OC1_NO_PWM_CLEAR_OPERATION ;break;
    1606:	ae e4       	ldi	r26, 0x4E	; 78
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	ee e4       	ldi	r30, 0x4E	; 78
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	91 81       	ldd	r25, Z+1	; 0x01
    1612:	90 68       	ori	r25, 0x80	; 128
    1614:	11 96       	adiw	r26, 0x01	; 1
    1616:	9c 93       	st	X, r25
    1618:	8e 93       	st	-X, r24
    161a:	0a c0       	rjmp	.+20     	; 0x1630 <TIMER_voidTimerInit+0x6f4>
		case TIMER1_CHANNEL_A_OC1_NO_PWM_SET_OPERATION   : TCCR1|=TIMER1_CHANNEL_A_OC1_NO_PWM_SET_OPERATION   ;break;
    161c:	ae e4       	ldi	r26, 0x4E	; 78
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	ee e4       	ldi	r30, 0x4E	; 78
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	90 6c       	ori	r25, 0xC0	; 192
    162a:	11 96       	adiw	r26, 0x01	; 1
    162c:	9c 93       	st	X, r25
    162e:	8e 93       	st	-X, r24
		}


		switch(Add_structTimerCfg->Timer_u8ClockSelect){
    1630:	e9 81       	ldd	r30, Y+1	; 0x01
    1632:	fa 81       	ldd	r31, Y+2	; 0x02
    1634:	85 81       	ldd	r24, Z+5	; 0x05
    1636:	96 81       	ldd	r25, Z+6	; 0x06
    1638:	9c 83       	std	Y+4, r25	; 0x04
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	2b 81       	ldd	r18, Y+3	; 0x03
    163e:	3c 81       	ldd	r19, Y+4	; 0x04
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	a9 f1       	breq	.+106    	; 0x16b0 <TIMER_voidTimerInit+0x774>
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	91 05       	cpc	r25, r1
    164e:	58 f4       	brcc	.+22     	; 0x1666 <TIMER_voidTimerInit+0x72a>
    1650:	2b 81       	ldd	r18, Y+3	; 0x03
    1652:	3c 81       	ldd	r19, Y+4	; 0x04
    1654:	21 15       	cp	r18, r1
    1656:	31 05       	cpc	r19, r1
    1658:	b1 f0       	breq	.+44     	; 0x1686 <TIMER_voidTimerInit+0x74a>
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 05       	cpc	r25, r1
    1662:	d9 f0       	breq	.+54     	; 0x169a <TIMER_voidTimerInit+0x75e>
    1664:	50 c0       	rjmp	.+160    	; 0x1706 <TIMER_voidTimerInit+0x7ca>
    1666:	2b 81       	ldd	r18, Y+3	; 0x03
    1668:	3c 81       	ldd	r19, Y+4	; 0x04
    166a:	24 30       	cpi	r18, 0x04	; 4
    166c:	31 05       	cpc	r19, r1
    166e:	b1 f1       	breq	.+108    	; 0x16dc <TIMER_voidTimerInit+0x7a0>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	84 30       	cpi	r24, 0x04	; 4
    1676:	91 05       	cpc	r25, r1
    1678:	30 f1       	brcs	.+76     	; 0x16c6 <TIMER_voidTimerInit+0x78a>
    167a:	2b 81       	ldd	r18, Y+3	; 0x03
    167c:	3c 81       	ldd	r19, Y+4	; 0x04
    167e:	25 30       	cpi	r18, 0x05	; 5
    1680:	31 05       	cpc	r19, r1
    1682:	b9 f1       	breq	.+110    	; 0x16f2 <TIMER_voidTimerInit+0x7b6>
    1684:	40 c0       	rjmp	.+128    	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		case TIMER1_CLOCK_NO_CLOCK_SOURCE : TCCR1|=TIMER1_CLOCK_NO_CLOCK_SOURCE ;break;
    1686:	ee e4       	ldi	r30, 0x4E	; 78
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	ae e4       	ldi	r26, 0x4E	; 78
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	8d 91       	ld	r24, X+
    1690:	9c 91       	ld	r25, X
    1692:	11 97       	sbiw	r26, 0x01	; 1
    1694:	91 83       	std	Z+1, r25	; 0x01
    1696:	80 83       	st	Z, r24
    1698:	36 c0       	rjmp	.+108    	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		case TIMER1_CLOCK_NO_PRESCALLING  : TCCR1|=TIMER1_CLOCK_NO_PRESCALLING  ;break;
    169a:	ae e4       	ldi	r26, 0x4E	; 78
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	ee e4       	ldi	r30, 0x4E	; 78
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	91 81       	ldd	r25, Z+1	; 0x01
    16a6:	81 60       	ori	r24, 0x01	; 1
    16a8:	11 96       	adiw	r26, 0x01	; 1
    16aa:	9c 93       	st	X, r25
    16ac:	8e 93       	st	-X, r24
    16ae:	2b c0       	rjmp	.+86     	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		case TIMER1_CLOCK_PRESCALLING_8   : TCCR1|=TIMER1_CLOCK_PRESCALLING_8   ;break;
    16b0:	ae e4       	ldi	r26, 0x4E	; 78
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ee e4       	ldi	r30, 0x4E	; 78
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	82 60       	ori	r24, 0x02	; 2
    16be:	11 96       	adiw	r26, 0x01	; 1
    16c0:	9c 93       	st	X, r25
    16c2:	8e 93       	st	-X, r24
    16c4:	20 c0       	rjmp	.+64     	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		case TIMER1_CLOCK_PRESCALLING_64  : TCCR1|=TIMER1_CLOCK_PRESCALLING_64  ;break;
    16c6:	ae e4       	ldi	r26, 0x4E	; 78
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	ee e4       	ldi	r30, 0x4E	; 78
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	83 60       	ori	r24, 0x03	; 3
    16d4:	11 96       	adiw	r26, 0x01	; 1
    16d6:	9c 93       	st	X, r25
    16d8:	8e 93       	st	-X, r24
    16da:	15 c0       	rjmp	.+42     	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		case TIMER1_CLOCK_PRESCALLING_256 : TCCR1|=TIMER1_CLOCK_PRESCALLING_256 ;break;
    16dc:	ae e4       	ldi	r26, 0x4E	; 78
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	ee e4       	ldi	r30, 0x4E	; 78
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	91 81       	ldd	r25, Z+1	; 0x01
    16e8:	84 60       	ori	r24, 0x04	; 4
    16ea:	11 96       	adiw	r26, 0x01	; 1
    16ec:	9c 93       	st	X, r25
    16ee:	8e 93       	st	-X, r24
    16f0:	0a c0       	rjmp	.+20     	; 0x1706 <TIMER_voidTimerInit+0x7ca>
		case TIMER1_CLOCK_PRESCALLING_1024: TCCR1|=TIMER1_CLOCK_PRESCALLING_1024;break;
    16f2:	ae e4       	ldi	r26, 0x4E	; 78
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	ee e4       	ldi	r30, 0x4E	; 78
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	85 60       	ori	r24, 0x05	; 5
    1700:	11 96       	adiw	r26, 0x01	; 1
    1702:	9c 93       	st	X, r25
    1704:	8e 93       	st	-X, r24
		}
	break;
}
}
    1706:	68 96       	adiw	r28, 0x18	; 24
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <TIMER_voidPwmOn>:
//			}
//		}
//		 break;
//	}
//}
void TIMER_voidPwmOn(Timer_structTimerCfg*Add_structTimerCfg,u16 Copy_u8DuttyValue){
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	28 97       	sbiw	r28, 0x08	; 8
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	9a 83       	std	Y+2, r25	; 0x02
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	7c 83       	std	Y+4, r23	; 0x04
    1732:	6b 83       	std	Y+3, r22	; 0x03
switch(Add_structTimerCfg->Timer_u8TimerNo){
    1734:	e9 81       	ldd	r30, Y+1	; 0x01
    1736:	fa 81       	ldd	r31, Y+2	; 0x02
    1738:	80 81       	ld	r24, Z
    173a:	83 70       	andi	r24, 0x03	; 3
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	38 87       	std	Y+8, r19	; 0x08
    1742:	2f 83       	std	Y+7, r18	; 0x07
    1744:	8f 81       	ldd	r24, Y+7	; 0x07
    1746:	98 85       	ldd	r25, Y+8	; 0x08
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	31 f0       	breq	.+12     	; 0x1758 <TIMER_voidPwmOn+0x40>
    174c:	2f 81       	ldd	r18, Y+7	; 0x07
    174e:	38 85       	ldd	r19, Y+8	; 0x08
    1750:	21 30       	cpi	r18, 0x01	; 1
    1752:	31 05       	cpc	r19, r1
    1754:	31 f0       	breq	.+12     	; 0x1762 <TIMER_voidPwmOn+0x4a>
    1756:	46 c0       	rjmp	.+140    	; 0x17e4 <TIMER_voidPwmOn+0xcc>
case TIMER_NO_TIMER0: OCR0 = Copy_u8DuttyValue;break;
    1758:	ec e5       	ldi	r30, 0x5C	; 92
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	80 83       	st	Z, r24
    1760:	41 c0       	rjmp	.+130    	; 0x17e4 <TIMER_voidPwmOn+0xcc>
//	switch(Add_structTimerCfg->Timer_u8OcBehaviour){
//	case TIMER0_OC0_PWM_SET_OPERATION:OCR0 = (TIMER0_TOP_VALUE-Copy_u8DuttyValue)*TIMER0_TOP_VALUE/100.0;break;
//	case TIMER0_OC0_PWM_CLEAR_OPERATION:OCR0 = Copy_u8DuttyValue*TIMER0_TOP_VALUE/100.0;break;
//break;
case TIMER_NO_TIMER1:
	switch(Add_structTimerCfg->Timer_u8OcBehaviour){
    1762:	e9 81       	ldd	r30, Y+1	; 0x01
    1764:	fa 81       	ldd	r31, Y+2	; 0x02
    1766:	87 81       	ldd	r24, Z+7	; 0x07
    1768:	90 85       	ldd	r25, Z+8	; 0x08
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	2d 81       	ldd	r18, Y+5	; 0x05
    1770:	3e 81       	ldd	r19, Y+6	; 0x06
    1772:	80 e3       	ldi	r24, 0x30	; 48
    1774:	20 30       	cpi	r18, 0x00	; 0
    1776:	38 07       	cpc	r19, r24
    1778:	d1 f0       	breq	.+52     	; 0x17ae <TIMER_voidPwmOn+0x96>
    177a:	2d 81       	ldd	r18, Y+5	; 0x05
    177c:	3e 81       	ldd	r19, Y+6	; 0x06
    177e:	80 e3       	ldi	r24, 0x30	; 48
    1780:	21 30       	cpi	r18, 0x01	; 1
    1782:	38 07       	cpc	r19, r24
    1784:	38 f4       	brcc	.+14     	; 0x1794 <TIMER_voidPwmOn+0x7c>
    1786:	2d 81       	ldd	r18, Y+5	; 0x05
    1788:	3e 81       	ldd	r19, Y+6	; 0x06
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	20 30       	cpi	r18, 0x00	; 0
    178e:	38 07       	cpc	r19, r24
    1790:	a9 f0       	breq	.+42     	; 0x17bc <TIMER_voidPwmOn+0xa4>
    1792:	28 c0       	rjmp	.+80     	; 0x17e4 <TIMER_voidPwmOn+0xcc>
    1794:	2d 81       	ldd	r18, Y+5	; 0x05
    1796:	3e 81       	ldd	r19, Y+6	; 0x06
    1798:	80 e8       	ldi	r24, 0x80	; 128
    179a:	20 30       	cpi	r18, 0x00	; 0
    179c:	38 07       	cpc	r19, r24
    179e:	e1 f0       	breq	.+56     	; 0x17d8 <TIMER_voidPwmOn+0xc0>
    17a0:	2d 81       	ldd	r18, Y+5	; 0x05
    17a2:	3e 81       	ldd	r19, Y+6	; 0x06
    17a4:	80 ec       	ldi	r24, 0xC0	; 192
    17a6:	20 30       	cpi	r18, 0x00	; 0
    17a8:	38 07       	cpc	r19, r24
    17aa:	79 f0       	breq	.+30     	; 0x17ca <TIMER_voidPwmOn+0xb2>
    17ac:	1b c0       	rjmp	.+54     	; 0x17e4 <TIMER_voidPwmOn+0xcc>
	case TIMER1_CHANNEL_B_OC1_PWM_SET_OPERATION:OCR1B=Copy_u8DuttyValue;break;
    17ae:	e8 e4       	ldi	r30, 0x48	; 72
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	14 c0       	rjmp	.+40     	; 0x17e4 <TIMER_voidPwmOn+0xcc>
	case TIMER1_CHANNEL_B_OC1_PWM_CLEAR_OPERATION:OCR1B=Copy_u8DuttyValue;break;
    17bc:	e8 e4       	ldi	r30, 0x48	; 72
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	80 83       	st	Z, r24
    17c8:	0d c0       	rjmp	.+26     	; 0x17e4 <TIMER_voidPwmOn+0xcc>
	case TIMER1_CHANNEL_A_OC1_PWM_SET_OPERATION:OCR1A=Copy_u8DuttyValue;break;
    17ca:	ea e4       	ldi	r30, 0x4A	; 74
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	91 83       	std	Z+1, r25	; 0x01
    17d4:	80 83       	st	Z, r24
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <TIMER_voidPwmOn+0xcc>
	case TIMER1_CHANNEL_A_OC1_PWM_CLEAR_OPERATION:OCR1A=Copy_u8DuttyValue;break;
    17d8:	ea e4       	ldi	r30, 0x4A	; 74
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	91 83       	std	Z+1, r25	; 0x01
    17e2:	80 83       	st	Z, r24
//	case TIMER1_CHANNEL_A_OC1_PWM_SET_OPERATION:OCR1A=(TIMER1_TOP_VALUE-Copy_u8DuttyValue)*TIMER1_TOP_VALUE/100.0;break;
//	case TIMER1_CHANNEL_A_OC1_PWM_CLEAR_OPERATION:OCR1A=Copy_u8DuttyValue*TIMER1_TOP_VALUE/100.0;break;
	}
break;
}
}
    17e4:	28 96       	adiw	r28, 0x08	; 8
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <SPI_voidInit>:
/* PARAMETERS: Pointer that carries address of   */
/* configuration struct that user need           */                                       //
/* RETURN: No Return                             */
/*************************************************/

void SPI_voidInit(SPI_sructCfg*Add_sructSPIcfg){
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	2c 97       	sbiw	r28, 0x0c	; 12
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
	switch(Add_sructSPIcfg->SPI_u8SelectMasterSlave){
    180e:	e9 81       	ldd	r30, Y+1	; 0x01
    1810:	fa 81       	ldd	r31, Y+2	; 0x02
    1812:	80 81       	ld	r24, Z
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	3c 87       	std	Y+12, r19	; 0x0c
    181a:	2b 87       	std	Y+11, r18	; 0x0b
    181c:	8b 85       	ldd	r24, Y+11	; 0x0b
    181e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	09 f4       	brne	.+2      	; 0x1826 <SPI_voidInit+0x30>
    1824:	4d c0       	rjmp	.+154    	; 0x18c0 <SPI_voidInit+0xca>
    1826:	2b 85       	ldd	r18, Y+11	; 0x0b
    1828:	3c 85       	ldd	r19, Y+12	; 0x0c
    182a:	20 31       	cpi	r18, 0x10	; 16
    182c:	31 05       	cpc	r19, r1
    182e:	09 f0       	breq	.+2      	; 0x1832 <SPI_voidInit+0x3c>
    1830:	4d c0       	rjmp	.+154    	; 0x18cc <SPI_voidInit+0xd6>
	case SPI_SELECT_MASTER:
		SPCR|= SPI_SELECT_MASTER;
    1832:	ad e2       	ldi	r26, 0x2D	; 45
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ed e2       	ldi	r30, 0x2D	; 45
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 61       	ori	r24, 0x10	; 16
    183e:	8c 93       	st	X, r24
		switch(Add_sructSPIcfg->SPI_u8ClockRate){
    1840:	e9 81       	ldd	r30, Y+1	; 0x01
    1842:	fa 81       	ldd	r31, Y+2	; 0x02
    1844:	83 81       	ldd	r24, Z+3	; 0x03
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	3a 87       	std	Y+10, r19	; 0x0a
    184c:	29 87       	std	Y+9, r18	; 0x09
    184e:	89 85       	ldd	r24, Y+9	; 0x09
    1850:	9a 85       	ldd	r25, Y+10	; 0x0a
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	91 05       	cpc	r25, r1
    1856:	e1 f0       	breq	.+56     	; 0x1890 <SPI_voidInit+0x9a>
    1858:	29 85       	ldd	r18, Y+9	; 0x09
    185a:	3a 85       	ldd	r19, Y+10	; 0x0a
    185c:	22 30       	cpi	r18, 0x02	; 2
    185e:	31 05       	cpc	r19, r1
    1860:	2c f4       	brge	.+10     	; 0x186c <SPI_voidInit+0x76>
    1862:	89 85       	ldd	r24, Y+9	; 0x09
    1864:	9a 85       	ldd	r25, Y+10	; 0x0a
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	61 f0       	breq	.+24     	; 0x1882 <SPI_voidInit+0x8c>
    186a:	30 c0       	rjmp	.+96     	; 0x18cc <SPI_voidInit+0xd6>
    186c:	29 85       	ldd	r18, Y+9	; 0x09
    186e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1870:	22 30       	cpi	r18, 0x02	; 2
    1872:	31 05       	cpc	r19, r1
    1874:	a9 f0       	breq	.+42     	; 0x18a0 <SPI_voidInit+0xaa>
    1876:	89 85       	ldd	r24, Y+9	; 0x09
    1878:	9a 85       	ldd	r25, Y+10	; 0x0a
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	91 05       	cpc	r25, r1
    187e:	c1 f0       	breq	.+48     	; 0x18b0 <SPI_voidInit+0xba>
    1880:	25 c0       	rjmp	.+74     	; 0x18cc <SPI_voidInit+0xd6>
		case SPI_CLOCK_RATE_8   :  SPCR|= SPI_CLOCK_RATE_8   ;break;
    1882:	ed e2       	ldi	r30, 0x2D	; 45
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	ad e2       	ldi	r26, 0x2D	; 45
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	8c 91       	ld	r24, X
    188c:	80 83       	st	Z, r24
    188e:	1e c0       	rjmp	.+60     	; 0x18cc <SPI_voidInit+0xd6>
		case SPI_CLOCK_RATE_16  :  SPCR|= SPI_CLOCK_RATE_16  ;break;
    1890:	ad e2       	ldi	r26, 0x2D	; 45
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ed e2       	ldi	r30, 0x2D	; 45
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	81 60       	ori	r24, 0x01	; 1
    189c:	8c 93       	st	X, r24
    189e:	16 c0       	rjmp	.+44     	; 0x18cc <SPI_voidInit+0xd6>
		case SPI_CLOCK_RATE_64  :  SPCR|= SPI_CLOCK_RATE_64  ;break;
    18a0:	ad e2       	ldi	r26, 0x2D	; 45
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ed e2       	ldi	r30, 0x2D	; 45
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	82 60       	ori	r24, 0x02	; 2
    18ac:	8c 93       	st	X, r24
    18ae:	0e c0       	rjmp	.+28     	; 0x18cc <SPI_voidInit+0xd6>
		case SPI_CLOCK_RATE_128 :  SPCR|= SPI_CLOCK_RATE_128 ;break;
    18b0:	ad e2       	ldi	r26, 0x2D	; 45
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	ed e2       	ldi	r30, 0x2D	; 45
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	83 60       	ori	r24, 0x03	; 3
    18bc:	8c 93       	st	X, r24
    18be:	06 c0       	rjmp	.+12     	; 0x18cc <SPI_voidInit+0xd6>
		}
	break;
	case SPI_SELECT_SLAVE:SPCR|= SPI_SELECT_SLAVE;
    18c0:	ed e2       	ldi	r30, 0x2D	; 45
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	ad e2       	ldi	r26, 0x2D	; 45
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	8c 91       	ld	r24, X
    18ca:	80 83       	st	Z, r24
	}

	switch (Add_sructSPIcfg->SPI_u8ClockPhase){
    18cc:	e9 81       	ldd	r30, Y+1	; 0x01
    18ce:	fa 81       	ldd	r31, Y+2	; 0x02
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	38 87       	std	Y+8, r19	; 0x08
    18d8:	2f 83       	std	Y+7, r18	; 0x07
    18da:	8f 81       	ldd	r24, Y+7	; 0x07
    18dc:	98 85       	ldd	r25, Y+8	; 0x08
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	31 f0       	breq	.+12     	; 0x18ee <SPI_voidInit+0xf8>
    18e2:	2f 81       	ldd	r18, Y+7	; 0x07
    18e4:	38 85       	ldd	r19, Y+8	; 0x08
    18e6:	24 30       	cpi	r18, 0x04	; 4
    18e8:	31 05       	cpc	r19, r1
    18ea:	41 f0       	breq	.+16     	; 0x18fc <SPI_voidInit+0x106>
    18ec:	0e c0       	rjmp	.+28     	; 0x190a <SPI_voidInit+0x114>
	case SPI_CLOCK_PHASE_WRITE_FIRST : SPCR|=SPI_CLOCK_PHASE_WRITE_FIRST;break;
    18ee:	ed e2       	ldi	r30, 0x2D	; 45
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	ad e2       	ldi	r26, 0x2D	; 45
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	8c 91       	ld	r24, X
    18f8:	80 83       	st	Z, r24
    18fa:	07 c0       	rjmp	.+14     	; 0x190a <SPI_voidInit+0x114>
	case SPI_CLOCK_PHASE_READ_FIRST  : SPCR|=SPI_CLOCK_PHASE_READ_FIRST ;break;
    18fc:	ad e2       	ldi	r26, 0x2D	; 45
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	ed e2       	ldi	r30, 0x2D	; 45
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	84 60       	ori	r24, 0x04	; 4
    1908:	8c 93       	st	X, r24
	}

	switch(Add_sructSPIcfg->SPI_u8ClockPolarity){
    190a:	e9 81       	ldd	r30, Y+1	; 0x01
    190c:	fa 81       	ldd	r31, Y+2	; 0x02
    190e:	81 81       	ldd	r24, Z+1	; 0x01
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	3e 83       	std	Y+6, r19	; 0x06
    1916:	2d 83       	std	Y+5, r18	; 0x05
    1918:	8d 81       	ldd	r24, Y+5	; 0x05
    191a:	9e 81       	ldd	r25, Y+6	; 0x06
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	31 f0       	breq	.+12     	; 0x192c <SPI_voidInit+0x136>
    1920:	2d 81       	ldd	r18, Y+5	; 0x05
    1922:	3e 81       	ldd	r19, Y+6	; 0x06
    1924:	28 30       	cpi	r18, 0x08	; 8
    1926:	31 05       	cpc	r19, r1
    1928:	41 f0       	breq	.+16     	; 0x193a <SPI_voidInit+0x144>
    192a:	0e c0       	rjmp	.+28     	; 0x1948 <SPI_voidInit+0x152>
	case SPI_CLOCK_POLARITY_RISING : SPCR|=SPI_CLOCK_POLARITY_RISING ;break;
    192c:	ed e2       	ldi	r30, 0x2D	; 45
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	ad e2       	ldi	r26, 0x2D	; 45
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	8c 91       	ld	r24, X
    1936:	80 83       	st	Z, r24
    1938:	07 c0       	rjmp	.+14     	; 0x1948 <SPI_voidInit+0x152>
	case SPI_CLOCK_POLARITY_FALLING: SPCR|=SPI_CLOCK_POLARITY_FALLING;break;
    193a:	ad e2       	ldi	r26, 0x2D	; 45
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	ed e2       	ldi	r30, 0x2D	; 45
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	88 60       	ori	r24, 0x08	; 8
    1946:	8c 93       	st	X, r24
	}
	switch(Add_sructSPIcfg->SPI_u8DataOrder){
    1948:	e9 81       	ldd	r30, Y+1	; 0x01
    194a:	fa 81       	ldd	r31, Y+2	; 0x02
    194c:	85 81       	ldd	r24, Z+5	; 0x05
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	3c 83       	std	Y+4, r19	; 0x04
    1954:	2b 83       	std	Y+3, r18	; 0x03
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	69 f0       	breq	.+26     	; 0x1978 <SPI_voidInit+0x182>
    195e:	2b 81       	ldd	r18, Y+3	; 0x03
    1960:	3c 81       	ldd	r19, Y+4	; 0x04
    1962:	20 32       	cpi	r18, 0x20	; 32
    1964:	31 05       	cpc	r19, r1
    1966:	71 f4       	brne	.+28     	; 0x1984 <SPI_voidInit+0x18e>
	case SPI_DATA_ORDER_LSB_FIRST : SPCR|=SPI_DATA_ORDER_LSB_FIRST;break;
    1968:	ad e2       	ldi	r26, 0x2D	; 45
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ed e2       	ldi	r30, 0x2D	; 45
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	80 62       	ori	r24, 0x20	; 32
    1974:	8c 93       	st	X, r24
    1976:	06 c0       	rjmp	.+12     	; 0x1984 <SPI_voidInit+0x18e>
	case SPI_DATA_ORDER_MSB_FIRST : SPCR|=SPI_DATA_ORDER_MSB_FIRST;break;
    1978:	ed e2       	ldi	r30, 0x2D	; 45
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	ad e2       	ldi	r26, 0x2D	; 45
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	8c 91       	ld	r24, X
    1982:	80 83       	st	Z, r24
	}

	SPCR|=SPI_ENABLE;
    1984:	ad e2       	ldi	r26, 0x2D	; 45
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	ed e2       	ldi	r30, 0x2D	; 45
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	80 64       	ori	r24, 0x40	; 64
    1990:	8c 93       	st	X, r24

}
    1992:	2c 96       	adiw	r28, 0x0c	; 12
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <SPI_u8Tranceive>:

u8 SPI_u8Tranceive(u8 Copy_u8Data){
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <SPI_u8Tranceive+0x6>
    19aa:	0f 92       	push	r0
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	8a 83       	std	Y+2, r24	; 0x02
 SPDR = Copy_u8Data;
    19b2:	ef e2       	ldi	r30, 0x2F	; 47
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	80 83       	st	Z, r24
 u8 Loc_u8SPItimeOut=200;
    19ba:	88 ec       	ldi	r24, 0xC8	; 200
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	03 c0       	rjmp	.+6      	; 0x19c6 <SPI_u8Tranceive+0x22>
 while(GET_BIT(SPSR,SPI_TRANSFER_FLAG)==SPI_TRANSFER_NOT_COMPLETED && Loc_u8SPItimeOut>0){
	 Loc_u8SPItimeOut--;
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	81 50       	subi	r24, 0x01	; 1
    19c4:	89 83       	std	Y+1, r24	; 0x01
}

u8 SPI_u8Tranceive(u8 Copy_u8Data){
 SPDR = Copy_u8Data;
 u8 Loc_u8SPItimeOut=200;
 while(GET_BIT(SPSR,SPI_TRANSFER_FLAG)==SPI_TRANSFER_NOT_COMPLETED && Loc_u8SPItimeOut>0){
    19c6:	ee e2       	ldi	r30, 0x2E	; 46
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	88 23       	and	r24, r24
    19ce:	1c f0       	brlt	.+6      	; 0x19d6 <SPI_u8Tranceive+0x32>
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	88 23       	and	r24, r24
    19d4:	a9 f7       	brne	.-22     	; 0x19c0 <SPI_u8Tranceive+0x1c>
	 Loc_u8SPItimeOut--;
}
 if(Loc_u8SPItimeOut == SPI_TIMEOUT){
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	88 23       	and	r24, r24
    19da:	31 f0       	breq	.+12     	; 0x19e8 <SPI_u8Tranceive+0x44>
	 #warning SPI TIMEOUT
}
 else{
	 return SPDR;
    19dc:	ef e2       	ldi	r30, 0x2F	; 47
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8b 83       	std	Y+3, r24	; 0x03
 }
}
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	00 c0       	rjmp	.+0      	; 0x19e8 <SPI_u8Tranceive+0x44>
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <GIE_voidGlobalInterruptEnable>:
 */
#include "../../../INCLUDE/MCAL/GIE/GIE_priv.h"
#include "../../../INCLUDE/MCAL/GIE/GIE.h"
#include"../../../SERVICES/bit_utilies.h"
#include"../../../SERVICES/std_types.h"
void GIE_voidGlobalInterruptEnable(){
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    19fc:	af e5       	ldi	r26, 0x5F	; 95
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	ef e5       	ldi	r30, 0x5F	; 95
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	80 68       	ori	r24, 0x80	; 128
    1a08:	8c 93       	st	X, r24
}
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <GIE_voidGlobalInterruptDisable>:
void GIE_voidGlobalInterruptDisable(){
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1a18:	af e5       	ldi	r26, 0x5F	; 95
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ef e5       	ldi	r30, 0x5F	; 95
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8f 77       	andi	r24, 0x7F	; 127
    1a24:	8c 93       	st	X, r24
}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <EXTINT_voidEnable>:
#include "../../../INCLUDE/MCAL/EXTINT/EXTINT.h"
#include "../../../INCLUDE/MCAL/DIO/DIO.h"
#include"../../../SERVICES/bit_utilies.h"
#include"../../../SERVICES/std_types.h"
#include "../../../INCLUDE/MCAL/GIE/GIE.h"
void EXTINT_voidEnable(EXTINT_structCfg*Add_ExtInt){
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	2e 97       	sbiw	r28, 0x0e	; 14
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	89 83       	std	Y+1, r24	; 0x01

	GIE_voidGlobalInterruptEnable();
    1a44:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <GIE_voidGlobalInterruptEnable>

	///////////////////////// INPUT (EXTERNAL) \\\\\\\\\\\\\\\\\\\\\\\\\\\

	switch(Add_ExtInt->IntNo){
    1a48:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4c:	80 81       	ld	r24, Z
    1a4e:	83 70       	andi	r24, 0x03	; 3
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3e 87       	std	Y+14, r19	; 0x0e
    1a56:	2d 87       	std	Y+13, r18	; 0x0d
    1a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	91 05       	cpc	r25, r1
    1a60:	79 f0       	breq	.+30     	; 0x1a80 <EXTINT_voidEnable+0x54>
    1a62:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a64:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a66:	22 30       	cpi	r18, 0x02	; 2
    1a68:	31 05       	cpc	r19, r1
    1a6a:	81 f0       	breq	.+32     	; 0x1a8c <EXTINT_voidEnable+0x60>
    1a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	89 f4       	brne	.+34     	; 0x1a96 <EXTINT_voidEnable+0x6a>
	case EXTINT_INT0: DIO_enuSetPinDirection(DIO_u8_PORTD ,DIO_u8_PIN2,DIO_u8_INPUT);break;
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	62 e0       	ldi	r22, 0x02	; 2
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_enuSetPinDirection>
    1a7e:	0b c0       	rjmp	.+22     	; 0x1a96 <EXTINT_voidEnable+0x6a>
	case EXTINT_INT1: DIO_enuSetPinDirection(DIO_u8_PORTD ,DIO_u8_PIN3,DIO_u8_INPUT);break;
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	63 e0       	ldi	r22, 0x03	; 3
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_enuSetPinDirection>
    1a8a:	05 c0       	rjmp	.+10     	; 0x1a96 <EXTINT_voidEnable+0x6a>
	case EXTINT_INT2: DIO_enuSetPinDirection(DIO_u8_PORTB ,DIO_u8_PIN2,DIO_u8_INPUT);break;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	62 e0       	ldi	r22, 0x02	; 2
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_enuSetPinDirection>
	}

	///////////////////////////// SETMODE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	switch(Add_ExtInt->IntNo){
    1a96:	e9 81       	ldd	r30, Y+1	; 0x01
    1a98:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9a:	80 81       	ld	r24, Z
    1a9c:	83 70       	andi	r24, 0x03	; 3
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	3c 87       	std	Y+12, r19	; 0x0c
    1aa4:	2b 87       	std	Y+11, r18	; 0x0b
    1aa6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aa8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	91 05       	cpc	r25, r1
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <EXTINT_voidEnable+0x86>
    1ab0:	6b c0       	rjmp	.+214    	; 0x1b88 <EXTINT_voidEnable+0x15c>
    1ab2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ab4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ab6:	22 30       	cpi	r18, 0x02	; 2
    1ab8:	31 05       	cpc	r19, r1
    1aba:	09 f4       	brne	.+2      	; 0x1abe <EXTINT_voidEnable+0x92>
    1abc:	c5 c0       	rjmp	.+394    	; 0x1c48 <EXTINT_voidEnable+0x21c>
    1abe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ac0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <EXTINT_voidEnable+0x9c>
    1ac6:	e3 c0       	rjmp	.+454    	; 0x1c8e <EXTINT_voidEnable+0x262>

	case EXTINT_INT0:
		switch(Add_ExtInt->IntMode){
    1ac8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aca:	fa 81       	ldd	r31, Y+2	; 0x02
    1acc:	80 81       	ld	r24, Z
    1ace:	86 95       	lsr	r24
    1ad0:	86 95       	lsr	r24
    1ad2:	83 70       	andi	r24, 0x03	; 3
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	3a 87       	std	Y+10, r19	; 0x0a
    1ada:	29 87       	std	Y+9, r18	; 0x09
    1adc:	89 85       	ldd	r24, Y+9	; 0x09
    1ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	21 f1       	breq	.+72     	; 0x1b2e <EXTINT_voidEnable+0x102>
    1ae6:	29 85       	ldd	r18, Y+9	; 0x09
    1ae8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1aea:	22 30       	cpi	r18, 0x02	; 2
    1aec:	31 05       	cpc	r19, r1
    1aee:	2c f4       	brge	.+10     	; 0x1afa <EXTINT_voidEnable+0xce>
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	61 f0       	breq	.+24     	; 0x1b10 <EXTINT_voidEnable+0xe4>
    1af8:	ca c0       	rjmp	.+404    	; 0x1c8e <EXTINT_voidEnable+0x262>
    1afa:	29 85       	ldd	r18, Y+9	; 0x09
    1afc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1afe:	22 30       	cpi	r18, 0x02	; 2
    1b00:	31 05       	cpc	r19, r1
    1b02:	21 f1       	breq	.+72     	; 0x1b4c <EXTINT_voidEnable+0x120>
    1b04:	89 85       	ldd	r24, Y+9	; 0x09
    1b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b08:	83 30       	cpi	r24, 0x03	; 3
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	71 f1       	breq	.+92     	; 0x1b6a <EXTINT_voidEnable+0x13e>
    1b0e:	bf c0       	rjmp	.+382    	; 0x1c8e <EXTINT_voidEnable+0x262>
	case EXTINT_RISING_EDGE     :SET_BIT(MCUCR,1);SET_BIT(MCUCR,0);break;
    1b10:	a5 e5       	ldi	r26, 0x55	; 85
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e5 e5       	ldi	r30, 0x55	; 85
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	82 60       	ori	r24, 0x02	; 2
    1b1c:	8c 93       	st	X, r24
    1b1e:	a5 e5       	ldi	r26, 0x55	; 85
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e5       	ldi	r30, 0x55	; 85
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	81 60       	ori	r24, 0x01	; 1
    1b2a:	8c 93       	st	X, r24
    1b2c:	b0 c0       	rjmp	.+352    	; 0x1c8e <EXTINT_voidEnable+0x262>
	case EXTINT_FALLING_EDGE    :SET_BIT(MCUCR,1);CLR_BIT(MCUCR,0);break;
    1b2e:	a5 e5       	ldi	r26, 0x55	; 85
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e5 e5       	ldi	r30, 0x55	; 85
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	82 60       	ori	r24, 0x02	; 2
    1b3a:	8c 93       	st	X, r24
    1b3c:	a5 e5       	ldi	r26, 0x55	; 85
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e5 e5       	ldi	r30, 0x55	; 85
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8e 7f       	andi	r24, 0xFE	; 254
    1b48:	8c 93       	st	X, r24
    1b4a:	a1 c0       	rjmp	.+322    	; 0x1c8e <EXTINT_voidEnable+0x262>
	case EXTINT_LOGICAL_CHANGE  :CLR_BIT(MCUCR,1);SET_BIT(MCUCR,0);break;
    1b4c:	a5 e5       	ldi	r26, 0x55	; 85
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e5 e5       	ldi	r30, 0x55	; 85
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	8d 7f       	andi	r24, 0xFD	; 253
    1b58:	8c 93       	st	X, r24
    1b5a:	a5 e5       	ldi	r26, 0x55	; 85
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e5 e5       	ldi	r30, 0x55	; 85
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	81 60       	ori	r24, 0x01	; 1
    1b66:	8c 93       	st	X, r24
    1b68:	92 c0       	rjmp	.+292    	; 0x1c8e <EXTINT_voidEnable+0x262>
	case EXTINT_LOW_LEVEL       :SET_BIT(MCUCR,1);SET_BIT(MCUCR,0);break;
    1b6a:	a5 e5       	ldi	r26, 0x55	; 85
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e5 e5       	ldi	r30, 0x55	; 85
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	82 60       	ori	r24, 0x02	; 2
    1b76:	8c 93       	st	X, r24
    1b78:	a5 e5       	ldi	r26, 0x55	; 85
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e5 e5       	ldi	r30, 0x55	; 85
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	81 60       	ori	r24, 0x01	; 1
    1b84:	8c 93       	st	X, r24
    1b86:	83 c0       	rjmp	.+262    	; 0x1c8e <EXTINT_voidEnable+0x262>
		}
	break;

	case EXTINT_INT1:
		switch(Add_ExtInt->IntMode){
    1b88:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8c:	80 81       	ld	r24, Z
    1b8e:	86 95       	lsr	r24
    1b90:	86 95       	lsr	r24
    1b92:	83 70       	andi	r24, 0x03	; 3
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	38 87       	std	Y+8, r19	; 0x08
    1b9a:	2f 83       	std	Y+7, r18	; 0x07
    1b9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b9e:	98 85       	ldd	r25, Y+8	; 0x08
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	21 f1       	breq	.+72     	; 0x1bee <EXTINT_voidEnable+0x1c2>
    1ba6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ba8:	38 85       	ldd	r19, Y+8	; 0x08
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	2c f4       	brge	.+10     	; 0x1bba <EXTINT_voidEnable+0x18e>
    1bb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb2:	98 85       	ldd	r25, Y+8	; 0x08
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	61 f0       	breq	.+24     	; 0x1bd0 <EXTINT_voidEnable+0x1a4>
    1bb8:	6a c0       	rjmp	.+212    	; 0x1c8e <EXTINT_voidEnable+0x262>
    1bba:	2f 81       	ldd	r18, Y+7	; 0x07
    1bbc:	38 85       	ldd	r19, Y+8	; 0x08
    1bbe:	22 30       	cpi	r18, 0x02	; 2
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	21 f1       	breq	.+72     	; 0x1c0c <EXTINT_voidEnable+0x1e0>
    1bc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc6:	98 85       	ldd	r25, Y+8	; 0x08
    1bc8:	83 30       	cpi	r24, 0x03	; 3
    1bca:	91 05       	cpc	r25, r1
    1bcc:	71 f1       	breq	.+92     	; 0x1c2a <EXTINT_voidEnable+0x1fe>
    1bce:	5f c0       	rjmp	.+190    	; 0x1c8e <EXTINT_voidEnable+0x262>
	case EXTINT_RISING_EDGE     :SET_BIT(MCUCR,3);SET_BIT(MCUCR,2);break;
    1bd0:	a5 e5       	ldi	r26, 0x55	; 85
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e5 e5       	ldi	r30, 0x55	; 85
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	88 60       	ori	r24, 0x08	; 8
    1bdc:	8c 93       	st	X, r24
    1bde:	a5 e5       	ldi	r26, 0x55	; 85
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e5 e5       	ldi	r30, 0x55	; 85
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	84 60       	ori	r24, 0x04	; 4
    1bea:	8c 93       	st	X, r24
    1bec:	50 c0       	rjmp	.+160    	; 0x1c8e <EXTINT_voidEnable+0x262>
	case EXTINT_FALLING_EDGE    :SET_BIT(MCUCR,3);CLR_BIT(MCUCR,2);break;
    1bee:	a5 e5       	ldi	r26, 0x55	; 85
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e5 e5       	ldi	r30, 0x55	; 85
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	88 60       	ori	r24, 0x08	; 8
    1bfa:	8c 93       	st	X, r24
    1bfc:	a5 e5       	ldi	r26, 0x55	; 85
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e5 e5       	ldi	r30, 0x55	; 85
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	8b 7f       	andi	r24, 0xFB	; 251
    1c08:	8c 93       	st	X, r24
    1c0a:	41 c0       	rjmp	.+130    	; 0x1c8e <EXTINT_voidEnable+0x262>
	case EXTINT_LOGICAL_CHANGE  :CLR_BIT(MCUCR,3);SET_BIT(MCUCR,2);break;
    1c0c:	a5 e5       	ldi	r26, 0x55	; 85
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e5 e5       	ldi	r30, 0x55	; 85
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	87 7f       	andi	r24, 0xF7	; 247
    1c18:	8c 93       	st	X, r24
    1c1a:	a5 e5       	ldi	r26, 0x55	; 85
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e5 e5       	ldi	r30, 0x55	; 85
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	84 60       	ori	r24, 0x04	; 4
    1c26:	8c 93       	st	X, r24
    1c28:	32 c0       	rjmp	.+100    	; 0x1c8e <EXTINT_voidEnable+0x262>
	case EXTINT_LOW_LEVEL       :SET_BIT(MCUCR,3);SET_BIT(MCUCR,2);break;
    1c2a:	a5 e5       	ldi	r26, 0x55	; 85
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e5 e5       	ldi	r30, 0x55	; 85
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	88 60       	ori	r24, 0x08	; 8
    1c36:	8c 93       	st	X, r24
    1c38:	a5 e5       	ldi	r26, 0x55	; 85
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e5 e5       	ldi	r30, 0x55	; 85
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	84 60       	ori	r24, 0x04	; 4
    1c44:	8c 93       	st	X, r24
    1c46:	23 c0       	rjmp	.+70     	; 0x1c8e <EXTINT_voidEnable+0x262>
		}
	break;

	case EXTINT_INT2:
		switch(Add_ExtInt->IntMode){
    1c48:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4c:	80 81       	ld	r24, Z
    1c4e:	86 95       	lsr	r24
    1c50:	86 95       	lsr	r24
    1c52:	83 70       	andi	r24, 0x03	; 3
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	3e 83       	std	Y+6, r19	; 0x06
    1c5a:	2d 83       	std	Y+5, r18	; 0x05
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	31 f0       	breq	.+12     	; 0x1c70 <EXTINT_voidEnable+0x244>
    1c64:	2d 81       	ldd	r18, Y+5	; 0x05
    1c66:	3e 81       	ldd	r19, Y+6	; 0x06
    1c68:	21 30       	cpi	r18, 0x01	; 1
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	49 f0       	breq	.+18     	; 0x1c80 <EXTINT_voidEnable+0x254>
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <EXTINT_voidEnable+0x262>
	case EXTINT_RISING_EDGE     :SET_BIT(MCUCSR,6);break;
    1c70:	a4 e5       	ldi	r26, 0x54	; 84
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e4 e5       	ldi	r30, 0x54	; 84
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 64       	ori	r24, 0x40	; 64
    1c7c:	8c 93       	st	X, r24
    1c7e:	07 c0       	rjmp	.+14     	; 0x1c8e <EXTINT_voidEnable+0x262>
	case EXTINT_FALLING_EDGE    :CLR_BIT(MCUCSR,6);break;
    1c80:	a4 e5       	ldi	r26, 0x54	; 84
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e4 e5       	ldi	r30, 0x54	; 84
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8f 7b       	andi	r24, 0xBF	; 191
    1c8c:	8c 93       	st	X, r24
	break;
	}

	//////////////////// PIE ON \\\\\\\\\\\\\\\\\\\\\\\\\\\

	switch(Add_ExtInt->IntNo){
    1c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c90:	fa 81       	ldd	r31, Y+2	; 0x02
    1c92:	80 81       	ld	r24, Z
    1c94:	83 70       	andi	r24, 0x03	; 3
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	3c 83       	std	Y+4, r19	; 0x04
    1c9c:	2b 83       	std	Y+3, r18	; 0x03
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	89 f0       	breq	.+34     	; 0x1cca <EXTINT_voidEnable+0x29e>
    1ca8:	2b 81       	ldd	r18, Y+3	; 0x03
    1caa:	3c 81       	ldd	r19, Y+4	; 0x04
    1cac:	22 30       	cpi	r18, 0x02	; 2
    1cae:	31 05       	cpc	r19, r1
    1cb0:	a1 f0       	breq	.+40     	; 0x1cda <EXTINT_voidEnable+0x2ae>
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	b9 f4       	brne	.+46     	; 0x1ce8 <EXTINT_voidEnable+0x2bc>
		case EXTINT_INT0: SET_BIT(GICR,6);break;
    1cba:	ab e5       	ldi	r26, 0x5B	; 91
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	eb e5       	ldi	r30, 0x5B	; 91
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	80 64       	ori	r24, 0x40	; 64
    1cc6:	8c 93       	st	X, r24
    1cc8:	0f c0       	rjmp	.+30     	; 0x1ce8 <EXTINT_voidEnable+0x2bc>
		case EXTINT_INT1: SET_BIT(GICR,7);break;
    1cca:	ab e5       	ldi	r26, 0x5B	; 91
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	eb e5       	ldi	r30, 0x5B	; 91
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	80 68       	ori	r24, 0x80	; 128
    1cd6:	8c 93       	st	X, r24
    1cd8:	07 c0       	rjmp	.+14     	; 0x1ce8 <EXTINT_voidEnable+0x2bc>
		case EXTINT_INT2: SET_BIT(GICR,5);break;
    1cda:	ab e5       	ldi	r26, 0x5B	; 91
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	eb e5       	ldi	r30, 0x5B	; 91
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	80 62       	ori	r24, 0x20	; 32
    1ce6:	8c 93       	st	X, r24
		}

	//

}
    1ce8:	2e 96       	adiw	r28, 0x0e	; 14
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <EXTINT_voidDisable>:
void EXTINT_voidDisable(EXTINT_structCfg*Add_ExtInt){
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <EXTINT_voidDisable+0x6>
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <EXTINT_voidDisable+0x8>
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01

	//////////////////// PIE OFF \\\\\\\\\\\\\\\\\\\\\\\\\\\

	switch(Add_ExtInt->IntNo){
    1d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0e:	80 81       	ld	r24, Z
    1d10:	83 70       	andi	r24, 0x03	; 3
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	3c 83       	std	Y+4, r19	; 0x04
    1d18:	2b 83       	std	Y+3, r18	; 0x03
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	91 05       	cpc	r25, r1
    1d22:	89 f0       	breq	.+34     	; 0x1d46 <EXTINT_voidDisable+0x4c>
    1d24:	2b 81       	ldd	r18, Y+3	; 0x03
    1d26:	3c 81       	ldd	r19, Y+4	; 0x04
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	a1 f0       	breq	.+40     	; 0x1d56 <EXTINT_voidDisable+0x5c>
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	b9 f4       	brne	.+46     	; 0x1d64 <EXTINT_voidDisable+0x6a>
		case EXTINT_INT0: CLR_BIT(GICR,6);break;
    1d36:	ab e5       	ldi	r26, 0x5B	; 91
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	eb e5       	ldi	r30, 0x5B	; 91
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	8f 7b       	andi	r24, 0xBF	; 191
    1d42:	8c 93       	st	X, r24
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <EXTINT_voidDisable+0x6a>
		case EXTINT_INT1: CLR_BIT(GICR,7);break;
    1d46:	ab e5       	ldi	r26, 0x5B	; 91
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	eb e5       	ldi	r30, 0x5B	; 91
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	8f 77       	andi	r24, 0x7F	; 127
    1d52:	8c 93       	st	X, r24
    1d54:	07 c0       	rjmp	.+14     	; 0x1d64 <EXTINT_voidDisable+0x6a>
		case EXTINT_INT2: CLR_BIT(GICR,5);break;
    1d56:	ab e5       	ldi	r26, 0x5B	; 91
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	eb e5       	ldi	r30, 0x5B	; 91
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8f 7d       	andi	r24, 0xDF	; 223
    1d62:	8c 93       	st	X, r24
		}

}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <DIO_enuSetPinValue>:
#include "../../../INCLUDE/MCAL/DIO/DIO_priv.h"
#include "../../../INCLUDE/MCAL/DIO/DIO.h"
#include "../../../SERVICES/bit_utilies.h"

// PORT REGISTER (OUTPUT)
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinVal){
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	28 97       	sbiw	r28, 0x08	; 8
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	8a 83       	std	Y+2, r24	; 0x02
    1d88:	6b 83       	std	Y+3, r22	; 0x03
    1d8a:	4c 83       	std	Y+4, r20	; 0x04
	//Error flag
	DIO_tenuErrorStatus LOC_enuErrorStatus = Dio_enuOK;
    1d8c:	19 82       	std	Y+1, r1	; 0x01

	// Check if inputs are valid
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<=DIO_u8_PIN7))
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	84 30       	cpi	r24, 0x04	; 4
    1d92:	08 f0       	brcs	.+2      	; 0x1d96 <DIO_enuSetPinValue+0x24>
    1d94:	ef c0       	rjmp	.+478    	; 0x1f74 <DIO_enuSetPinValue+0x202>
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	88 30       	cpi	r24, 0x08	; 8
    1d9a:	08 f0       	brcs	.+2      	; 0x1d9e <DIO_enuSetPinValue+0x2c>
    1d9c:	eb c0       	rjmp	.+470    	; 0x1f74 <DIO_enuSetPinValue+0x202>
	{
		if(Copy_u8PinVal==DIO_u8_HIGH){
    1d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <DIO_enuSetPinValue+0x34>
    1da4:	6f c0       	rjmp	.+222    	; 0x1e84 <DIO_enuSetPinValue+0x112>
			switch(Copy_u8PortId){
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	38 87       	std	Y+8, r19	; 0x08
    1dae:	2f 83       	std	Y+7, r18	; 0x07
    1db0:	8f 81       	ldd	r24, Y+7	; 0x07
    1db2:	98 85       	ldd	r25, Y+8	; 0x08
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	91 05       	cpc	r25, r1
    1db8:	49 f1       	breq	.+82     	; 0x1e0c <DIO_enuSetPinValue+0x9a>
    1dba:	2f 81       	ldd	r18, Y+7	; 0x07
    1dbc:	38 85       	ldd	r19, Y+8	; 0x08
    1dbe:	22 30       	cpi	r18, 0x02	; 2
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <DIO_enuSetPinValue+0x5c>
    1dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc6:	98 85       	ldd	r25, Y+8	; 0x08
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	61 f0       	breq	.+24     	; 0x1de4 <DIO_enuSetPinValue+0x72>
    1dcc:	d5 c0       	rjmp	.+426    	; 0x1f78 <DIO_enuSetPinValue+0x206>
    1dce:	2f 81       	ldd	r18, Y+7	; 0x07
    1dd0:	38 85       	ldd	r19, Y+8	; 0x08
    1dd2:	22 30       	cpi	r18, 0x02	; 2
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	71 f1       	breq	.+92     	; 0x1e34 <DIO_enuSetPinValue+0xc2>
    1dd8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dda:	98 85       	ldd	r25, Y+8	; 0x08
    1ddc:	83 30       	cpi	r24, 0x03	; 3
    1dde:	91 05       	cpc	r25, r1
    1de0:	e9 f1       	breq	.+122    	; 0x1e5c <DIO_enuSetPinValue+0xea>
    1de2:	ca c0       	rjmp	.+404    	; 0x1f78 <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTA: SET_BIT(PORTA_Register,Copy_u8PinId);break;
    1de4:	ab e3       	ldi	r26, 0x3B	; 59
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	eb e3       	ldi	r30, 0x3B	; 59
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 2e       	mov	r0, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <DIO_enuSetPinValue+0x90>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	0a 94       	dec	r0
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <DIO_enuSetPinValue+0x8c>
    1e06:	84 2b       	or	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	b6 c0       	rjmp	.+364    	; 0x1f78 <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTB: SET_BIT(PORTB_Register,Copy_u8PinId);break;
    1e0c:	a8 e3       	ldi	r26, 0x38	; 56
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e8 e3       	ldi	r30, 0x38	; 56
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	48 2f       	mov	r20, r24
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 2e       	mov	r0, r18
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <DIO_enuSetPinValue+0xb8>
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <DIO_enuSetPinValue+0xb4>
    1e2e:	84 2b       	or	r24, r20
    1e30:	8c 93       	st	X, r24
    1e32:	a2 c0       	rjmp	.+324    	; 0x1f78 <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTC: SET_BIT(PORTC_Register,Copy_u8PinId);break;
    1e34:	a5 e3       	ldi	r26, 0x35	; 53
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e5 e3       	ldi	r30, 0x35	; 53
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	48 2f       	mov	r20, r24
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	02 2e       	mov	r0, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <DIO_enuSetPinValue+0xe0>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	0a 94       	dec	r0
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <DIO_enuSetPinValue+0xdc>
    1e56:	84 2b       	or	r24, r20
    1e58:	8c 93       	st	X, r24
    1e5a:	8e c0       	rjmp	.+284    	; 0x1f78 <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTD: SET_BIT(PORTD_Register,Copy_u8PinId);break;
    1e5c:	a2 e3       	ldi	r26, 0x32	; 50
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e2 e3       	ldi	r30, 0x32	; 50
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	48 2f       	mov	r20, r24
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <DIO_enuSetPinValue+0x108>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <DIO_enuSetPinValue+0x104>
    1e7e:	84 2b       	or	r24, r20
    1e80:	8c 93       	st	X, r24
    1e82:	7a c0       	rjmp	.+244    	; 0x1f78 <DIO_enuSetPinValue+0x206>
			default:/* Wrong ID */ break;
			}
		}

		else if(Copy_u8PinVal==DIO_u8_LOW){
    1e84:	8c 81       	ldd	r24, Y+4	; 0x04
    1e86:	88 23       	and	r24, r24
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <DIO_enuSetPinValue+0x11a>
    1e8a:	76 c0       	rjmp	.+236    	; 0x1f78 <DIO_enuSetPinValue+0x206>
			switch(Copy_u8PortId){
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	3e 83       	std	Y+6, r19	; 0x06
    1e94:	2d 83       	std	Y+5, r18	; 0x05
    1e96:	8d 81       	ldd	r24, Y+5	; 0x05
    1e98:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	59 f1       	breq	.+86     	; 0x1ef6 <DIO_enuSetPinValue+0x184>
    1ea0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ea2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ea4:	22 30       	cpi	r18, 0x02	; 2
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <DIO_enuSetPinValue+0x142>
    1eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1eac:	9e 81       	ldd	r25, Y+6	; 0x06
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	69 f0       	breq	.+26     	; 0x1ecc <DIO_enuSetPinValue+0x15a>
    1eb2:	62 c0       	rjmp	.+196    	; 0x1f78 <DIO_enuSetPinValue+0x206>
    1eb4:	2d 81       	ldd	r18, Y+5	; 0x05
    1eb6:	3e 81       	ldd	r19, Y+6	; 0x06
    1eb8:	22 30       	cpi	r18, 0x02	; 2
    1eba:	31 05       	cpc	r19, r1
    1ebc:	89 f1       	breq	.+98     	; 0x1f20 <DIO_enuSetPinValue+0x1ae>
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	83 30       	cpi	r24, 0x03	; 3
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <DIO_enuSetPinValue+0x158>
    1ec8:	40 c0       	rjmp	.+128    	; 0x1f4a <DIO_enuSetPinValue+0x1d8>
    1eca:	56 c0       	rjmp	.+172    	; 0x1f78 <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTA: CLR_BIT(PORTA_Register,Copy_u8PinId);break;
    1ecc:	ab e3       	ldi	r26, 0x3B	; 59
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	eb e3       	ldi	r30, 0x3B	; 59
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	48 2f       	mov	r20, r24
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 2e       	mov	r0, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <DIO_enuSetPinValue+0x178>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	0a 94       	dec	r0
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <DIO_enuSetPinValue+0x174>
    1eee:	80 95       	com	r24
    1ef0:	84 23       	and	r24, r20
    1ef2:	8c 93       	st	X, r24
    1ef4:	41 c0       	rjmp	.+130    	; 0x1f78 <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTB: CLR_BIT(PORTB_Register,Copy_u8PinId);break;
    1ef6:	a8 e3       	ldi	r26, 0x38	; 56
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e8 e3       	ldi	r30, 0x38	; 56
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	48 2f       	mov	r20, r24
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	02 2e       	mov	r0, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <DIO_enuSetPinValue+0x1a2>
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	0a 94       	dec	r0
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <DIO_enuSetPinValue+0x19e>
    1f18:	80 95       	com	r24
    1f1a:	84 23       	and	r24, r20
    1f1c:	8c 93       	st	X, r24
    1f1e:	2c c0       	rjmp	.+88     	; 0x1f78 <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTC: CLR_BIT(PORTC_Register,Copy_u8PinId);break;
    1f20:	a5 e3       	ldi	r26, 0x35	; 53
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e5 e3       	ldi	r30, 0x35	; 53
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	48 2f       	mov	r20, r24
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	02 2e       	mov	r0, r18
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <DIO_enuSetPinValue+0x1cc>
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	0a 94       	dec	r0
    1f40:	e2 f7       	brpl	.-8      	; 0x1f3a <DIO_enuSetPinValue+0x1c8>
    1f42:	80 95       	com	r24
    1f44:	84 23       	and	r24, r20
    1f46:	8c 93       	st	X, r24
    1f48:	17 c0       	rjmp	.+46     	; 0x1f78 <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTD: CLR_BIT(PORTD_Register,Copy_u8PinId);break;
    1f4a:	a2 e3       	ldi	r26, 0x32	; 50
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e2 e3       	ldi	r30, 0x32	; 50
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	48 2f       	mov	r20, r24
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	02 2e       	mov	r0, r18
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <DIO_enuSetPinValue+0x1f6>
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	0a 94       	dec	r0
    1f6a:	e2 f7       	brpl	.-8      	; 0x1f64 <DIO_enuSetPinValue+0x1f2>
    1f6c:	80 95       	com	r24
    1f6e:	84 23       	and	r24, r20
    1f70:	8c 93       	st	X, r24
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <DIO_enuSetPinValue+0x206>
			}
		}
	}
	//if there
	else {
		LOC_enuErrorStatus = Dio_enuInvalidInput;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	89 83       	std	Y+1, r24	; 0x01
	}
return LOC_enuErrorStatus;
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f7a:	28 96       	adiw	r28, 0x08	; 8
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <DIO_enuSetPinDirection>:
//**************************************************************************************************
// DDR function (Direction)
DIO_tenuErrorStatus DIO_enuSetPinDirection(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinDir){
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	28 97       	sbiw	r28, 0x08	; 8
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	8a 83       	std	Y+2, r24	; 0x02
    1fa2:	6b 83       	std	Y+3, r22	; 0x03
    1fa4:	4c 83       	std	Y+4, r20	; 0x04
	//Error flag
	DIO_tenuErrorStatus LOC_enuErrorStatus = Dio_enuOK;
    1fa6:	19 82       	std	Y+1, r1	; 0x01

	// Check if inputs are in valid range
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<=DIO_u8_PIN7))
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	84 30       	cpi	r24, 0x04	; 4
    1fac:	08 f0       	brcs	.+2      	; 0x1fb0 <DIO_enuSetPinDirection+0x24>
    1fae:	ef c0       	rjmp	.+478    	; 0x218e <DIO_enuSetPinDirection+0x202>
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	88 30       	cpi	r24, 0x08	; 8
    1fb4:	08 f0       	brcs	.+2      	; 0x1fb8 <DIO_enuSetPinDirection+0x2c>
    1fb6:	eb c0       	rjmp	.+470    	; 0x218e <DIO_enuSetPinDirection+0x202>
	{
		if(Copy_u8PinDir==DIO_u8_OUTPUT){
    1fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fba:	81 30       	cpi	r24, 0x01	; 1
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <DIO_enuSetPinDirection+0x34>
    1fbe:	6f c0       	rjmp	.+222    	; 0x209e <DIO_enuSetPinDirection+0x112>
			switch(Copy_u8PortId){
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	38 87       	std	Y+8, r19	; 0x08
    1fc8:	2f 83       	std	Y+7, r18	; 0x07
    1fca:	8f 81       	ldd	r24, Y+7	; 0x07
    1fcc:	98 85       	ldd	r25, Y+8	; 0x08
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	49 f1       	breq	.+82     	; 0x2026 <DIO_enuSetPinDirection+0x9a>
    1fd4:	2f 81       	ldd	r18, Y+7	; 0x07
    1fd6:	38 85       	ldd	r19, Y+8	; 0x08
    1fd8:	22 30       	cpi	r18, 0x02	; 2
    1fda:	31 05       	cpc	r19, r1
    1fdc:	2c f4       	brge	.+10     	; 0x1fe8 <DIO_enuSetPinDirection+0x5c>
    1fde:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe0:	98 85       	ldd	r25, Y+8	; 0x08
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	61 f0       	breq	.+24     	; 0x1ffe <DIO_enuSetPinDirection+0x72>
    1fe6:	d5 c0       	rjmp	.+426    	; 0x2192 <DIO_enuSetPinDirection+0x206>
    1fe8:	2f 81       	ldd	r18, Y+7	; 0x07
    1fea:	38 85       	ldd	r19, Y+8	; 0x08
    1fec:	22 30       	cpi	r18, 0x02	; 2
    1fee:	31 05       	cpc	r19, r1
    1ff0:	71 f1       	breq	.+92     	; 0x204e <DIO_enuSetPinDirection+0xc2>
    1ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff4:	98 85       	ldd	r25, Y+8	; 0x08
    1ff6:	83 30       	cpi	r24, 0x03	; 3
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	e9 f1       	breq	.+122    	; 0x2076 <DIO_enuSetPinDirection+0xea>
    1ffc:	ca c0       	rjmp	.+404    	; 0x2192 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTA: SET_BIT(DDRA_Register,Copy_u8PinId);break;
    1ffe:	aa e3       	ldi	r26, 0x3A	; 58
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	ea e3       	ldi	r30, 0x3A	; 58
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	48 2f       	mov	r20, r24
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	02 2e       	mov	r0, r18
    2016:	02 c0       	rjmp	.+4      	; 0x201c <DIO_enuSetPinDirection+0x90>
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	0a 94       	dec	r0
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <DIO_enuSetPinDirection+0x8c>
    2020:	84 2b       	or	r24, r20
    2022:	8c 93       	st	X, r24
    2024:	b6 c0       	rjmp	.+364    	; 0x2192 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTB: SET_BIT(DDRB_Register,Copy_u8PinId);break;
    2026:	a7 e3       	ldi	r26, 0x37	; 55
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e7 e3       	ldi	r30, 0x37	; 55
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	48 2f       	mov	r20, r24
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	02 2e       	mov	r0, r18
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <DIO_enuSetPinDirection+0xb8>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	0a 94       	dec	r0
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <DIO_enuSetPinDirection+0xb4>
    2048:	84 2b       	or	r24, r20
    204a:	8c 93       	st	X, r24
    204c:	a2 c0       	rjmp	.+324    	; 0x2192 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTC: SET_BIT(DDRC_Register,Copy_u8PinId);break;
    204e:	a4 e3       	ldi	r26, 0x34	; 52
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e4 e3       	ldi	r30, 0x34	; 52
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	48 2f       	mov	r20, r24
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	02 2e       	mov	r0, r18
    2066:	02 c0       	rjmp	.+4      	; 0x206c <DIO_enuSetPinDirection+0xe0>
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	0a 94       	dec	r0
    206e:	e2 f7       	brpl	.-8      	; 0x2068 <DIO_enuSetPinDirection+0xdc>
    2070:	84 2b       	or	r24, r20
    2072:	8c 93       	st	X, r24
    2074:	8e c0       	rjmp	.+284    	; 0x2192 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTD: SET_BIT(DDRD_Register,Copy_u8PinId);break;
    2076:	a1 e3       	ldi	r26, 0x31	; 49
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e1 e3       	ldi	r30, 0x31	; 49
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	48 2f       	mov	r20, r24
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	02 2e       	mov	r0, r18
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <DIO_enuSetPinDirection+0x108>
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	0a 94       	dec	r0
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <DIO_enuSetPinDirection+0x104>
    2098:	84 2b       	or	r24, r20
    209a:	8c 93       	st	X, r24
    209c:	7a c0       	rjmp	.+244    	; 0x2192 <DIO_enuSetPinDirection+0x206>
			default:/* Wrong ID */ break;
			}
		}

		else if(Copy_u8PinDir==DIO_u8_INPUT){
    209e:	8c 81       	ldd	r24, Y+4	; 0x04
    20a0:	88 23       	and	r24, r24
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <DIO_enuSetPinDirection+0x11a>
    20a4:	76 c0       	rjmp	.+236    	; 0x2192 <DIO_enuSetPinDirection+0x206>
			switch(Copy_u8PortId){
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	3e 83       	std	Y+6, r19	; 0x06
    20ae:	2d 83       	std	Y+5, r18	; 0x05
    20b0:	8d 81       	ldd	r24, Y+5	; 0x05
    20b2:	9e 81       	ldd	r25, Y+6	; 0x06
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	91 05       	cpc	r25, r1
    20b8:	59 f1       	breq	.+86     	; 0x2110 <DIO_enuSetPinDirection+0x184>
    20ba:	2d 81       	ldd	r18, Y+5	; 0x05
    20bc:	3e 81       	ldd	r19, Y+6	; 0x06
    20be:	22 30       	cpi	r18, 0x02	; 2
    20c0:	31 05       	cpc	r19, r1
    20c2:	2c f4       	brge	.+10     	; 0x20ce <DIO_enuSetPinDirection+0x142>
    20c4:	8d 81       	ldd	r24, Y+5	; 0x05
    20c6:	9e 81       	ldd	r25, Y+6	; 0x06
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	69 f0       	breq	.+26     	; 0x20e6 <DIO_enuSetPinDirection+0x15a>
    20cc:	62 c0       	rjmp	.+196    	; 0x2192 <DIO_enuSetPinDirection+0x206>
    20ce:	2d 81       	ldd	r18, Y+5	; 0x05
    20d0:	3e 81       	ldd	r19, Y+6	; 0x06
    20d2:	22 30       	cpi	r18, 0x02	; 2
    20d4:	31 05       	cpc	r19, r1
    20d6:	89 f1       	breq	.+98     	; 0x213a <DIO_enuSetPinDirection+0x1ae>
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	83 30       	cpi	r24, 0x03	; 3
    20de:	91 05       	cpc	r25, r1
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <DIO_enuSetPinDirection+0x158>
    20e2:	40 c0       	rjmp	.+128    	; 0x2164 <DIO_enuSetPinDirection+0x1d8>
    20e4:	56 c0       	rjmp	.+172    	; 0x2192 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTA: CLR_BIT(DDRA_Register,Copy_u8PinId);break;
    20e6:	aa e3       	ldi	r26, 0x3A	; 58
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	ea e3       	ldi	r30, 0x3A	; 58
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	48 2f       	mov	r20, r24
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	02 2e       	mov	r0, r18
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <DIO_enuSetPinDirection+0x178>
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	0a 94       	dec	r0
    2106:	e2 f7       	brpl	.-8      	; 0x2100 <DIO_enuSetPinDirection+0x174>
    2108:	80 95       	com	r24
    210a:	84 23       	and	r24, r20
    210c:	8c 93       	st	X, r24
    210e:	41 c0       	rjmp	.+130    	; 0x2192 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTB: CLR_BIT(DDRB_Register,Copy_u8PinId);break;
    2110:	a7 e3       	ldi	r26, 0x37	; 55
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e7 e3       	ldi	r30, 0x37	; 55
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	48 2f       	mov	r20, r24
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	02 2e       	mov	r0, r18
    2128:	02 c0       	rjmp	.+4      	; 0x212e <DIO_enuSetPinDirection+0x1a2>
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	0a 94       	dec	r0
    2130:	e2 f7       	brpl	.-8      	; 0x212a <DIO_enuSetPinDirection+0x19e>
    2132:	80 95       	com	r24
    2134:	84 23       	and	r24, r20
    2136:	8c 93       	st	X, r24
    2138:	2c c0       	rjmp	.+88     	; 0x2192 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTC: CLR_BIT(DDRC_Register,Copy_u8PinId);break;
    213a:	a4 e3       	ldi	r26, 0x34	; 52
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e4 e3       	ldi	r30, 0x34	; 52
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	48 2f       	mov	r20, r24
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	02 2e       	mov	r0, r18
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <DIO_enuSetPinDirection+0x1cc>
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	0a 94       	dec	r0
    215a:	e2 f7       	brpl	.-8      	; 0x2154 <DIO_enuSetPinDirection+0x1c8>
    215c:	80 95       	com	r24
    215e:	84 23       	and	r24, r20
    2160:	8c 93       	st	X, r24
    2162:	17 c0       	rjmp	.+46     	; 0x2192 <DIO_enuSetPinDirection+0x206>
			case DIO_u8_PORTD: CLR_BIT(DDRD_Register,Copy_u8PinId);break;
    2164:	a1 e3       	ldi	r26, 0x31	; 49
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e1 e3       	ldi	r30, 0x31	; 49
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	48 2f       	mov	r20, r24
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	02 2e       	mov	r0, r18
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <DIO_enuSetPinDirection+0x1f6>
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	0a 94       	dec	r0
    2184:	e2 f7       	brpl	.-8      	; 0x217e <DIO_enuSetPinDirection+0x1f2>
    2186:	80 95       	com	r24
    2188:	84 23       	and	r24, r20
    218a:	8c 93       	st	X, r24
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <DIO_enuSetPinDirection+0x206>
			}
		}
	}
	//if there
	else {
		LOC_enuErrorStatus = Dio_enuInvalidInput;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	89 83       	std	Y+1, r24	; 0x01
	}
return LOC_enuErrorStatus;
    2192:	89 81       	ldd	r24, Y+1	; 0x01
}
    2194:	28 96       	adiw	r28, 0x08	; 8
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <DIO_u8GetPinValue>:

//**************************************************************************
// Func for PIN REGISTER (INPUT)
DIO_tenuErrorStatus DIO_u8GetPinValue (u8 Copy_u8PortId,u8 Copy_u8PinId, u8*Add_u8Result){
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	27 97       	sbiw	r28, 0x07	; 7
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	8a 83       	std	Y+2, r24	; 0x02
    21bc:	6b 83       	std	Y+3, r22	; 0x03
    21be:	5d 83       	std	Y+5, r21	; 0x05
    21c0:	4c 83       	std	Y+4, r20	; 0x04
	// Define a LOC variable which store the value
	DIO_tenuErrorStatus LOC_enuErrorStatus = Dio_enuOK;
    21c2:	19 82       	std	Y+1, r1	; 0x01
	// Valid Range
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<=DIO_u8_PIN7))
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	84 30       	cpi	r24, 0x04	; 4
    21c8:	08 f0       	brcs	.+2      	; 0x21cc <DIO_u8GetPinValue+0x26>
    21ca:	75 c0       	rjmp	.+234    	; 0x22b6 <DIO_u8GetPinValue+0x110>
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	88 30       	cpi	r24, 0x08	; 8
    21d0:	08 f0       	brcs	.+2      	; 0x21d4 <DIO_u8GetPinValue+0x2e>
    21d2:	71 c0       	rjmp	.+226    	; 0x22b6 <DIO_u8GetPinValue+0x110>
	{
		switch(Copy_u8PortId){
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	3f 83       	std	Y+7, r19	; 0x07
    21dc:	2e 83       	std	Y+6, r18	; 0x06
    21de:	4e 81       	ldd	r20, Y+6	; 0x06
    21e0:	5f 81       	ldd	r21, Y+7	; 0x07
    21e2:	41 30       	cpi	r20, 0x01	; 1
    21e4:	51 05       	cpc	r21, r1
    21e6:	59 f1       	breq	.+86     	; 0x223e <DIO_u8GetPinValue+0x98>
    21e8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ea:	9f 81       	ldd	r25, Y+7	; 0x07
    21ec:	82 30       	cpi	r24, 0x02	; 2
    21ee:	91 05       	cpc	r25, r1
    21f0:	34 f4       	brge	.+12     	; 0x21fe <DIO_u8GetPinValue+0x58>
    21f2:	2e 81       	ldd	r18, Y+6	; 0x06
    21f4:	3f 81       	ldd	r19, Y+7	; 0x07
    21f6:	21 15       	cp	r18, r1
    21f8:	31 05       	cpc	r19, r1
    21fa:	69 f0       	breq	.+26     	; 0x2216 <DIO_u8GetPinValue+0x70>
    21fc:	5e c0       	rjmp	.+188    	; 0x22ba <DIO_u8GetPinValue+0x114>
    21fe:	4e 81       	ldd	r20, Y+6	; 0x06
    2200:	5f 81       	ldd	r21, Y+7	; 0x07
    2202:	42 30       	cpi	r20, 0x02	; 2
    2204:	51 05       	cpc	r21, r1
    2206:	79 f1       	breq	.+94     	; 0x2266 <DIO_u8GetPinValue+0xc0>
    2208:	8e 81       	ldd	r24, Y+6	; 0x06
    220a:	9f 81       	ldd	r25, Y+7	; 0x07
    220c:	83 30       	cpi	r24, 0x03	; 3
    220e:	91 05       	cpc	r25, r1
    2210:	09 f4       	brne	.+2      	; 0x2214 <DIO_u8GetPinValue+0x6e>
    2212:	3d c0       	rjmp	.+122    	; 0x228e <DIO_u8GetPinValue+0xe8>
    2214:	52 c0       	rjmp	.+164    	; 0x22ba <DIO_u8GetPinValue+0x114>
		case DIO_u8_PORTA: *Add_u8Result=GET_BIT(PINA_Register,Copy_u8PinId);break;
    2216:	e9 e3       	ldi	r30, 0x39	; 57
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	88 2f       	mov	r24, r24
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	a9 01       	movw	r20, r18
    2228:	02 c0       	rjmp	.+4      	; 0x222e <DIO_u8GetPinValue+0x88>
    222a:	55 95       	asr	r21
    222c:	47 95       	ror	r20
    222e:	8a 95       	dec	r24
    2230:	e2 f7       	brpl	.-8      	; 0x222a <DIO_u8GetPinValue+0x84>
    2232:	ca 01       	movw	r24, r20
    2234:	81 70       	andi	r24, 0x01	; 1
    2236:	ec 81       	ldd	r30, Y+4	; 0x04
    2238:	fd 81       	ldd	r31, Y+5	; 0x05
    223a:	80 83       	st	Z, r24
    223c:	3e c0       	rjmp	.+124    	; 0x22ba <DIO_u8GetPinValue+0x114>
		case DIO_u8_PORTB: *Add_u8Result=GET_BIT(PINB_Register,Copy_u8PinId);break;
    223e:	e6 e3       	ldi	r30, 0x36	; 54
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	88 2f       	mov	r24, r24
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	a9 01       	movw	r20, r18
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <DIO_u8GetPinValue+0xb0>
    2252:	55 95       	asr	r21
    2254:	47 95       	ror	r20
    2256:	8a 95       	dec	r24
    2258:	e2 f7       	brpl	.-8      	; 0x2252 <DIO_u8GetPinValue+0xac>
    225a:	ca 01       	movw	r24, r20
    225c:	81 70       	andi	r24, 0x01	; 1
    225e:	ec 81       	ldd	r30, Y+4	; 0x04
    2260:	fd 81       	ldd	r31, Y+5	; 0x05
    2262:	80 83       	st	Z, r24
    2264:	2a c0       	rjmp	.+84     	; 0x22ba <DIO_u8GetPinValue+0x114>
		case DIO_u8_PORTC: *Add_u8Result=GET_BIT(PINC_Register,Copy_u8PinId);break;
    2266:	e3 e3       	ldi	r30, 0x33	; 51
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	88 2f       	mov	r24, r24
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a9 01       	movw	r20, r18
    2278:	02 c0       	rjmp	.+4      	; 0x227e <DIO_u8GetPinValue+0xd8>
    227a:	55 95       	asr	r21
    227c:	47 95       	ror	r20
    227e:	8a 95       	dec	r24
    2280:	e2 f7       	brpl	.-8      	; 0x227a <DIO_u8GetPinValue+0xd4>
    2282:	ca 01       	movw	r24, r20
    2284:	81 70       	andi	r24, 0x01	; 1
    2286:	ec 81       	ldd	r30, Y+4	; 0x04
    2288:	fd 81       	ldd	r31, Y+5	; 0x05
    228a:	80 83       	st	Z, r24
    228c:	16 c0       	rjmp	.+44     	; 0x22ba <DIO_u8GetPinValue+0x114>
		case DIO_u8_PORTD: *Add_u8Result=GET_BIT(PIND_Register,Copy_u8PinId);break;
    228e:	e0 e3       	ldi	r30, 0x30	; 48
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	a9 01       	movw	r20, r18
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <DIO_u8GetPinValue+0x100>
    22a2:	55 95       	asr	r21
    22a4:	47 95       	ror	r20
    22a6:	8a 95       	dec	r24
    22a8:	e2 f7       	brpl	.-8      	; 0x22a2 <DIO_u8GetPinValue+0xfc>
    22aa:	ca 01       	movw	r24, r20
    22ac:	81 70       	andi	r24, 0x01	; 1
    22ae:	ec 81       	ldd	r30, Y+4	; 0x04
    22b0:	fd 81       	ldd	r31, Y+5	; 0x05
    22b2:	80 83       	st	Z, r24
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <DIO_u8GetPinValue+0x114>
		default:/* Wrong ID */ break;
		}
	}
	else
		LOC_enuErrorStatus = Dio_enuInvalidInput;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	89 83       	std	Y+1, r24	; 0x01
return LOC_enuErrorStatus;
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    22bc:	27 96       	adiw	r28, 0x07	; 7
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <DIO_enuSetPortDirection>:

//*************************************************************************************
// Determine the whole direction of a port
DIO_tenuErrorStatus DIO_enuSetPortDirection(u8 Copy_u8PortId , u8 Copy_u8PortDir){
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <DIO_enuSetPortDirection+0x6>
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <DIO_enuSetPortDirection+0x8>
    22d6:	0f 92       	push	r0
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	8a 83       	std	Y+2, r24	; 0x02
    22de:	6b 83       	std	Y+3, r22	; 0x03

	    //Error flag
		DIO_tenuErrorStatus LOC_enuErrorStatus = Dio_enuOK;
    22e0:	19 82       	std	Y+1, r1	; 0x01

		// Check if inputs are in valid range
		if(Copy_u8PortId <= DIO_u8_PORTD)
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	84 30       	cpi	r24, 0x04	; 4
    22e6:	98 f5       	brcc	.+102    	; 0x234e <DIO_enuSetPortDirection+0x80>
		{
				switch(Copy_u8PortId)
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	3d 83       	std	Y+5, r19	; 0x05
    22f0:	2c 83       	std	Y+4, r18	; 0x04
    22f2:	8c 81       	ldd	r24, Y+4	; 0x04
    22f4:	9d 81       	ldd	r25, Y+5	; 0x05
    22f6:	81 30       	cpi	r24, 0x01	; 1
    22f8:	91 05       	cpc	r25, r1
    22fa:	d1 f0       	breq	.+52     	; 0x2330 <DIO_enuSetPortDirection+0x62>
    22fc:	2c 81       	ldd	r18, Y+4	; 0x04
    22fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2300:	22 30       	cpi	r18, 0x02	; 2
    2302:	31 05       	cpc	r19, r1
    2304:	2c f4       	brge	.+10     	; 0x2310 <DIO_enuSetPortDirection+0x42>
    2306:	8c 81       	ldd	r24, Y+4	; 0x04
    2308:	9d 81       	ldd	r25, Y+5	; 0x05
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	61 f0       	breq	.+24     	; 0x2326 <DIO_enuSetPortDirection+0x58>
    230e:	21 c0       	rjmp	.+66     	; 0x2352 <DIO_enuSetPortDirection+0x84>
    2310:	2c 81       	ldd	r18, Y+4	; 0x04
    2312:	3d 81       	ldd	r19, Y+5	; 0x05
    2314:	22 30       	cpi	r18, 0x02	; 2
    2316:	31 05       	cpc	r19, r1
    2318:	81 f0       	breq	.+32     	; 0x233a <DIO_enuSetPortDirection+0x6c>
    231a:	8c 81       	ldd	r24, Y+4	; 0x04
    231c:	9d 81       	ldd	r25, Y+5	; 0x05
    231e:	83 30       	cpi	r24, 0x03	; 3
    2320:	91 05       	cpc	r25, r1
    2322:	81 f0       	breq	.+32     	; 0x2344 <DIO_enuSetPortDirection+0x76>
    2324:	16 c0       	rjmp	.+44     	; 0x2352 <DIO_enuSetPortDirection+0x84>
				{
				case DIO_u8_PORTA: DDRA_Register=Copy_u8PortDir;break;
    2326:	ea e3       	ldi	r30, 0x3A	; 58
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	80 83       	st	Z, r24
    232e:	11 c0       	rjmp	.+34     	; 0x2352 <DIO_enuSetPortDirection+0x84>
				case DIO_u8_PORTB: DDRB_Register=Copy_u8PortDir;break;
    2330:	e7 e3       	ldi	r30, 0x37	; 55
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	80 83       	st	Z, r24
    2338:	0c c0       	rjmp	.+24     	; 0x2352 <DIO_enuSetPortDirection+0x84>
				case DIO_u8_PORTC: DDRC_Register=Copy_u8PortDir;break;
    233a:	e4 e3       	ldi	r30, 0x34	; 52
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	80 83       	st	Z, r24
    2342:	07 c0       	rjmp	.+14     	; 0x2352 <DIO_enuSetPortDirection+0x84>
				case DIO_u8_PORTD: DDRD_Register=Copy_u8PortDir;break;
    2344:	e1 e3       	ldi	r30, 0x31	; 49
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	80 83       	st	Z, r24
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <DIO_enuSetPortDirection+0x84>
				default:/* Wrong ID */ break;
				}
		}
		//if there IS an error
		else
			LOC_enuErrorStatus = Dio_enuInvalidInput;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	89 83       	std	Y+1, r24	; 0x01

return LOC_enuErrorStatus;
    2352:	89 81       	ldd	r24, Y+1	; 0x01
}
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <DIO_enuSetPortValue>:
//*************************************************************************************
// Determine the values of the PORT REG (OUTPUT ONLY)
DIO_tenuErrorStatus DIO_enuSetPortValue(u8 Copy_u8PortId , u8 Copy_u8PortVal){
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	00 d0       	rcall	.+0      	; 0x236a <DIO_enuSetPortValue+0x6>
    236a:	00 d0       	rcall	.+0      	; 0x236c <DIO_enuSetPortValue+0x8>
    236c:	0f 92       	push	r0
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	8a 83       	std	Y+2, r24	; 0x02
    2374:	6b 83       	std	Y+3, r22	; 0x03

	    //Error flag
		DIO_tenuErrorStatus LOC_enuErrorStatus = Dio_enuOK;
    2376:	19 82       	std	Y+1, r1	; 0x01

		// Check if inputs are in valid range
		if(Copy_u8PortId <= DIO_u8_PORTD)
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	84 30       	cpi	r24, 0x04	; 4
    237c:	98 f5       	brcc	.+102    	; 0x23e4 <DIO_enuSetPortValue+0x80>
		{
				switch(Copy_u8PortId)
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	3d 83       	std	Y+5, r19	; 0x05
    2386:	2c 83       	std	Y+4, r18	; 0x04
    2388:	8c 81       	ldd	r24, Y+4	; 0x04
    238a:	9d 81       	ldd	r25, Y+5	; 0x05
    238c:	81 30       	cpi	r24, 0x01	; 1
    238e:	91 05       	cpc	r25, r1
    2390:	d1 f0       	breq	.+52     	; 0x23c6 <DIO_enuSetPortValue+0x62>
    2392:	2c 81       	ldd	r18, Y+4	; 0x04
    2394:	3d 81       	ldd	r19, Y+5	; 0x05
    2396:	22 30       	cpi	r18, 0x02	; 2
    2398:	31 05       	cpc	r19, r1
    239a:	2c f4       	brge	.+10     	; 0x23a6 <DIO_enuSetPortValue+0x42>
    239c:	8c 81       	ldd	r24, Y+4	; 0x04
    239e:	9d 81       	ldd	r25, Y+5	; 0x05
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	61 f0       	breq	.+24     	; 0x23bc <DIO_enuSetPortValue+0x58>
    23a4:	21 c0       	rjmp	.+66     	; 0x23e8 <DIO_enuSetPortValue+0x84>
    23a6:	2c 81       	ldd	r18, Y+4	; 0x04
    23a8:	3d 81       	ldd	r19, Y+5	; 0x05
    23aa:	22 30       	cpi	r18, 0x02	; 2
    23ac:	31 05       	cpc	r19, r1
    23ae:	81 f0       	breq	.+32     	; 0x23d0 <DIO_enuSetPortValue+0x6c>
    23b0:	8c 81       	ldd	r24, Y+4	; 0x04
    23b2:	9d 81       	ldd	r25, Y+5	; 0x05
    23b4:	83 30       	cpi	r24, 0x03	; 3
    23b6:	91 05       	cpc	r25, r1
    23b8:	81 f0       	breq	.+32     	; 0x23da <DIO_enuSetPortValue+0x76>
    23ba:	16 c0       	rjmp	.+44     	; 0x23e8 <DIO_enuSetPortValue+0x84>
				{
				case DIO_u8_PORTA: PORTA_Register=Copy_u8PortVal;break;
    23bc:	eb e3       	ldi	r30, 0x3B	; 59
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	80 83       	st	Z, r24
    23c4:	11 c0       	rjmp	.+34     	; 0x23e8 <DIO_enuSetPortValue+0x84>
				case DIO_u8_PORTB: PORTB_Register=Copy_u8PortVal;break;
    23c6:	e8 e3       	ldi	r30, 0x38	; 56
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	80 83       	st	Z, r24
    23ce:	0c c0       	rjmp	.+24     	; 0x23e8 <DIO_enuSetPortValue+0x84>
				case DIO_u8_PORTC: PORTC_Register=Copy_u8PortVal;break;
    23d0:	e5 e3       	ldi	r30, 0x35	; 53
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	80 83       	st	Z, r24
    23d8:	07 c0       	rjmp	.+14     	; 0x23e8 <DIO_enuSetPortValue+0x84>
				case DIO_u8_PORTD: PORTD_Register=Copy_u8PortVal;break;
    23da:	e2 e3       	ldi	r30, 0x32	; 50
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	80 83       	st	Z, r24
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <DIO_enuSetPortValue+0x84>
				default:/* Wrong ID */ break;
				}
		}
		//if there IS an error
		else
			LOC_enuErrorStatus = Dio_enuInvalidInput;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	89 83       	std	Y+1, r24	; 0x01

return LOC_enuErrorStatus;
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <ADC_voidInit>:
#include "../../../INCLUDE/MCAL/ADC/ADC_cfg.h"
#include "../../../INCLUDE/MCAL/ADC/ADC_priv.h"
#include "../../../SERVICES/bit_utilies.h"
#include "../../../SERVICES/std_types.h"

void ADC_voidInit(){
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
	// VREF
#if ADC_VREF==ADC_VREF_AVCC_5V
	SET_BIT(ADCMUX_Register,ADC_VREF_ADMUX_REFS0);
    2402:	a7 e2       	ldi	r26, 0x27	; 39
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e7 e2       	ldi	r30, 0x27	; 39
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	80 64       	ori	r24, 0x40	; 64
    240e:	8c 93       	st	X, r24
	CLR_BIT(ADCMUX_Register,ADC_VREF_ADMUX_REFS1);
    2410:	a7 e2       	ldi	r26, 0x27	; 39
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e7 e2       	ldi	r30, 0x27	; 39
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	8f 77       	andi	r24, 0x7F	; 127
    241c:	8c 93       	st	X, r24
#else
	#warning INVALID VREF
#endif
	// AADJUSTMENT
#if ADC_ADJUSTMENT==ADC_ADJUSTMENT_RIGHT
	CLR_BIT(ADCMUX_Register,ADC_ADJUSTMENT_ADMUX_ADLAR);
    241e:	a7 e2       	ldi	r26, 0x27	; 39
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e7 e2       	ldi	r30, 0x27	; 39
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	8f 7d       	andi	r24, 0xDF	; 223
    242a:	8c 93       	st	X, r24
#else
	#warning INVALID ADJUSTMENT
#endif
	//PRESCALER
#if   ADC_PRESCALER==ADC_PRESCALER_128
	   SET_BIT(ADCSRA_Register,ADC_PRESCALER_ADCSRA_ADPS0);
    242c:	a6 e2       	ldi	r26, 0x26	; 38
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e6 e2       	ldi	r30, 0x26	; 38
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	81 60       	ori	r24, 0x01	; 1
    2438:	8c 93       	st	X, r24
	   SET_BIT(ADCSRA_Register,ADC_PRESCALER_ADCSRA_ADPS1);
    243a:	a6 e2       	ldi	r26, 0x26	; 38
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e6 e2       	ldi	r30, 0x26	; 38
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	82 60       	ori	r24, 0x02	; 2
    2446:	8c 93       	st	X, r24
	   SET_BIT(ADCSRA_Register,ADC_PRESCALER_ADCSRA_ADPS2);
    2448:	a6 e2       	ldi	r26, 0x26	; 38
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e6 e2       	ldi	r30, 0x26	; 38
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	84 60       	ori	r24, 0x04	; 4
    2454:	8c 93       	st	X, r24
#else
#warning INVALID PRESCALER
#endif
	   // ADC Analog Channel
#if ADC_ANALOG_CHANNEL==ADC_ANALOG_CHANNEL_PIN0
	   ADCSRA_Register&=0xE0;
    2456:	a6 e2       	ldi	r26, 0x26	; 38
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e6 e2       	ldi	r30, 0x26	; 38
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	80 7e       	andi	r24, 0xE0	; 224
    2462:	8c 93       	st	X, r24
#elif ADC_ANALOG_CHANNEL==ADC_ANALOG_CHANNEL_PIN7
	   ADCSRA_Register&=0xE7;
#else
		#warning INVALID ANALOG CHANNEL
#endif
}
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <ADC_voidGetRead>:
void ADC_voidGetRead(u16*Add_u16AdcRead){
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <ADC_voidGetRead+0x6>
    2470:	0f 92       	push	r0
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	9b 83       	std	Y+3, r25	; 0x03
    2478:	8a 83       	std	Y+2, r24	; 0x02
	//ENABLE
	SET_BIT(ADCSRA_Register,ADC_ENABLE_ADCSRA_ADEN);
    247a:	a6 e2       	ldi	r26, 0x26	; 38
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e6 e2       	ldi	r30, 0x26	; 38
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	80 68       	ori	r24, 0x80	; 128
    2486:	8c 93       	st	X, r24
	// Star Conversion
	SET_BIT(ADCSRA_Register,ADC_START_CONVERSION);
    2488:	a6 e2       	ldi	r26, 0x26	; 38
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e6 e2       	ldi	r30, 0x26	; 38
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	80 64       	ori	r24, 0x40	; 64
    2494:	8c 93       	st	X, r24
	u8 Loc_u8AdcTimeOutCounter=200;
    2496:	88 ec       	ldi	r24, 0xC8	; 200
    2498:	89 83       	std	Y+1, r24	; 0x01
    249a:	03 c0       	rjmp	.+6      	; 0x24a2 <ADC_voidGetRead+0x38>
	while(GET_BIT(ADCSRA_Register,ADC_START_CONVERSION)==ADC_CONVERSION_IN_PROGRESS && Loc_u8AdcTimeOutCounter>0){
		Loc_u8AdcTimeOutCounter--;
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	81 50       	subi	r24, 0x01	; 1
    24a0:	89 83       	std	Y+1, r24	; 0x01
	//ENABLE
	SET_BIT(ADCSRA_Register,ADC_ENABLE_ADCSRA_ADEN);
	// Star Conversion
	SET_BIT(ADCSRA_Register,ADC_START_CONVERSION);
	u8 Loc_u8AdcTimeOutCounter=200;
	while(GET_BIT(ADCSRA_Register,ADC_START_CONVERSION)==ADC_CONVERSION_IN_PROGRESS && Loc_u8AdcTimeOutCounter>0){
    24a2:	e6 e2       	ldi	r30, 0x26	; 38
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	82 95       	swap	r24
    24aa:	86 95       	lsr	r24
    24ac:	86 95       	lsr	r24
    24ae:	83 70       	andi	r24, 0x03	; 3
    24b0:	88 2f       	mov	r24, r24
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	81 70       	andi	r24, 0x01	; 1
    24b6:	90 70       	andi	r25, 0x00	; 0
    24b8:	98 2f       	mov	r25, r24
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	89 27       	eor	r24, r25
    24be:	88 23       	and	r24, r24
    24c0:	19 f4       	brne	.+6      	; 0x24c8 <ADC_voidGetRead+0x5e>
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	88 23       	and	r24, r24
    24c6:	51 f7       	brne	.-44     	; 0x249c <ADC_voidGetRead+0x32>
		Loc_u8AdcTimeOutCounter--;
	}
	if(Loc_u8AdcTimeOutCounter==ADC_TimeOut){
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	88 23       	and	r24, r24
    24cc:	41 f0       	breq	.+16     	; 0x24de <ADC_voidGetRead+0x74>
		#warning ADC TIME OUT
	}
	else
		*Add_u16AdcRead=ADC_Register;
    24ce:	e4 e2       	ldi	r30, 0x24	; 36
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	91 81       	ldd	r25, Z+1	; 0x01
    24d6:	ea 81       	ldd	r30, Y+2	; 0x02
    24d8:	fb 81       	ldd	r31, Y+3	; 0x03
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	80 83       	st	Z, r24
}
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <ADC_voidDisable>:
void ADC_voidDisable(){
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA_Register,ADC_ENABLE_ADCSRA_ADEN);
    24f2:	a6 e2       	ldi	r26, 0x26	; 38
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e6 e2       	ldi	r30, 0x26	; 38
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	8f 77       	andi	r24, 0x7F	; 127
    24fe:	8c 93       	st	X, r24
}
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <Seg_vidSegInit>:
 *      Author: mh_sm
 */
#include "../../../INCLUDE/HAL/seg_7/seg_7.h"
#include "../../../INCLUDE/MCAL/DIO/DIO.h"
//DDR REG
void Seg_vidSegInit(Seg_tCfg*Add_structSeg){
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	00 d0       	rcall	.+0      	; 0x250c <Seg_vidSegInit+0x6>
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	9a 83       	std	Y+2, r25	; 0x02
    2512:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPortDirection(Add_structSeg->Port,DIO_u8_PORT_OUTPUT);
    2514:	e9 81       	ldd	r30, Y+1	; 0x01
    2516:	fa 81       	ldd	r31, Y+2	; 0x02
    2518:	80 81       	ld	r24, Z
    251a:	83 70       	andi	r24, 0x03	; 3
    251c:	6f ef       	ldi	r22, 0xFF	; 255
    251e:	0e 94 67 11 	call	0x22ce	; 0x22ce <DIO_enuSetPortDirection>
}
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <Seg_vidOn>:

void Seg_vidOn(Seg_tCfg*Add_structSeg,u8 Add_u8SegVal){
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	00 d0       	rcall	.+0      	; 0x2532 <Seg_vidOn+0x6>
    2532:	0f 92       	push	r0
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	9a 83       	std	Y+2, r25	; 0x02
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	6b 83       	std	Y+3, r22	; 0x03
	if((Add_structSeg->Common_Type) == Seg_CommCathode){
    253e:	e9 81       	ldd	r30, Y+1	; 0x01
    2540:	fa 81       	ldd	r31, Y+2	; 0x02
    2542:	80 81       	ld	r24, Z
    2544:	84 70       	andi	r24, 0x04	; 4
    2546:	88 23       	and	r24, r24
    2548:	41 f0       	breq	.+16     	; 0x255a <Seg_vidOn+0x2e>
		DIO_enuSetPortValue(Add_structSeg->Port,Add_u8SegVal);
    254a:	e9 81       	ldd	r30, Y+1	; 0x01
    254c:	fa 81       	ldd	r31, Y+2	; 0x02
    254e:	80 81       	ld	r24, Z
    2550:	83 70       	andi	r24, 0x03	; 3
    2552:	6b 81       	ldd	r22, Y+3	; 0x03
    2554:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_enuSetPortValue>
    2558:	12 c0       	rjmp	.+36     	; 0x257e <Seg_vidOn+0x52>
	}
	else if((Add_structSeg->Common_Type) == Seg_CommAnode){
    255a:	e9 81       	ldd	r30, Y+1	; 0x01
    255c:	fa 81       	ldd	r31, Y+2	; 0x02
    255e:	80 81       	ld	r24, Z
    2560:	84 70       	andi	r24, 0x04	; 4
    2562:	88 23       	and	r24, r24
    2564:	61 f4       	brne	.+24     	; 0x257e <Seg_vidOn+0x52>
			DIO_enuSetPortValue(Add_structSeg->Port,~(Add_u8SegVal));
    2566:	e9 81       	ldd	r30, Y+1	; 0x01
    2568:	fa 81       	ldd	r31, Y+2	; 0x02
    256a:	80 81       	ld	r24, Z
    256c:	83 70       	andi	r24, 0x03	; 3
    256e:	28 2f       	mov	r18, r24
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	98 2f       	mov	r25, r24
    2574:	90 95       	com	r25
    2576:	82 2f       	mov	r24, r18
    2578:	69 2f       	mov	r22, r25
    257a:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_enuSetPortValue>
	}
}
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <Stepper_voidInit>:
 *      Author: mh_sm
 */
#include "../../../INCLUDE/HAL/Stepper/Stepper.h"
#include "../../../INCLUDE/MCAL/DIO/DIO.h"
#include "util/delay.h"
void Stepper_voidInit(Stepper_tstructCfg*Add_structStepper){
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	00 d0       	rcall	.+0      	; 0x2590 <Stepper_voidInit+0x6>
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPortDirection(Add_structStepper->Port,0b00001111);
    2598:	e9 81       	ldd	r30, Y+1	; 0x01
    259a:	fa 81       	ldd	r31, Y+2	; 0x02
    259c:	80 81       	ld	r24, Z
    259e:	83 70       	andi	r24, 0x03	; 3
    25a0:	6f e0       	ldi	r22, 0x0F	; 15
    25a2:	0e 94 67 11 	call	0x22ce	; 0x22ce <DIO_enuSetPortDirection>
	DIO_enuSetPortValue(Add_structStepper->Port,0);
    25a6:	e9 81       	ldd	r30, Y+1	; 0x01
    25a8:	fa 81       	ldd	r31, Y+2	; 0x02
    25aa:	80 81       	ld	r24, Z
    25ac:	83 70       	andi	r24, 0x03	; 3
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_enuSetPortValue>
}
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <Stepper_voidOn>:
void Stepper_voidOn(Stepper_tstructCfg*Add_structStepper,u8 Copy_u8StepperDirection,u8 Copy_u8StepperStepMode,u8 Copy_u8StepperDegree){
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	a8 97       	sbiw	r28, 0x28	; 40
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	9f 8f       	std	Y+31, r25	; 0x1f
    25d4:	8e 8f       	std	Y+30, r24	; 0x1e
    25d6:	68 a3       	std	Y+32, r22	; 0x20
    25d8:	49 a3       	std	Y+33, r20	; 0x21
    25da:	2a a3       	std	Y+34, r18	; 0x22
	u8 StepperCounter=0;
    25dc:	1d 8e       	std	Y+29, r1	; 0x1d


	switch(Copy_u8StepperStepMode){
    25de:	89 a1       	ldd	r24, Y+33	; 0x21
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	38 a7       	std	Y+40, r19	; 0x28
    25e6:	2f a3       	std	Y+39, r18	; 0x27
    25e8:	8f a1       	ldd	r24, Y+39	; 0x27
    25ea:	98 a5       	ldd	r25, Y+40	; 0x28
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <Stepper_voidOn+0x34>
    25f0:	a1 c0       	rjmp	.+322    	; 0x2734 <Stepper_voidOn+0x176>
    25f2:	2f a1       	ldd	r18, Y+39	; 0x27
    25f4:	38 a5       	ldd	r19, Y+40	; 0x28
    25f6:	21 30       	cpi	r18, 0x01	; 1
    25f8:	31 05       	cpc	r19, r1
    25fa:	09 f0       	breq	.+2      	; 0x25fe <Stepper_voidOn+0x40>
    25fc:	35 c1       	rjmp	.+618    	; 0x2868 <Stepper_voidOn+0x2aa>


	case Stepper_FULL_STEP:
		for(StepperCounter=0;StepperCounter<Copy_u8StepperDegree;StepperCounter++){
    25fe:	1d 8e       	std	Y+29, r1	; 0x1d
    2600:	93 c0       	rjmp	.+294    	; 0x2728 <Stepper_voidOn+0x16a>
			switch(Copy_u8StepperDirection){
    2602:	88 a1       	ldd	r24, Y+32	; 0x20
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	3e a3       	std	Y+38, r19	; 0x26
    260a:	2d a3       	std	Y+37, r18	; 0x25
    260c:	8d a1       	ldd	r24, Y+37	; 0x25
    260e:	9e a1       	ldd	r25, Y+38	; 0x26
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	51 f0       	breq	.+20     	; 0x2628 <Stepper_voidOn+0x6a>
    2614:	2d a1       	ldd	r18, Y+37	; 0x25
    2616:	3e a1       	ldd	r19, Y+38	; 0x26
    2618:	21 30       	cpi	r18, 0x01	; 1
    261a:	31 05       	cpc	r19, r1
    261c:	49 f4       	brne	.+18     	; 0x2630 <Stepper_voidOn+0x72>
				case Stepper_CLOCKWISE:DIO_enuSetPortValue(DIO_u8_PORTA ,0b00000001);break;
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	61 e0       	ldi	r22, 0x01	; 1
    2622:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_enuSetPortValue>
    2626:	04 c0       	rjmp	.+8      	; 0x2630 <Stepper_voidOn+0x72>
				case Stepper_COUNTER_CLOCKWISE:DIO_enuSetPortValue(DIO_u8_PORTA ,0b00001000);break;
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	68 e0       	ldi	r22, 0x08	; 8
    262c:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_enuSetPortValue>
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	a0 ea       	ldi	r26, 0xA0	; 160
    2636:	b0 e4       	ldi	r27, 0x40	; 64
    2638:	89 8f       	std	Y+25, r24	; 0x19
    263a:	9a 8f       	std	Y+26, r25	; 0x1a
    263c:	ab 8f       	std	Y+27, r26	; 0x1b
    263e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2640:	69 8d       	ldd	r22, Y+25	; 0x19
    2642:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	4a ef       	ldi	r20, 0xFA	; 250
    264e:	54 e4       	ldi	r21, 0x44	; 68
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	8d 8b       	std	Y+21, r24	; 0x15
    265a:	9e 8b       	std	Y+22, r25	; 0x16
    265c:	af 8b       	std	Y+23, r26	; 0x17
    265e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2660:	6d 89       	ldd	r22, Y+21	; 0x15
    2662:	7e 89       	ldd	r23, Y+22	; 0x16
    2664:	8f 89       	ldd	r24, Y+23	; 0x17
    2666:	98 8d       	ldd	r25, Y+24	; 0x18
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e8       	ldi	r20, 0x80	; 128
    266e:	5f e3       	ldi	r21, 0x3F	; 63
    2670:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2674:	88 23       	and	r24, r24
    2676:	2c f4       	brge	.+10     	; 0x2682 <Stepper_voidOn+0xc4>
		__ticks = 1;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	9c 8b       	std	Y+20, r25	; 0x14
    267e:	8b 8b       	std	Y+19, r24	; 0x13
    2680:	3f c0       	rjmp	.+126    	; 0x2700 <Stepper_voidOn+0x142>
	else if (__tmp > 65535)
    2682:	6d 89       	ldd	r22, Y+21	; 0x15
    2684:	7e 89       	ldd	r23, Y+22	; 0x16
    2686:	8f 89       	ldd	r24, Y+23	; 0x17
    2688:	98 8d       	ldd	r25, Y+24	; 0x18
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	3f ef       	ldi	r19, 0xFF	; 255
    268e:	4f e7       	ldi	r20, 0x7F	; 127
    2690:	57 e4       	ldi	r21, 0x47	; 71
    2692:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2696:	18 16       	cp	r1, r24
    2698:	4c f5       	brge	.+82     	; 0x26ec <Stepper_voidOn+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269a:	69 8d       	ldd	r22, Y+25	; 0x19
    269c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    269e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e2       	ldi	r20, 0x20	; 32
    26a8:	51 e4       	ldi	r21, 0x41	; 65
    26aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	bc 01       	movw	r22, r24
    26b4:	cd 01       	movw	r24, r26
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	9c 8b       	std	Y+20, r25	; 0x14
    26c0:	8b 8b       	std	Y+19, r24	; 0x13
    26c2:	0f c0       	rjmp	.+30     	; 0x26e2 <Stepper_voidOn+0x124>
    26c4:	88 ec       	ldi	r24, 0xC8	; 200
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	9a 8b       	std	Y+18, r25	; 0x12
    26ca:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26cc:	89 89       	ldd	r24, Y+17	; 0x11
    26ce:	9a 89       	ldd	r25, Y+18	; 0x12
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <Stepper_voidOn+0x112>
    26d4:	9a 8b       	std	Y+18, r25	; 0x12
    26d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d8:	8b 89       	ldd	r24, Y+19	; 0x13
    26da:	9c 89       	ldd	r25, Y+20	; 0x14
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	9c 8b       	std	Y+20, r25	; 0x14
    26e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e2:	8b 89       	ldd	r24, Y+19	; 0x13
    26e4:	9c 89       	ldd	r25, Y+20	; 0x14
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	69 f7       	brne	.-38     	; 0x26c4 <Stepper_voidOn+0x106>
    26ea:	14 c0       	rjmp	.+40     	; 0x2714 <Stepper_voidOn+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ec:	6d 89       	ldd	r22, Y+21	; 0x15
    26ee:	7e 89       	ldd	r23, Y+22	; 0x16
    26f0:	8f 89       	ldd	r24, Y+23	; 0x17
    26f2:	98 8d       	ldd	r25, Y+24	; 0x18
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9c 8b       	std	Y+20, r25	; 0x14
    26fe:	8b 8b       	std	Y+19, r24	; 0x13
    2700:	8b 89       	ldd	r24, Y+19	; 0x13
    2702:	9c 89       	ldd	r25, Y+20	; 0x14
    2704:	98 8b       	std	Y+16, r25	; 0x10
    2706:	8f 87       	std	Y+15, r24	; 0x0f
    2708:	8f 85       	ldd	r24, Y+15	; 0x0f
    270a:	98 89       	ldd	r25, Y+16	; 0x10
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <Stepper_voidOn+0x14e>
    2710:	98 8b       	std	Y+16, r25	; 0x10
    2712:	8f 87       	std	Y+15, r24	; 0x0f
			}
			_delay_ms(5);
			DIO_enuSetPortValue(Add_structStepper->Port,0);
    2714:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2716:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2718:	80 81       	ld	r24, Z
    271a:	83 70       	andi	r24, 0x03	; 3
    271c:	60 e0       	ldi	r22, 0x00	; 0
    271e:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_enuSetPortValue>

	switch(Copy_u8StepperStepMode){


	case Stepper_FULL_STEP:
		for(StepperCounter=0;StepperCounter<Copy_u8StepperDegree;StepperCounter++){
    2722:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	8d 8f       	std	Y+29, r24	; 0x1d
    2728:	9d 8d       	ldd	r25, Y+29	; 0x1d
    272a:	8a a1       	ldd	r24, Y+34	; 0x22
    272c:	98 17       	cp	r25, r24
    272e:	08 f4       	brcc	.+2      	; 0x2732 <Stepper_voidOn+0x174>
    2730:	68 cf       	rjmp	.-304    	; 0x2602 <Stepper_voidOn+0x44>
    2732:	9a c0       	rjmp	.+308    	; 0x2868 <Stepper_voidOn+0x2aa>
		}
	break;


	case Stepper_HALF_STEP:
		for(StepperCounter=0;StepperCounter<Copy_u8StepperDegree;StepperCounter++){
    2734:	1d 8e       	std	Y+29, r1	; 0x1d
    2736:	93 c0       	rjmp	.+294    	; 0x285e <Stepper_voidOn+0x2a0>
			switch(Copy_u8StepperDirection){
    2738:	88 a1       	ldd	r24, Y+32	; 0x20
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	3c a3       	std	Y+36, r19	; 0x24
    2740:	2b a3       	std	Y+35, r18	; 0x23
    2742:	8b a1       	ldd	r24, Y+35	; 0x23
    2744:	9c a1       	ldd	r25, Y+36	; 0x24
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	51 f0       	breq	.+20     	; 0x275e <Stepper_voidOn+0x1a0>
    274a:	2b a1       	ldd	r18, Y+35	; 0x23
    274c:	3c a1       	ldd	r19, Y+36	; 0x24
    274e:	21 30       	cpi	r18, 0x01	; 1
    2750:	31 05       	cpc	r19, r1
    2752:	49 f4       	brne	.+18     	; 0x2766 <Stepper_voidOn+0x1a8>
				case Stepper_CLOCKWISE:DIO_enuSetPortValue(DIO_u8_PORTA ,0b00000011);break;
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	63 e0       	ldi	r22, 0x03	; 3
    2758:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_enuSetPortValue>
    275c:	04 c0       	rjmp	.+8      	; 0x2766 <Stepper_voidOn+0x1a8>
				case Stepper_COUNTER_CLOCKWISE:DIO_enuSetPortValue(DIO_u8_PORTA ,0b00001100);break;
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	6c e0       	ldi	r22, 0x0C	; 12
    2762:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_enuSetPortValue>
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	a0 ea       	ldi	r26, 0xA0	; 160
    276c:	b0 e4       	ldi	r27, 0x40	; 64
    276e:	8b 87       	std	Y+11, r24	; 0x0b
    2770:	9c 87       	std	Y+12, r25	; 0x0c
    2772:	ad 87       	std	Y+13, r26	; 0x0d
    2774:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2776:	6b 85       	ldd	r22, Y+11	; 0x0b
    2778:	7c 85       	ldd	r23, Y+12	; 0x0c
    277a:	8d 85       	ldd	r24, Y+13	; 0x0d
    277c:	9e 85       	ldd	r25, Y+14	; 0x0e
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	4a ef       	ldi	r20, 0xFA	; 250
    2784:	54 e4       	ldi	r21, 0x44	; 68
    2786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	8f 83       	std	Y+7, r24	; 0x07
    2790:	98 87       	std	Y+8, r25	; 0x08
    2792:	a9 87       	std	Y+9, r26	; 0x09
    2794:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2796:	6f 81       	ldd	r22, Y+7	; 0x07
    2798:	78 85       	ldd	r23, Y+8	; 0x08
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	9a 85       	ldd	r25, Y+10	; 0x0a
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e8       	ldi	r20, 0x80	; 128
    27a4:	5f e3       	ldi	r21, 0x3F	; 63
    27a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27aa:	88 23       	and	r24, r24
    27ac:	2c f4       	brge	.+10     	; 0x27b8 <Stepper_voidOn+0x1fa>
		__ticks = 1;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	9e 83       	std	Y+6, r25	; 0x06
    27b4:	8d 83       	std	Y+5, r24	; 0x05
    27b6:	3f c0       	rjmp	.+126    	; 0x2836 <Stepper_voidOn+0x278>
	else if (__tmp > 65535)
    27b8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ba:	78 85       	ldd	r23, Y+8	; 0x08
    27bc:	89 85       	ldd	r24, Y+9	; 0x09
    27be:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	3f ef       	ldi	r19, 0xFF	; 255
    27c4:	4f e7       	ldi	r20, 0x7F	; 127
    27c6:	57 e4       	ldi	r21, 0x47	; 71
    27c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27cc:	18 16       	cp	r1, r24
    27ce:	4c f5       	brge	.+82     	; 0x2822 <Stepper_voidOn+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e2       	ldi	r20, 0x20	; 32
    27de:	51 e4       	ldi	r21, 0x41	; 65
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	bc 01       	movw	r22, r24
    27ea:	cd 01       	movw	r24, r26
    27ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	9e 83       	std	Y+6, r25	; 0x06
    27f6:	8d 83       	std	Y+5, r24	; 0x05
    27f8:	0f c0       	rjmp	.+30     	; 0x2818 <Stepper_voidOn+0x25a>
    27fa:	88 ec       	ldi	r24, 0xC8	; 200
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	9c 83       	std	Y+4, r25	; 0x04
    2800:	8b 83       	std	Y+3, r24	; 0x03
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <Stepper_voidOn+0x248>
    280a:	9c 83       	std	Y+4, r25	; 0x04
    280c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280e:	8d 81       	ldd	r24, Y+5	; 0x05
    2810:	9e 81       	ldd	r25, Y+6	; 0x06
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	69 f7       	brne	.-38     	; 0x27fa <Stepper_voidOn+0x23c>
    2820:	14 c0       	rjmp	.+40     	; 0x284a <Stepper_voidOn+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2822:	6f 81       	ldd	r22, Y+7	; 0x07
    2824:	78 85       	ldd	r23, Y+8	; 0x08
    2826:	89 85       	ldd	r24, Y+9	; 0x09
    2828:	9a 85       	ldd	r25, Y+10	; 0x0a
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	9e 83       	std	Y+6, r25	; 0x06
    2834:	8d 83       	std	Y+5, r24	; 0x05
    2836:	8d 81       	ldd	r24, Y+5	; 0x05
    2838:	9e 81       	ldd	r25, Y+6	; 0x06
    283a:	9a 83       	std	Y+2, r25	; 0x02
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	9a 81       	ldd	r25, Y+2	; 0x02
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <Stepper_voidOn+0x284>
    2846:	9a 83       	std	Y+2, r25	; 0x02
    2848:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(5);
			DIO_enuSetPortValue(Add_structStepper->Port,0);
    284a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    284c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    284e:	80 81       	ld	r24, Z
    2850:	83 70       	andi	r24, 0x03	; 3
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_enuSetPortValue>
		}
	break;


	case Stepper_HALF_STEP:
		for(StepperCounter=0;StepperCounter<Copy_u8StepperDegree;StepperCounter++){
    2858:	8d 8d       	ldd	r24, Y+29	; 0x1d
    285a:	8f 5f       	subi	r24, 0xFF	; 255
    285c:	8d 8f       	std	Y+29, r24	; 0x1d
    285e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2860:	8a a1       	ldd	r24, Y+34	; 0x22
    2862:	98 17       	cp	r25, r24
    2864:	08 f4       	brcc	.+2      	; 0x2868 <Stepper_voidOn+0x2aa>
    2866:	68 cf       	rjmp	.-304    	; 0x2738 <Stepper_voidOn+0x17a>
			_delay_ms(5);
			DIO_enuSetPortValue(Add_structStepper->Port,0);
		}
	break;
	}
}
    2868:	a8 96       	adiw	r28, 0x28	; 40
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <Led_vidLedInit>:
 *      Author: mh_sm
 */
#include "../../../INCLUDE/HAL/Led/Led.h"
#include "../../../INCLUDE/MCAL/DIO/DIO.h"
//DDR REG
void Led_vidLedInit(Led_tCfg*Add_structLed){
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	00 d0       	rcall	.+0      	; 0x2880 <Led_vidLedInit+0x6>
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	9a 83       	std	Y+2, r25	; 0x02
    2886:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinDirection(Add_structLed->Led_NestStruct.Port,Add_structLed->Pin,DIO_u8_OUTPUT);
    2888:	e9 81       	ldd	r30, Y+1	; 0x01
    288a:	fa 81       	ldd	r31, Y+2	; 0x02
    288c:	81 81       	ldd	r24, Z+1	; 0x01
    288e:	83 70       	andi	r24, 0x03	; 3
    2890:	e9 81       	ldd	r30, Y+1	; 0x01
    2892:	fa 81       	ldd	r31, Y+2	; 0x02
    2894:	90 81       	ld	r25, Z
    2896:	69 2f       	mov	r22, r25
    2898:	41 e0       	ldi	r20, 0x01	; 1
    289a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_enuSetPinDirection>
}
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <Led_vidOn>:

void Led_vidOn(Led_tCfg*Add_structLed){
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <Led_vidOn+0x6>
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	89 83       	std	Y+1, r24	; 0x01
	if((Add_structLed->Led_NestStruct.Active_Status) == Led_Active_High){
    28b6:	e9 81       	ldd	r30, Y+1	; 0x01
    28b8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ba:	81 81       	ldd	r24, Z+1	; 0x01
    28bc:	84 70       	andi	r24, 0x04	; 4
    28be:	88 23       	and	r24, r24
    28c0:	89 f0       	breq	.+34     	; 0x28e4 <Led_vidOn+0x3c>
		Add_structLed->Led_NestStruct.Current_Status = Led_Active_High_High;
    28c2:	e9 81       	ldd	r30, Y+1	; 0x01
    28c4:	fa 81       	ldd	r31, Y+2	; 0x02
    28c6:	81 81       	ldd	r24, Z+1	; 0x01
    28c8:	88 60       	ori	r24, 0x08	; 8
    28ca:	81 83       	std	Z+1, r24	; 0x01
		DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port,Add_structLed->Pin,Led_Active_High_High);
    28cc:	e9 81       	ldd	r30, Y+1	; 0x01
    28ce:	fa 81       	ldd	r31, Y+2	; 0x02
    28d0:	81 81       	ldd	r24, Z+1	; 0x01
    28d2:	83 70       	andi	r24, 0x03	; 3
    28d4:	e9 81       	ldd	r30, Y+1	; 0x01
    28d6:	fa 81       	ldd	r31, Y+2	; 0x02
    28d8:	90 81       	ld	r25, Z
    28da:	69 2f       	mov	r22, r25
    28dc:	41 e0       	ldi	r20, 0x01	; 1
    28de:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
    28e2:	16 c0       	rjmp	.+44     	; 0x2910 <Led_vidOn+0x68>
	}
	else if(Add_structLed->Led_NestStruct.Active_Status == Led_Active_Low){
    28e4:	e9 81       	ldd	r30, Y+1	; 0x01
    28e6:	fa 81       	ldd	r31, Y+2	; 0x02
    28e8:	81 81       	ldd	r24, Z+1	; 0x01
    28ea:	84 70       	andi	r24, 0x04	; 4
    28ec:	88 23       	and	r24, r24
    28ee:	81 f4       	brne	.+32     	; 0x2910 <Led_vidOn+0x68>
		Add_structLed->Led_NestStruct.Current_Status = Led_Active_Low_High;
    28f0:	e9 81       	ldd	r30, Y+1	; 0x01
    28f2:	fa 81       	ldd	r31, Y+2	; 0x02
    28f4:	81 81       	ldd	r24, Z+1	; 0x01
    28f6:	87 7f       	andi	r24, 0xF7	; 247
    28f8:	81 83       	std	Z+1, r24	; 0x01
		DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port,Add_structLed->Pin,Led_Active_Low_High);
    28fa:	e9 81       	ldd	r30, Y+1	; 0x01
    28fc:	fa 81       	ldd	r31, Y+2	; 0x02
    28fe:	81 81       	ldd	r24, Z+1	; 0x01
    2900:	83 70       	andi	r24, 0x03	; 3
    2902:	e9 81       	ldd	r30, Y+1	; 0x01
    2904:	fa 81       	ldd	r31, Y+2	; 0x02
    2906:	90 81       	ld	r25, Z
    2908:	69 2f       	mov	r22, r25
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
	}
}
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <Led_vidOff>:

void Led_vidOff(Led_tCfg*Add_structLed){
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	00 d0       	rcall	.+0      	; 0x2920 <Led_vidOff+0x6>
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	9a 83       	std	Y+2, r25	; 0x02
    2926:	89 83       	std	Y+1, r24	; 0x01
	if(Add_structLed->Led_NestStruct.Active_Status == Led_Active_High){
    2928:	e9 81       	ldd	r30, Y+1	; 0x01
    292a:	fa 81       	ldd	r31, Y+2	; 0x02
    292c:	81 81       	ldd	r24, Z+1	; 0x01
    292e:	84 70       	andi	r24, 0x04	; 4
    2930:	88 23       	and	r24, r24
    2932:	89 f0       	breq	.+34     	; 0x2956 <Led_vidOff+0x3c>
		Add_structLed->Led_NestStruct.Current_Status = Led_Active_High_Low;
    2934:	e9 81       	ldd	r30, Y+1	; 0x01
    2936:	fa 81       	ldd	r31, Y+2	; 0x02
    2938:	81 81       	ldd	r24, Z+1	; 0x01
    293a:	87 7f       	andi	r24, 0xF7	; 247
    293c:	81 83       	std	Z+1, r24	; 0x01
		DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port ,Add_structLed->Pin,Led_Active_High_Low);
    293e:	e9 81       	ldd	r30, Y+1	; 0x01
    2940:	fa 81       	ldd	r31, Y+2	; 0x02
    2942:	81 81       	ldd	r24, Z+1	; 0x01
    2944:	83 70       	andi	r24, 0x03	; 3
    2946:	e9 81       	ldd	r30, Y+1	; 0x01
    2948:	fa 81       	ldd	r31, Y+2	; 0x02
    294a:	90 81       	ld	r25, Z
    294c:	69 2f       	mov	r22, r25
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
    2954:	16 c0       	rjmp	.+44     	; 0x2982 <Led_vidOff+0x68>
	}
	else if(Add_structLed->Led_NestStruct.Active_Status == Led_Active_Low){
    2956:	e9 81       	ldd	r30, Y+1	; 0x01
    2958:	fa 81       	ldd	r31, Y+2	; 0x02
    295a:	81 81       	ldd	r24, Z+1	; 0x01
    295c:	84 70       	andi	r24, 0x04	; 4
    295e:	88 23       	and	r24, r24
    2960:	81 f4       	brne	.+32     	; 0x2982 <Led_vidOff+0x68>
		Add_structLed->Led_NestStruct.Current_Status = Led_Active_Low_Low;
    2962:	e9 81       	ldd	r30, Y+1	; 0x01
    2964:	fa 81       	ldd	r31, Y+2	; 0x02
    2966:	81 81       	ldd	r24, Z+1	; 0x01
    2968:	88 60       	ori	r24, 0x08	; 8
    296a:	81 83       	std	Z+1, r24	; 0x01
		DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port ,Add_structLed->Pin,Led_Active_Low_Low);
    296c:	e9 81       	ldd	r30, Y+1	; 0x01
    296e:	fa 81       	ldd	r31, Y+2	; 0x02
    2970:	81 81       	ldd	r24, Z+1	; 0x01
    2972:	83 70       	andi	r24, 0x03	; 3
    2974:	e9 81       	ldd	r30, Y+1	; 0x01
    2976:	fa 81       	ldd	r31, Y+2	; 0x02
    2978:	90 81       	ld	r25, Z
    297a:	69 2f       	mov	r22, r25
    297c:	41 e0       	ldi	r20, 0x01	; 1
    297e:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
	}
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <Led_vidToggle>:

void Led_vidToggle(Led_tCfg*Add_structLed){
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	00 d0       	rcall	.+0      	; 0x2992 <Led_vidToggle+0x6>
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	9a 83       	std	Y+2, r25	; 0x02
    2998:	89 83       	std	Y+1, r24	; 0x01

	if(Add_structLed->Led_NestStruct.Active_Status == Led_Active_High){
    299a:	e9 81       	ldd	r30, Y+1	; 0x01
    299c:	fa 81       	ldd	r31, Y+2	; 0x02
    299e:	81 81       	ldd	r24, Z+1	; 0x01
    29a0:	84 70       	andi	r24, 0x04	; 4
    29a2:	88 23       	and	r24, r24
    29a4:	79 f1       	breq	.+94     	; 0x2a04 <Led_vidToggle+0x78>


			if(Add_structLed->Led_NestStruct.Current_Status == Led_Active_High_Low){ //OFF-->ON
    29a6:	e9 81       	ldd	r30, Y+1	; 0x01
    29a8:	fa 81       	ldd	r31, Y+2	; 0x02
    29aa:	81 81       	ldd	r24, Z+1	; 0x01
    29ac:	88 70       	andi	r24, 0x08	; 8
    29ae:	88 23       	and	r24, r24
    29b0:	89 f4       	brne	.+34     	; 0x29d4 <Led_vidToggle+0x48>
				DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port ,Add_structLed->Pin,Led_Active_High_High);
    29b2:	e9 81       	ldd	r30, Y+1	; 0x01
    29b4:	fa 81       	ldd	r31, Y+2	; 0x02
    29b6:	81 81       	ldd	r24, Z+1	; 0x01
    29b8:	83 70       	andi	r24, 0x03	; 3
    29ba:	e9 81       	ldd	r30, Y+1	; 0x01
    29bc:	fa 81       	ldd	r31, Y+2	; 0x02
    29be:	90 81       	ld	r25, Z
    29c0:	69 2f       	mov	r22, r25
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
				Add_structLed->Led_NestStruct.Current_Status = Led_Active_High_High;
    29c8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ca:	fa 81       	ldd	r31, Y+2	; 0x02
    29cc:	81 81       	ldd	r24, Z+1	; 0x01
    29ce:	88 60       	ori	r24, 0x08	; 8
    29d0:	81 83       	std	Z+1, r24	; 0x01
    29d2:	4b c0       	rjmp	.+150    	; 0x2a6a <Led_vidToggle+0xde>
			}


			else if(Add_structLed->Led_NestStruct.Current_Status == Led_Active_High_High){ //ON-->OFF
    29d4:	e9 81       	ldd	r30, Y+1	; 0x01
    29d6:	fa 81       	ldd	r31, Y+2	; 0x02
    29d8:	81 81       	ldd	r24, Z+1	; 0x01
    29da:	88 70       	andi	r24, 0x08	; 8
    29dc:	88 23       	and	r24, r24
    29de:	09 f4       	brne	.+2      	; 0x29e2 <Led_vidToggle+0x56>
    29e0:	44 c0       	rjmp	.+136    	; 0x2a6a <Led_vidToggle+0xde>
				DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port ,Add_structLed->Pin,Led_Active_High_Low);
    29e2:	e9 81       	ldd	r30, Y+1	; 0x01
    29e4:	fa 81       	ldd	r31, Y+2	; 0x02
    29e6:	81 81       	ldd	r24, Z+1	; 0x01
    29e8:	83 70       	andi	r24, 0x03	; 3
    29ea:	e9 81       	ldd	r30, Y+1	; 0x01
    29ec:	fa 81       	ldd	r31, Y+2	; 0x02
    29ee:	90 81       	ld	r25, Z
    29f0:	69 2f       	mov	r22, r25
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
				Add_structLed->Led_NestStruct.Current_Status = Led_Active_High_Low;
    29f8:	e9 81       	ldd	r30, Y+1	; 0x01
    29fa:	fa 81       	ldd	r31, Y+2	; 0x02
    29fc:	81 81       	ldd	r24, Z+1	; 0x01
    29fe:	87 7f       	andi	r24, 0xF7	; 247
    2a00:	81 83       	std	Z+1, r24	; 0x01
    2a02:	33 c0       	rjmp	.+102    	; 0x2a6a <Led_vidToggle+0xde>


		}


	else if(Add_structLed->Led_NestStruct.Active_Status == Led_Active_Low){
    2a04:	e9 81       	ldd	r30, Y+1	; 0x01
    2a06:	fa 81       	ldd	r31, Y+2	; 0x02
    2a08:	81 81       	ldd	r24, Z+1	; 0x01
    2a0a:	84 70       	andi	r24, 0x04	; 4
    2a0c:	88 23       	and	r24, r24
    2a0e:	69 f5       	brne	.+90     	; 0x2a6a <Led_vidToggle+0xde>


			if(Add_structLed->Led_NestStruct.Current_Status == Led_Active_Low_Low){
    2a10:	e9 81       	ldd	r30, Y+1	; 0x01
    2a12:	fa 81       	ldd	r31, Y+2	; 0x02
    2a14:	81 81       	ldd	r24, Z+1	; 0x01
    2a16:	88 70       	andi	r24, 0x08	; 8
    2a18:	88 23       	and	r24, r24
    2a1a:	89 f0       	breq	.+34     	; 0x2a3e <Led_vidToggle+0xb2>
				DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port ,Add_structLed->Pin,Led_Active_Low_High);
    2a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a20:	81 81       	ldd	r24, Z+1	; 0x01
    2a22:	83 70       	andi	r24, 0x03	; 3
    2a24:	e9 81       	ldd	r30, Y+1	; 0x01
    2a26:	fa 81       	ldd	r31, Y+2	; 0x02
    2a28:	90 81       	ld	r25, Z
    2a2a:	69 2f       	mov	r22, r25
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
				Add_structLed->Led_NestStruct.Current_Status = Led_Active_Low_High;
    2a32:	e9 81       	ldd	r30, Y+1	; 0x01
    2a34:	fa 81       	ldd	r31, Y+2	; 0x02
    2a36:	81 81       	ldd	r24, Z+1	; 0x01
    2a38:	87 7f       	andi	r24, 0xF7	; 247
    2a3a:	81 83       	std	Z+1, r24	; 0x01
    2a3c:	16 c0       	rjmp	.+44     	; 0x2a6a <Led_vidToggle+0xde>
			}


			else if(Add_structLed->Led_NestStruct.Current_Status == Led_Active_Low_High){
    2a3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a40:	fa 81       	ldd	r31, Y+2	; 0x02
    2a42:	81 81       	ldd	r24, Z+1	; 0x01
    2a44:	88 70       	andi	r24, 0x08	; 8
    2a46:	88 23       	and	r24, r24
    2a48:	81 f4       	brne	.+32     	; 0x2a6a <Led_vidToggle+0xde>
				DIO_enuSetPinValue(Add_structLed->Led_NestStruct.Port ,Add_structLed->Pin,Led_Active_Low_Low);
    2a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4e:	81 81       	ldd	r24, Z+1	; 0x01
    2a50:	83 70       	andi	r24, 0x03	; 3
    2a52:	e9 81       	ldd	r30, Y+1	; 0x01
    2a54:	fa 81       	ldd	r31, Y+2	; 0x02
    2a56:	90 81       	ld	r25, Z
    2a58:	69 2f       	mov	r22, r25
    2a5a:	41 e0       	ldi	r20, 0x01	; 1
    2a5c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
				Add_structLed->Led_NestStruct.Current_Status = Led_Active_Low_Low;
    2a60:	e9 81       	ldd	r30, Y+1	; 0x01
    2a62:	fa 81       	ldd	r31, Y+2	; 0x02
    2a64:	81 81       	ldd	r24, Z+1	; 0x01
    2a66:	88 60       	ori	r24, 0x08	; 8
    2a68:	81 83       	std	Z+1, r24	; 0x01
			}


		}

}
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	cf 91       	pop	r28
    2a70:	df 91       	pop	r29
    2a72:	08 95       	ret

00002a74 <Lcd_vidEnablePulse>:
 */
#include "../../../INCLUDE/HAL/Lcd/Lcd.h"
#include "../../../INCLUDE/MCAL/DIO/DIO.h"
#include"../../../SERVICES/std_types.h"
#include "util/delay.h"
void Lcd_vidEnablePulse(Lcd_tstrucCfg*Add_strucLcd){
    2a74:	df 93       	push	r29
    2a76:	cf 93       	push	r28
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	60 97       	sbiw	r28, 0x10	; 16
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	98 8b       	std	Y+16, r25	; 0x10
    2a8a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->EN_Pin,DIO_u8_HIGH);
    2a8c:	ef 85       	ldd	r30, Y+15	; 0x0f
    2a8e:	f8 89       	ldd	r31, Y+16	; 0x10
    2a90:	81 81       	ldd	r24, Z+1	; 0x01
    2a92:	ef 85       	ldd	r30, Y+15	; 0x0f
    2a94:	f8 89       	ldd	r31, Y+16	; 0x10
    2a96:	94 81       	ldd	r25, Z+4	; 0x04
    2a98:	69 2f       	mov	r22, r25
    2a9a:	41 e0       	ldi	r20, 0x01	; 1
    2a9c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	a0 e0       	ldi	r26, 0x00	; 0
    2aa6:	b0 e4       	ldi	r27, 0x40	; 64
    2aa8:	8b 87       	std	Y+11, r24	; 0x0b
    2aaa:	9c 87       	std	Y+12, r25	; 0x0c
    2aac:	ad 87       	std	Y+13, r26	; 0x0d
    2aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	4a ef       	ldi	r20, 0xFA	; 250
    2abe:	54 e4       	ldi	r21, 0x44	; 68
    2ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	8f 83       	std	Y+7, r24	; 0x07
    2aca:	98 87       	std	Y+8, r25	; 0x08
    2acc:	a9 87       	std	Y+9, r26	; 0x09
    2ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad2:	78 85       	ldd	r23, Y+8	; 0x08
    2ad4:	89 85       	ldd	r24, Y+9	; 0x09
    2ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f e3       	ldi	r21, 0x3F	; 63
    2ae0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae4:	88 23       	and	r24, r24
    2ae6:	2c f4       	brge	.+10     	; 0x2af2 <Lcd_vidEnablePulse+0x7e>
		__ticks = 1;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	3f c0       	rjmp	.+126    	; 0x2b70 <Lcd_vidEnablePulse+0xfc>
	else if (__tmp > 65535)
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	3f ef       	ldi	r19, 0xFF	; 255
    2afe:	4f e7       	ldi	r20, 0x7F	; 127
    2b00:	57 e4       	ldi	r21, 0x47	; 71
    2b02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b06:	18 16       	cp	r1, r24
    2b08:	4c f5       	brge	.+82     	; 0x2b5c <Lcd_vidEnablePulse+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e2       	ldi	r20, 0x20	; 32
    2b18:	51 e4       	ldi	r21, 0x41	; 65
    2b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	9e 83       	std	Y+6, r25	; 0x06
    2b30:	8d 83       	std	Y+5, r24	; 0x05
    2b32:	0f c0       	rjmp	.+30     	; 0x2b52 <Lcd_vidEnablePulse+0xde>
    2b34:	88 ec       	ldi	r24, 0xC8	; 200
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9c 83       	std	Y+4, r25	; 0x04
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <Lcd_vidEnablePulse+0xcc>
    2b44:	9c 83       	std	Y+4, r25	; 0x04
    2b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b48:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	9e 83       	std	Y+6, r25	; 0x06
    2b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b52:	8d 81       	ldd	r24, Y+5	; 0x05
    2b54:	9e 81       	ldd	r25, Y+6	; 0x06
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	69 f7       	brne	.-38     	; 0x2b34 <Lcd_vidEnablePulse+0xc0>
    2b5a:	14 c0       	rjmp	.+40     	; 0x2b84 <Lcd_vidEnablePulse+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5e:	78 85       	ldd	r23, Y+8	; 0x08
    2b60:	89 85       	ldd	r24, Y+9	; 0x09
    2b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	9e 81       	ldd	r25, Y+6	; 0x06
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <Lcd_vidEnablePulse+0x108>
    2b80:	9a 83       	std	Y+2, r25	; 0x02
    2b82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->EN_Pin,DIO_u8_LOW);
    2b84:	ef 85       	ldd	r30, Y+15	; 0x0f
    2b86:	f8 89       	ldd	r31, Y+16	; 0x10
    2b88:	81 81       	ldd	r24, Z+1	; 0x01
    2b8a:	ef 85       	ldd	r30, Y+15	; 0x0f
    2b8c:	f8 89       	ldd	r31, Y+16	; 0x10
    2b8e:	94 81       	ldd	r25, Z+4	; 0x04
    2b90:	69 2f       	mov	r22, r25
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
}
    2b98:	60 96       	adiw	r28, 0x10	; 16
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <Lcd_vidSendCommand>:

//Send Command
void Lcd_vidSendCommand(Lcd_tstrucCfg*Add_strucLcd,u8 Copy_CommandVal){
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	00 d0       	rcall	.+0      	; 0x2bb0 <Lcd_vidSendCommand+0x6>
    2bb0:	0f 92       	push	r0
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    2bba:	6b 83       	std	Y+3, r22	; 0x03
	//RS
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->RS_Pin,DIO_u8_LOW);
    2bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc0:	81 81       	ldd	r24, Z+1	; 0x01
    2bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc6:	92 81       	ldd	r25, Z+2	; 0x02
    2bc8:	69 2f       	mov	r22, r25
    2bca:	40 e0       	ldi	r20, 0x00	; 0
    2bcc:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
	// Send Command
	DIO_enuSetPortValue(Add_strucLcd->DataPortId,Copy_CommandVal);
    2bd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd4:	80 81       	ld	r24, Z
    2bd6:	6b 81       	ldd	r22, Y+3	; 0x03
    2bd8:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_enuSetPortValue>
	Lcd_vidEnablePulse(Add_strucLcd);
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <Lcd_vidEnablePulse>
}
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <Lcd_vidSendData>:

//Send Data
void Lcd_vidSendData(Lcd_tstrucCfg*Add_strucLcd,u8 Copy_DataVal){
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <Lcd_vidSendData+0x6>
    2bf6:	0f 92       	push	r0
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	9a 83       	std	Y+2, r25	; 0x02
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    2c00:	6b 83       	std	Y+3, r22	; 0x03
	//RS
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->RS_Pin,DIO_u8_HIGH);
    2c02:	e9 81       	ldd	r30, Y+1	; 0x01
    2c04:	fa 81       	ldd	r31, Y+2	; 0x02
    2c06:	81 81       	ldd	r24, Z+1	; 0x01
    2c08:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0c:	92 81       	ldd	r25, Z+2	; 0x02
    2c0e:	69 2f       	mov	r22, r25
    2c10:	41 e0       	ldi	r20, 0x01	; 1
    2c12:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
	// Send Command
	DIO_enuSetPortValue(Add_strucLcd->DataPortId,Copy_DataVal);
    2c16:	e9 81       	ldd	r30, Y+1	; 0x01
    2c18:	fa 81       	ldd	r31, Y+2	; 0x02
    2c1a:	80 81       	ld	r24, Z
    2c1c:	6b 81       	ldd	r22, Y+3	; 0x03
    2c1e:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_enuSetPortValue>
	Lcd_vidEnablePulse(Add_strucLcd);
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	9a 81       	ldd	r25, Y+2	; 0x02
    2c26:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <Lcd_vidEnablePulse>
}
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <Lcd_vidInit>:
// Init
void Lcd_vidInit(Lcd_tstrucCfg*Add_strucLcd){
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	ac 97       	sbiw	r28, 0x2c	; 44
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	9c a7       	std	Y+44, r25	; 0x2c
    2c4c:	8b a7       	std	Y+43, r24	; 0x2b
	///////////////////////////////////////////////////////////////////////////////////////////
	DIO_enuSetPinDirection(Add_strucLcd->CtrlPortId,Add_strucLcd->EN_Pin,DIO_u8_OUTPUT);//EN
    2c4e:	eb a5       	ldd	r30, Y+43	; 0x2b
    2c50:	fc a5       	ldd	r31, Y+44	; 0x2c
    2c52:	81 81       	ldd	r24, Z+1	; 0x01
    2c54:	eb a5       	ldd	r30, Y+43	; 0x2b
    2c56:	fc a5       	ldd	r31, Y+44	; 0x2c
    2c58:	94 81       	ldd	r25, Z+4	; 0x04
    2c5a:	69 2f       	mov	r22, r25
    2c5c:	41 e0       	ldi	r20, 0x01	; 1
    2c5e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(Add_strucLcd->CtrlPortId,Add_strucLcd->RS_Pin,DIO_u8_OUTPUT);//RS
    2c62:	eb a5       	ldd	r30, Y+43	; 0x2b
    2c64:	fc a5       	ldd	r31, Y+44	; 0x2c
    2c66:	81 81       	ldd	r24, Z+1	; 0x01
    2c68:	eb a5       	ldd	r30, Y+43	; 0x2b
    2c6a:	fc a5       	ldd	r31, Y+44	; 0x2c
    2c6c:	92 81       	ldd	r25, Z+2	; 0x02
    2c6e:	69 2f       	mov	r22, r25
    2c70:	41 e0       	ldi	r20, 0x01	; 1
    2c72:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(Add_strucLcd->CtrlPortId,Add_strucLcd->RW_Pin,DIO_u8_OUTPUT);//RW
    2c76:	eb a5       	ldd	r30, Y+43	; 0x2b
    2c78:	fc a5       	ldd	r31, Y+44	; 0x2c
    2c7a:	81 81       	ldd	r24, Z+1	; 0x01
    2c7c:	eb a5       	ldd	r30, Y+43	; 0x2b
    2c7e:	fc a5       	ldd	r31, Y+44	; 0x2c
    2c80:	93 81       	ldd	r25, Z+3	; 0x03
    2c82:	69 2f       	mov	r22, r25
    2c84:	41 e0       	ldi	r20, 0x01	; 1
    2c86:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->RW_Pin,DIO_u8_LOW); // always write
    2c8a:	eb a5       	ldd	r30, Y+43	; 0x2b
    2c8c:	fc a5       	ldd	r31, Y+44	; 0x2c
    2c8e:	81 81       	ldd	r24, Z+1	; 0x01
    2c90:	eb a5       	ldd	r30, Y+43	; 0x2b
    2c92:	fc a5       	ldd	r31, Y+44	; 0x2c
    2c94:	93 81       	ldd	r25, Z+3	; 0x03
    2c96:	69 2f       	mov	r22, r25
    2c98:	40 e0       	ldi	r20, 0x00	; 0
    2c9a:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
	DIO_enuSetPortDirection(Add_strucLcd->DataPortId,DIO_u8_PORT_OUTPUT);//DataPort Direction
    2c9e:	eb a5       	ldd	r30, Y+43	; 0x2b
    2ca0:	fc a5       	ldd	r31, Y+44	; 0x2c
    2ca2:	80 81       	ld	r24, Z
    2ca4:	6f ef       	ldi	r22, 0xFF	; 255
    2ca6:	0e 94 67 11 	call	0x22ce	; 0x22ce <DIO_enuSetPortDirection>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a0 ef       	ldi	r26, 0xF0	; 240
    2cb0:	b1 e4       	ldi	r27, 0x41	; 65
    2cb2:	8f a3       	std	Y+39, r24	; 0x27
    2cb4:	98 a7       	std	Y+40, r25	; 0x28
    2cb6:	a9 a7       	std	Y+41, r26	; 0x29
    2cb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cba:	6f a1       	ldd	r22, Y+39	; 0x27
    2cbc:	78 a5       	ldd	r23, Y+40	; 0x28
    2cbe:	89 a5       	ldd	r24, Y+41	; 0x29
    2cc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	4a ef       	ldi	r20, 0xFA	; 250
    2cc8:	54 e4       	ldi	r21, 0x44	; 68
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8b a3       	std	Y+35, r24	; 0x23
    2cd4:	9c a3       	std	Y+36, r25	; 0x24
    2cd6:	ad a3       	std	Y+37, r26	; 0x25
    2cd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cda:	6b a1       	ldd	r22, Y+35	; 0x23
    2cdc:	7c a1       	ldd	r23, Y+36	; 0x24
    2cde:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e8       	ldi	r20, 0x80	; 128
    2ce8:	5f e3       	ldi	r21, 0x3F	; 63
    2cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cee:	88 23       	and	r24, r24
    2cf0:	2c f4       	brge	.+10     	; 0x2cfc <Lcd_vidInit+0xc6>
		__ticks = 1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	9a a3       	std	Y+34, r25	; 0x22
    2cf8:	89 a3       	std	Y+33, r24	; 0x21
    2cfa:	3f c0       	rjmp	.+126    	; 0x2d7a <Lcd_vidInit+0x144>
	else if (__tmp > 65535)
    2cfc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cfe:	7c a1       	ldd	r23, Y+36	; 0x24
    2d00:	8d a1       	ldd	r24, Y+37	; 0x25
    2d02:	9e a1       	ldd	r25, Y+38	; 0x26
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	3f ef       	ldi	r19, 0xFF	; 255
    2d08:	4f e7       	ldi	r20, 0x7F	; 127
    2d0a:	57 e4       	ldi	r21, 0x47	; 71
    2d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d10:	18 16       	cp	r1, r24
    2d12:	4c f5       	brge	.+82     	; 0x2d66 <Lcd_vidInit+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d14:	6f a1       	ldd	r22, Y+39	; 0x27
    2d16:	78 a5       	ldd	r23, Y+40	; 0x28
    2d18:	89 a5       	ldd	r24, Y+41	; 0x29
    2d1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e2       	ldi	r20, 0x20	; 32
    2d22:	51 e4       	ldi	r21, 0x41	; 65
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	9a a3       	std	Y+34, r25	; 0x22
    2d3a:	89 a3       	std	Y+33, r24	; 0x21
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <Lcd_vidInit+0x126>
    2d3e:	88 ec       	ldi	r24, 0xC8	; 200
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	98 a3       	std	Y+32, r25	; 0x20
    2d44:	8f 8f       	std	Y+31, r24	; 0x1f
    2d46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d48:	98 a1       	ldd	r25, Y+32	; 0x20
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <Lcd_vidInit+0x114>
    2d4e:	98 a3       	std	Y+32, r25	; 0x20
    2d50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d52:	89 a1       	ldd	r24, Y+33	; 0x21
    2d54:	9a a1       	ldd	r25, Y+34	; 0x22
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	9a a3       	std	Y+34, r25	; 0x22
    2d5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	69 f7       	brne	.-38     	; 0x2d3e <Lcd_vidInit+0x108>
    2d64:	14 c0       	rjmp	.+40     	; 0x2d8e <Lcd_vidInit+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d66:	6b a1       	ldd	r22, Y+35	; 0x23
    2d68:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	9a a3       	std	Y+34, r25	; 0x22
    2d78:	89 a3       	std	Y+33, r24	; 0x21
    2d7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d80:	8d 8f       	std	Y+29, r24	; 0x1d
    2d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <Lcd_vidInit+0x150>
    2d8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d8c:	8d 8f       	std	Y+29, r24	; 0x1d
	///////////////////////////////////////////////////////////////////////////////////////////
	_delay_ms(30);
	//set
	Lcd_vidSendCommand(Add_strucLcd,0b00111000);
    2d8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d90:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d92:	68 e3       	ldi	r22, 0x38	; 56
    2d94:	0e 94 d5 15 	call	0x2baa	; 0x2baa <Lcd_vidSendCommand>
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	a0 e8       	ldi	r26, 0x80	; 128
    2d9e:	bf e3       	ldi	r27, 0x3F	; 63
    2da0:	89 8f       	std	Y+25, r24	; 0x19
    2da2:	9a 8f       	std	Y+26, r25	; 0x1a
    2da4:	ab 8f       	std	Y+27, r26	; 0x1b
    2da6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da8:	69 8d       	ldd	r22, Y+25	; 0x19
    2daa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	4a ef       	ldi	r20, 0xFA	; 250
    2db6:	54 e4       	ldi	r21, 0x44	; 68
    2db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	8d 8b       	std	Y+21, r24	; 0x15
    2dc2:	9e 8b       	std	Y+22, r25	; 0x16
    2dc4:	af 8b       	std	Y+23, r26	; 0x17
    2dc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dca:	7e 89       	ldd	r23, Y+22	; 0x16
    2dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dce:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e8       	ldi	r20, 0x80	; 128
    2dd6:	5f e3       	ldi	r21, 0x3F	; 63
    2dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ddc:	88 23       	and	r24, r24
    2dde:	2c f4       	brge	.+10     	; 0x2dea <Lcd_vidInit+0x1b4>
		__ticks = 1;
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	9c 8b       	std	Y+20, r25	; 0x14
    2de6:	8b 8b       	std	Y+19, r24	; 0x13
    2de8:	3f c0       	rjmp	.+126    	; 0x2e68 <Lcd_vidInit+0x232>
	else if (__tmp > 65535)
    2dea:	6d 89       	ldd	r22, Y+21	; 0x15
    2dec:	7e 89       	ldd	r23, Y+22	; 0x16
    2dee:	8f 89       	ldd	r24, Y+23	; 0x17
    2df0:	98 8d       	ldd	r25, Y+24	; 0x18
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	3f ef       	ldi	r19, 0xFF	; 255
    2df6:	4f e7       	ldi	r20, 0x7F	; 127
    2df8:	57 e4       	ldi	r21, 0x47	; 71
    2dfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dfe:	18 16       	cp	r1, r24
    2e00:	4c f5       	brge	.+82     	; 0x2e54 <Lcd_vidInit+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e02:	69 8d       	ldd	r22, Y+25	; 0x19
    2e04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e2       	ldi	r20, 0x20	; 32
    2e10:	51 e4       	ldi	r21, 0x41	; 65
    2e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	bc 01       	movw	r22, r24
    2e1c:	cd 01       	movw	r24, r26
    2e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	9c 8b       	std	Y+20, r25	; 0x14
    2e28:	8b 8b       	std	Y+19, r24	; 0x13
    2e2a:	0f c0       	rjmp	.+30     	; 0x2e4a <Lcd_vidInit+0x214>
    2e2c:	88 ec       	ldi	r24, 0xC8	; 200
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	9a 8b       	std	Y+18, r25	; 0x12
    2e32:	89 8b       	std	Y+17, r24	; 0x11
    2e34:	89 89       	ldd	r24, Y+17	; 0x11
    2e36:	9a 89       	ldd	r25, Y+18	; 0x12
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <Lcd_vidInit+0x202>
    2e3c:	9a 8b       	std	Y+18, r25	; 0x12
    2e3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e40:	8b 89       	ldd	r24, Y+19	; 0x13
    2e42:	9c 89       	ldd	r25, Y+20	; 0x14
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	9c 8b       	std	Y+20, r25	; 0x14
    2e48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	69 f7       	brne	.-38     	; 0x2e2c <Lcd_vidInit+0x1f6>
    2e52:	14 c0       	rjmp	.+40     	; 0x2e7c <Lcd_vidInit+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e54:	6d 89       	ldd	r22, Y+21	; 0x15
    2e56:	7e 89       	ldd	r23, Y+22	; 0x16
    2e58:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	9c 8b       	std	Y+20, r25	; 0x14
    2e66:	8b 8b       	std	Y+19, r24	; 0x13
    2e68:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6c:	98 8b       	std	Y+16, r25	; 0x10
    2e6e:	8f 87       	std	Y+15, r24	; 0x0f
    2e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e72:	98 89       	ldd	r25, Y+16	; 0x10
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <Lcd_vidInit+0x23e>
    2e78:	98 8b       	std	Y+16, r25	; 0x10
    2e7a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	// Display On / Off
	Lcd_vidSendCommand(Add_strucLcd,0b00001100);
    2e7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e80:	6c e0       	ldi	r22, 0x0C	; 12
    2e82:	0e 94 d5 15 	call	0x2baa	; 0x2baa <Lcd_vidSendCommand>
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	a0 e8       	ldi	r26, 0x80	; 128
    2e8c:	bf e3       	ldi	r27, 0x3F	; 63
    2e8e:	8b 87       	std	Y+11, r24	; 0x0b
    2e90:	9c 87       	std	Y+12, r25	; 0x0c
    2e92:	ad 87       	std	Y+13, r26	; 0x0d
    2e94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	4a ef       	ldi	r20, 0xFA	; 250
    2ea4:	54 e4       	ldi	r21, 0x44	; 68
    2ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	8f 83       	std	Y+7, r24	; 0x07
    2eb0:	98 87       	std	Y+8, r25	; 0x08
    2eb2:	a9 87       	std	Y+9, r26	; 0x09
    2eb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb8:	78 85       	ldd	r23, Y+8	; 0x08
    2eba:	89 85       	ldd	r24, Y+9	; 0x09
    2ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e8       	ldi	r20, 0x80	; 128
    2ec4:	5f e3       	ldi	r21, 0x3F	; 63
    2ec6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eca:	88 23       	and	r24, r24
    2ecc:	2c f4       	brge	.+10     	; 0x2ed8 <Lcd_vidInit+0x2a2>
		__ticks = 1;
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
    2ed6:	3f c0       	rjmp	.+126    	; 0x2f56 <Lcd_vidInit+0x320>
	else if (__tmp > 65535)
    2ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eda:	78 85       	ldd	r23, Y+8	; 0x08
    2edc:	89 85       	ldd	r24, Y+9	; 0x09
    2ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	3f ef       	ldi	r19, 0xFF	; 255
    2ee4:	4f e7       	ldi	r20, 0x7F	; 127
    2ee6:	57 e4       	ldi	r21, 0x47	; 71
    2ee8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eec:	18 16       	cp	r1, r24
    2eee:	4c f5       	brge	.+82     	; 0x2f42 <Lcd_vidInit+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	40 e2       	ldi	r20, 0x20	; 32
    2efe:	51 e4       	ldi	r21, 0x41	; 65
    2f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	bc 01       	movw	r22, r24
    2f0a:	cd 01       	movw	r24, r26
    2f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	8d 83       	std	Y+5, r24	; 0x05
    2f18:	0f c0       	rjmp	.+30     	; 0x2f38 <Lcd_vidInit+0x302>
    2f1a:	88 ec       	ldi	r24, 0xC8	; 200
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	9c 83       	std	Y+4, r25	; 0x04
    2f20:	8b 83       	std	Y+3, r24	; 0x03
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <Lcd_vidInit+0x2f0>
    2f2a:	9c 83       	std	Y+4, r25	; 0x04
    2f2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f30:	9e 81       	ldd	r25, Y+6	; 0x06
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	9e 83       	std	Y+6, r25	; 0x06
    2f36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	69 f7       	brne	.-38     	; 0x2f1a <Lcd_vidInit+0x2e4>
    2f40:	14 c0       	rjmp	.+40     	; 0x2f6a <Lcd_vidInit+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f42:	6f 81       	ldd	r22, Y+7	; 0x07
    2f44:	78 85       	ldd	r23, Y+8	; 0x08
    2f46:	89 85       	ldd	r24, Y+9	; 0x09
    2f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	9e 83       	std	Y+6, r25	; 0x06
    2f54:	8d 83       	std	Y+5, r24	; 0x05
    2f56:	8d 81       	ldd	r24, Y+5	; 0x05
    2f58:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5a:	9a 83       	std	Y+2, r25	; 0x02
    2f5c:	89 83       	std	Y+1, r24	; 0x01
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	9a 81       	ldd	r25, Y+2	; 0x02
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	f1 f7       	brne	.-4      	; 0x2f62 <Lcd_vidInit+0x32c>
    2f66:	9a 83       	std	Y+2, r25	; 0x02
    2f68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	Lcd_vidSendCommand(Add_strucLcd,0b00000001);
    2f6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f6e:	61 e0       	ldi	r22, 0x01	; 1
    2f70:	0e 94 d5 15 	call	0x2baa	; 0x2baa <Lcd_vidSendCommand>

}
    2f74:	ac 96       	adiw	r28, 0x2c	; 44
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	cf 91       	pop	r28
    2f82:	df 91       	pop	r29
    2f84:	08 95       	ret

00002f86 <Lcd_CLR>:

void Lcd_CLR(Lcd_tstrucCfg*Add_strucLcd){
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	00 d0       	rcall	.+0      	; 0x2f8c <Lcd_CLR+0x6>
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	9a 83       	std	Y+2, r25	; 0x02
    2f92:	89 83       	std	Y+1, r24	; 0x01
	Lcd_vidSendCommand(Add_strucLcd,0b00000001);
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	9a 81       	ldd	r25, Y+2	; 0x02
    2f98:	61 e0       	ldi	r22, 0x01	; 1
    2f9a:	0e 94 d5 15 	call	0x2baa	; 0x2baa <Lcd_vidSendCommand>
}
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	08 95       	ret

00002fa8 <Lcd_WriteLetter>:

void Lcd_WriteLetter(Lcd_tstrucCfg*Add_strucLcd,u8*Add_u8LcdLetter){
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	00 d0       	rcall	.+0      	; 0x2fae <Lcd_WriteLetter+0x6>
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <Lcd_WriteLetter+0x8>
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    2fb4:	9a 83       	std	Y+2, r25	; 0x02
    2fb6:	89 83       	std	Y+1, r24	; 0x01
    2fb8:	7c 83       	std	Y+4, r23	; 0x04
    2fba:	6b 83       	std	Y+3, r22	; 0x03
	Lcd_vidSendData(Add_strucLcd,*Add_u8LcdLetter);
    2fbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc0:	20 81       	ld	r18, Z
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc6:	62 2f       	mov	r22, r18
    2fc8:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Lcd_vidSendData>
}
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	08 95       	ret

00002fda <Lcd_WriteString>:

void Lcd_WriteString(Lcd_tstrucCfg*Add_strucLcd,u8*Add_u8LcdString){
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <Lcd_WriteString+0x6>
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <Lcd_WriteString+0x8>
    2fe2:	0f 92       	push	r0
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	9b 83       	std	Y+3, r25	; 0x03
    2fea:	8a 83       	std	Y+2, r24	; 0x02
    2fec:	7d 83       	std	Y+5, r23	; 0x05
    2fee:	6c 83       	std	Y+4, r22	; 0x04
	for(u8 StringCounter=0;Add_u8LcdString[StringCounter]!='\0';StringCounter++){
    2ff0:	19 82       	std	Y+1, r1	; 0x01
    2ff2:	11 c0       	rjmp	.+34     	; 0x3016 <Lcd_WriteString+0x3c>
		Lcd_vidSendData(Add_strucLcd,Add_u8LcdString[StringCounter]);
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	28 2f       	mov	r18, r24
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffe:	fc 01       	movw	r30, r24
    3000:	e2 0f       	add	r30, r18
    3002:	f3 1f       	adc	r31, r19
    3004:	20 81       	ld	r18, Z
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	9b 81       	ldd	r25, Y+3	; 0x03
    300a:	62 2f       	mov	r22, r18
    300c:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Lcd_vidSendData>
void Lcd_WriteLetter(Lcd_tstrucCfg*Add_strucLcd,u8*Add_u8LcdLetter){
	Lcd_vidSendData(Add_strucLcd,*Add_u8LcdLetter);
}

void Lcd_WriteString(Lcd_tstrucCfg*Add_strucLcd,u8*Add_u8LcdString){
	for(u8 StringCounter=0;Add_u8LcdString[StringCounter]!='\0';StringCounter++){
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	8f 5f       	subi	r24, 0xFF	; 255
    3014:	89 83       	std	Y+1, r24	; 0x01
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	8c 81       	ldd	r24, Y+4	; 0x04
    301e:	9d 81       	ldd	r25, Y+5	; 0x05
    3020:	fc 01       	movw	r30, r24
    3022:	e2 0f       	add	r30, r18
    3024:	f3 1f       	adc	r31, r19
    3026:	80 81       	ld	r24, Z
    3028:	88 23       	and	r24, r24
    302a:	21 f7       	brne	.-56     	; 0x2ff4 <Lcd_WriteString+0x1a>
		Lcd_vidSendData(Add_strucLcd,Add_u8LcdString[StringCounter]);
	}
}
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <Lcd_WriteNumber>:


void Lcd_WriteNumber(Lcd_tstrucCfg*Add_strucLcd,u8 Copy_u8LcdNumber){
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	2e 97       	sbiw	r28, 0x0e	; 14
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    3050:	9d 87       	std	Y+13, r25	; 0x0d
    3052:	8c 87       	std	Y+12, r24	; 0x0c
    3054:	6e 87       	std	Y+14, r22	; 0x0e
	if(Copy_u8LcdNumber<10)
    3056:	8e 85       	ldd	r24, Y+14	; 0x0e
    3058:	8a 30       	cpi	r24, 0x0A	; 10
    305a:	48 f4       	brcc	.+18     	; 0x306e <Lcd_WriteNumber+0x32>
		Lcd_vidSendData(Add_strucLcd,Copy_u8LcdNumber+48);
    305c:	8e 85       	ldd	r24, Y+14	; 0x0e
    305e:	28 2f       	mov	r18, r24
    3060:	20 5d       	subi	r18, 0xD0	; 208
    3062:	8c 85       	ldd	r24, Y+12	; 0x0c
    3064:	9d 85       	ldd	r25, Y+13	; 0x0d
    3066:	62 2f       	mov	r22, r18
    3068:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Lcd_vidSendData>
    306c:	49 c0       	rjmp	.+146    	; 0x3100 <Lcd_WriteNumber+0xc4>
	else{
		u8 Lcd_LargeNumbers[10];
		u8 count=9;
    306e:	89 e0       	ldi	r24, 0x09	; 9
    3070:	89 83       	std	Y+1, r24	; 0x01
		do{
			Lcd_LargeNumbers[count--]=Copy_u8LcdNumber%10;
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	48 2f       	mov	r20, r24
    3076:	50 e0       	ldi	r21, 0x00	; 0
    3078:	8e 85       	ldd	r24, Y+14	; 0x0e
    307a:	9a e0       	ldi	r25, 0x0A	; 10
    307c:	69 2f       	mov	r22, r25
    307e:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__udivmodqi4>
    3082:	89 2f       	mov	r24, r25
    3084:	28 2f       	mov	r18, r24
    3086:	ce 01       	movw	r24, r28
    3088:	02 96       	adiw	r24, 0x02	; 2
    308a:	fc 01       	movw	r30, r24
    308c:	e4 0f       	add	r30, r20
    308e:	f5 1f       	adc	r31, r21
    3090:	20 83       	st	Z, r18
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	81 50       	subi	r24, 0x01	; 1
    3096:	89 83       	std	Y+1, r24	; 0x01
			Copy_u8LcdNumber/=10;
    3098:	8e 85       	ldd	r24, Y+14	; 0x0e
    309a:	9a e0       	ldi	r25, 0x0A	; 10
    309c:	69 2f       	mov	r22, r25
    309e:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__udivmodqi4>
    30a2:	8e 87       	std	Y+14, r24	; 0x0e

		}while(Copy_u8LcdNumber>1);
    30a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    30a6:	82 30       	cpi	r24, 0x02	; 2
    30a8:	20 f7       	brcc	.-56     	; 0x3072 <Lcd_WriteNumber+0x36>
		if(Lcd_LargeNumbers[count+1]==0)
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	88 2f       	mov	r24, r24
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	9c 01       	movw	r18, r24
    30b2:	2f 5f       	subi	r18, 0xFF	; 255
    30b4:	3f 4f       	sbci	r19, 0xFF	; 255
    30b6:	ce 01       	movw	r24, r28
    30b8:	02 96       	adiw	r24, 0x02	; 2
    30ba:	fc 01       	movw	r30, r24
    30bc:	e2 0f       	add	r30, r18
    30be:	f3 1f       	adc	r31, r19
    30c0:	80 81       	ld	r24, Z
    30c2:	88 23       	and	r24, r24
    30c4:	19 f4       	brne	.+6      	; 0x30cc <Lcd_WriteNumber+0x90>
			count++;
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	8f 5f       	subi	r24, 0xFF	; 255
    30ca:	89 83       	std	Y+1, r24	; 0x01
		for(++count;count<10;count++){
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	8f 5f       	subi	r24, 0xFF	; 255
    30d0:	89 83       	std	Y+1, r24	; 0x01
    30d2:	13 c0       	rjmp	.+38     	; 0x30fa <Lcd_WriteNumber+0xbe>
			Lcd_vidSendData(Add_strucLcd,Lcd_LargeNumbers[count]+48);
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	ce 01       	movw	r24, r28
    30dc:	02 96       	adiw	r24, 0x02	; 2
    30de:	fc 01       	movw	r30, r24
    30e0:	e2 0f       	add	r30, r18
    30e2:	f3 1f       	adc	r31, r19
    30e4:	80 81       	ld	r24, Z
    30e6:	28 2f       	mov	r18, r24
    30e8:	20 5d       	subi	r18, 0xD0	; 208
    30ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    30ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    30ee:	62 2f       	mov	r22, r18
    30f0:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <Lcd_vidSendData>
			Copy_u8LcdNumber/=10;

		}while(Copy_u8LcdNumber>1);
		if(Lcd_LargeNumbers[count+1]==0)
			count++;
		for(++count;count<10;count++){
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
    30f6:	8f 5f       	subi	r24, 0xFF	; 255
    30f8:	89 83       	std	Y+1, r24	; 0x01
    30fa:	89 81       	ldd	r24, Y+1	; 0x01
    30fc:	8a 30       	cpi	r24, 0x0A	; 10
    30fe:	50 f3       	brcs	.-44     	; 0x30d4 <Lcd_WriteNumber+0x98>
			Lcd_vidSendData(Add_strucLcd,Lcd_LargeNumbers[count]+48);
		}
	}
}
    3100:	2e 96       	adiw	r28, 0x0e	; 14
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <Lcd_GotoPosition>:
//Lcd_WriteLargNumber
void Lcd_GotoPosition(Lcd_tstrucCfg*Add_strucLcd,u8 Copy_u8Line,u8 Copy_u8Digit){
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	00 d0       	rcall	.+0      	; 0x3118 <Lcd_GotoPosition+0x6>
    3118:	00 d0       	rcall	.+0      	; 0x311a <Lcd_GotoPosition+0x8>
    311a:	00 d0       	rcall	.+0      	; 0x311c <Lcd_GotoPosition+0xa>
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	9a 83       	std	Y+2, r25	; 0x02
    3122:	89 83       	std	Y+1, r24	; 0x01
    3124:	6b 83       	std	Y+3, r22	; 0x03
    3126:	4c 83       	std	Y+4, r20	; 0x04
	switch(Copy_u8Line){
    3128:	8b 81       	ldd	r24, Y+3	; 0x03
    312a:	28 2f       	mov	r18, r24
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	3e 83       	std	Y+6, r19	; 0x06
    3130:	2d 83       	std	Y+5, r18	; 0x05
    3132:	8d 81       	ldd	r24, Y+5	; 0x05
    3134:	9e 81       	ldd	r25, Y+6	; 0x06
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	31 f0       	breq	.+12     	; 0x3146 <Lcd_GotoPosition+0x34>
    313a:	2d 81       	ldd	r18, Y+5	; 0x05
    313c:	3e 81       	ldd	r19, Y+6	; 0x06
    313e:	21 30       	cpi	r18, 0x01	; 1
    3140:	31 05       	cpc	r19, r1
    3142:	51 f0       	breq	.+20     	; 0x3158 <Lcd_GotoPosition+0x46>
    3144:	11 c0       	rjmp	.+34     	; 0x3168 <Lcd_GotoPosition+0x56>
	case 0:Lcd_vidSendCommand(Add_strucLcd,LCD_LINE1_COMMAND+Copy_u8Digit);break;
    3146:	8c 81       	ldd	r24, Y+4	; 0x04
    3148:	28 2f       	mov	r18, r24
    314a:	20 58       	subi	r18, 0x80	; 128
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	9a 81       	ldd	r25, Y+2	; 0x02
    3150:	62 2f       	mov	r22, r18
    3152:	0e 94 d5 15 	call	0x2baa	; 0x2baa <Lcd_vidSendCommand>
    3156:	08 c0       	rjmp	.+16     	; 0x3168 <Lcd_GotoPosition+0x56>
	case 1:Lcd_vidSendCommand(Add_strucLcd,LCD_LINE2_COMMAND+Copy_u8Digit);break;
    3158:	8c 81       	ldd	r24, Y+4	; 0x04
    315a:	28 2f       	mov	r18, r24
    315c:	20 54       	subi	r18, 0x40	; 64
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	9a 81       	ldd	r25, Y+2	; 0x02
    3162:	62 2f       	mov	r22, r18
    3164:	0e 94 d5 15 	call	0x2baa	; 0x2baa <Lcd_vidSendCommand>
	}
}
    3168:	26 96       	adiw	r28, 0x06	; 6
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	cf 91       	pop	r28
    3176:	df 91       	pop	r29
    3178:	08 95       	ret

0000317a <Keypad_vidInit>:
		{'c',0,'=','+'}
};
// R1 --> pin0
// C1 --> pin4

void Keypad_vidInit(Keypad_tstrucCfg*Add_strucKeypad){
    317a:	df 93       	push	r29
    317c:	cf 93       	push	r28
    317e:	00 d0       	rcall	.+0      	; 0x3180 <Keypad_vidInit+0x6>
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62
    3184:	9a 83       	std	Y+2, r25	; 0x02
    3186:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPortDirection(Add_strucKeypad->DataPortId,0x0f); // 4 Input 4 OutPut
    3188:	e9 81       	ldd	r30, Y+1	; 0x01
    318a:	fa 81       	ldd	r31, Y+2	; 0x02
    318c:	80 81       	ld	r24, Z
    318e:	6f e0       	ldi	r22, 0x0F	; 15
    3190:	0e 94 67 11 	call	0x22ce	; 0x22ce <DIO_enuSetPortDirection>
	DIO_enuSetPortValue(Add_strucKeypad->DataPortId,DIO_u8_PORT_OUTPUT);
    3194:	e9 81       	ldd	r30, Y+1	; 0x01
    3196:	fa 81       	ldd	r31, Y+2	; 0x02
    3198:	80 81       	ld	r24, Z
    319a:	6f ef       	ldi	r22, 0xFF	; 255
    319c:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_enuSetPortValue>
}
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	cf 91       	pop	r28
    31a6:	df 91       	pop	r29
    31a8:	08 95       	ret

000031aa <Keypad_u8GetPressedKey>:
u8 Keypad_u8GetPressedKey(Keypad_tstrucCfg*Add_strucKeypad){
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
    31b2:	27 97       	sbiw	r28, 0x07	; 7
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	de bf       	out	0x3e, r29	; 62
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	cd bf       	out	0x3d, r28	; 61
    31be:	9e 83       	std	Y+6, r25	; 0x06
    31c0:	8d 83       	std	Y+5, r24	; 0x05
	u8 Keypad_RowResult=1;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	8c 83       	std	Y+4, r24	; 0x04
	u8 Keypad_Result=Keypad_NotPressed;
    31c6:	8f ef       	ldi	r24, 0xFF	; 255
    31c8:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 Keypad_u8Col=0;Keypad_u8Col<4;Keypad_u8Col++){
    31ca:	1a 82       	std	Y+2, r1	; 0x02
    31cc:	57 c0       	rjmp	.+174    	; 0x327c <Keypad_u8GetPressedKey+0xd2>
		//Activate each col (=0)
		DIO_enuSetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Col,DIO_u8_LOW);
    31ce:	ed 81       	ldd	r30, Y+5	; 0x05
    31d0:	fe 81       	ldd	r31, Y+6	; 0x06
    31d2:	80 81       	ld	r24, Z
    31d4:	6a 81       	ldd	r22, Y+2	; 0x02
    31d6:	40 e0       	ldi	r20, 0x00	; 0
    31d8:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>

		for(u8 Keypad_u8Row=0;Keypad_u8Row<4;Keypad_u8Row++){
    31dc:	19 82       	std	Y+1, r1	; 0x01
    31de:	40 c0       	rjmp	.+128    	; 0x3260 <Keypad_u8GetPressedKey+0xb6>

//			Keypad_RowResult=GET_BIT(PIND_Register,Keypad_u8Row+4);
			DIO_u8GetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Row+4,&Keypad_RowResult);
    31e0:	ed 81       	ldd	r30, Y+5	; 0x05
    31e2:	fe 81       	ldd	r31, Y+6	; 0x06
    31e4:	40 81       	ld	r20, Z
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	98 2f       	mov	r25, r24
    31ea:	9c 5f       	subi	r25, 0xFC	; 252
    31ec:	9e 01       	movw	r18, r28
    31ee:	2c 5f       	subi	r18, 0xFC	; 252
    31f0:	3f 4f       	sbci	r19, 0xFF	; 255
    31f2:	84 2f       	mov	r24, r20
    31f4:	69 2f       	mov	r22, r25
    31f6:	a9 01       	movw	r20, r18
    31f8:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <DIO_u8GetPinValue>

			if(Keypad_RowResult==Keypad_Pressed){
    31fc:	8c 81       	ldd	r24, Y+4	; 0x04
    31fe:	88 23       	and	r24, r24
    3200:	61 f5       	brne	.+88     	; 0x325a <Keypad_u8GetPressedKey+0xb0>
    3202:	0e c0       	rjmp	.+28     	; 0x3220 <Keypad_u8GetPressedKey+0x76>
				while(Keypad_RowResult==Keypad_Pressed){
					DIO_u8GetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Row+4,&Keypad_RowResult);
    3204:	ed 81       	ldd	r30, Y+5	; 0x05
    3206:	fe 81       	ldd	r31, Y+6	; 0x06
    3208:	40 81       	ld	r20, Z
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	98 2f       	mov	r25, r24
    320e:	9c 5f       	subi	r25, 0xFC	; 252
    3210:	9e 01       	movw	r18, r28
    3212:	2c 5f       	subi	r18, 0xFC	; 252
    3214:	3f 4f       	sbci	r19, 0xFF	; 255
    3216:	84 2f       	mov	r24, r20
    3218:	69 2f       	mov	r22, r25
    321a:	a9 01       	movw	r20, r18
    321c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <DIO_u8GetPinValue>

//			Keypad_RowResult=GET_BIT(PIND_Register,Keypad_u8Row+4);
			DIO_u8GetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Row+4,&Keypad_RowResult);

			if(Keypad_RowResult==Keypad_Pressed){
				while(Keypad_RowResult==Keypad_Pressed){
    3220:	8c 81       	ldd	r24, Y+4	; 0x04
    3222:	88 23       	and	r24, r24
    3224:	79 f3       	breq	.-34     	; 0x3204 <Keypad_u8GetPressedKey+0x5a>
					DIO_u8GetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Row+4,&Keypad_RowResult);
				}
				DIO_enuSetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Col,DIO_u8_HIGH);
    3226:	ed 81       	ldd	r30, Y+5	; 0x05
    3228:	fe 81       	ldd	r31, Y+6	; 0x06
    322a:	80 81       	ld	r24, Z
    322c:	6a 81       	ldd	r22, Y+2	; 0x02
    322e:	41 e0       	ldi	r20, 0x01	; 1
    3230:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
				return Keypad_arrCfg [Keypad_u8Col][Keypad_u8Row];
    3234:	8a 81       	ldd	r24, Y+2	; 0x02
    3236:	48 2f       	mov	r20, r24
    3238:	50 e0       	ldi	r21, 0x00	; 0
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	28 2f       	mov	r18, r24
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	ca 01       	movw	r24, r20
    3242:	88 0f       	add	r24, r24
    3244:	99 1f       	adc	r25, r25
    3246:	88 0f       	add	r24, r24
    3248:	99 1f       	adc	r25, r25
    324a:	82 0f       	add	r24, r18
    324c:	93 1f       	adc	r25, r19
    324e:	fc 01       	movw	r30, r24
    3250:	e8 59       	subi	r30, 0x98	; 152
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	80 81       	ld	r24, Z
    3256:	8f 83       	std	Y+7, r24	; 0x07
    3258:	17 c0       	rjmp	.+46     	; 0x3288 <Keypad_u8GetPressedKey+0xde>
	u8 Keypad_Result=Keypad_NotPressed;
	for(u8 Keypad_u8Col=0;Keypad_u8Col<4;Keypad_u8Col++){
		//Activate each col (=0)
		DIO_enuSetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Col,DIO_u8_LOW);

		for(u8 Keypad_u8Row=0;Keypad_u8Row<4;Keypad_u8Row++){
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	8f 5f       	subi	r24, 0xFF	; 255
    325e:	89 83       	std	Y+1, r24	; 0x01
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	84 30       	cpi	r24, 0x04	; 4
    3264:	08 f4       	brcc	.+2      	; 0x3268 <Keypad_u8GetPressedKey+0xbe>
    3266:	bc cf       	rjmp	.-136    	; 0x31e0 <Keypad_u8GetPressedKey+0x36>
				_delay_ms(10);
			}

		}

		DIO_enuSetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Col,DIO_u8_HIGH);
    3268:	ed 81       	ldd	r30, Y+5	; 0x05
    326a:	fe 81       	ldd	r31, Y+6	; 0x06
    326c:	80 81       	ld	r24, Z
    326e:	6a 81       	ldd	r22, Y+2	; 0x02
    3270:	41 e0       	ldi	r20, 0x01	; 1
    3272:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
	DIO_enuSetPortValue(Add_strucKeypad->DataPortId,DIO_u8_PORT_OUTPUT);
}
u8 Keypad_u8GetPressedKey(Keypad_tstrucCfg*Add_strucKeypad){
	u8 Keypad_RowResult=1;
	u8 Keypad_Result=Keypad_NotPressed;
	for(u8 Keypad_u8Col=0;Keypad_u8Col<4;Keypad_u8Col++){
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	8f 5f       	subi	r24, 0xFF	; 255
    327a:	8a 83       	std	Y+2, r24	; 0x02
    327c:	8a 81       	ldd	r24, Y+2	; 0x02
    327e:	84 30       	cpi	r24, 0x04	; 4
    3280:	08 f4       	brcc	.+2      	; 0x3284 <Keypad_u8GetPressedKey+0xda>
    3282:	a5 cf       	rjmp	.-182    	; 0x31ce <Keypad_u8GetPressedKey+0x24>
		}

		DIO_enuSetPinValue(Add_strucKeypad->DataPortId,Keypad_u8Col,DIO_u8_HIGH);
	}

	return Keypad_Result;
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	8f 83       	std	Y+7, r24	; 0x07
    3288:	8f 81       	ldd	r24, Y+7	; 0x07
}
    328a:	27 96       	adiw	r28, 0x07	; 7
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	08 95       	ret

0000329c <Button_vidButtonInit>:
//void __vector_2 (void){
//	_delay_ms(100);
////		TGL_BIT(PORTD_Register,3);
////		TGL_BIT(PORTD_Register,3);
//}
void Button_vidButtonInit(Button_tstrucCfg*Add_structButton){
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	00 d0       	rcall	.+0      	; 0x32a2 <Button_vidButtonInit+0x6>
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
    32a6:	9a 83       	std	Y+2, r25	; 0x02
    32a8:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinDirection(Add_structButton->Button_NestStruct.Port,Add_structButton->Pin,DIO_u8_INPUT);
    32aa:	e9 81       	ldd	r30, Y+1	; 0x01
    32ac:	fa 81       	ldd	r31, Y+2	; 0x02
    32ae:	81 81       	ldd	r24, Z+1	; 0x01
    32b0:	83 70       	andi	r24, 0x03	; 3
    32b2:	e9 81       	ldd	r30, Y+1	; 0x01
    32b4:	fa 81       	ldd	r31, Y+2	; 0x02
    32b6:	90 81       	ld	r25, Z
    32b8:	69 2f       	mov	r22, r25
    32ba:	40 e0       	ldi	r20, 0x00	; 0
    32bc:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(Add_structButton->Button_NestStruct.Port,Add_structButton->Pin,DIO_u8_HIGH);
    32c0:	e9 81       	ldd	r30, Y+1	; 0x01
    32c2:	fa 81       	ldd	r31, Y+2	; 0x02
    32c4:	81 81       	ldd	r24, Z+1	; 0x01
    32c6:	83 70       	andi	r24, 0x03	; 3
    32c8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ca:	fa 81       	ldd	r31, Y+2	; 0x02
    32cc:	90 81       	ld	r25, Z
    32ce:	69 2f       	mov	r22, r25
    32d0:	41 e0       	ldi	r20, 0x01	; 1
    32d2:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_enuSetPinValue>
//			.IntMode=EXTINT_LOGICAL_CHANGE,
//			.IntNo=EXTINT_INT1
//		};
//	EXTINT_voidEnable(&INT0);
//	EXTINT_voidEnable(&INT1);
}
    32d6:	0f 90       	pop	r0
    32d8:	0f 90       	pop	r0
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <Button_u8ButtonRead>:


u8 Button_u8ButtonRead(Button_tstrucCfg*Add_structButton){
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <Button_u8ButtonRead+0x6>
    32e6:	00 d0       	rcall	.+0      	; 0x32e8 <Button_u8ButtonRead+0x8>
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	9c 83       	std	Y+4, r25	; 0x04
    32ee:	8b 83       	std	Y+3, r24	; 0x03
	u8 ButtonRead;
	for(u8 Button_u8ButtonDebouncing=0;Button_u8ButtonDebouncing<=150;Button_u8ButtonDebouncing++){
    32f0:	19 82       	std	Y+1, r1	; 0x01
    32f2:	15 c0       	rjmp	.+42     	; 0x331e <Button_u8ButtonRead+0x3e>
	DIO_u8GetPinValue(Add_structButton->Button_NestStruct.Port,Add_structButton->Pin,&ButtonRead);
    32f4:	eb 81       	ldd	r30, Y+3	; 0x03
    32f6:	fc 81       	ldd	r31, Y+4	; 0x04
    32f8:	81 81       	ldd	r24, Z+1	; 0x01
    32fa:	83 70       	andi	r24, 0x03	; 3
    32fc:	eb 81       	ldd	r30, Y+3	; 0x03
    32fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3300:	90 81       	ld	r25, Z
    3302:	9e 01       	movw	r18, r28
    3304:	2e 5f       	subi	r18, 0xFE	; 254
    3306:	3f 4f       	sbci	r19, 0xFF	; 255
    3308:	69 2f       	mov	r22, r25
    330a:	a9 01       	movw	r20, r18
    330c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <DIO_u8GetPinValue>
	if(ButtonRead==Button_NotPressed)
    3310:	8a 81       	ldd	r24, Y+2	; 0x02
    3312:	81 30       	cpi	r24, 0x01	; 1
    3314:	09 f4       	brne	.+2      	; 0x3318 <Button_u8ButtonRead+0x38>
		Button_u8ButtonDebouncing=0;
    3316:	19 82       	std	Y+1, r1	; 0x01
}


u8 Button_u8ButtonRead(Button_tstrucCfg*Add_structButton){
	u8 ButtonRead;
	for(u8 Button_u8ButtonDebouncing=0;Button_u8ButtonDebouncing<=150;Button_u8ButtonDebouncing++){
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	8f 5f       	subi	r24, 0xFF	; 255
    331c:	89 83       	std	Y+1, r24	; 0x01
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	87 39       	cpi	r24, 0x97	; 151
    3322:	40 f3       	brcs	.-48     	; 0x32f4 <Button_u8ButtonRead+0x14>
	DIO_u8GetPinValue(Add_structButton->Button_NestStruct.Port,Add_structButton->Pin,&ButtonRead);
	if(ButtonRead==Button_NotPressed)
		Button_u8ButtonDebouncing=0;
	}
	return ButtonRead;
    3324:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	cf 91       	pop	r28
    3330:	df 91       	pop	r29
    3332:	08 95       	ret

00003334 <main>:
//}
//}

////////////////////////////////////////////////////////
// UART DRIVER APP
int main(){
    3334:	df 93       	push	r29
    3336:	cf 93       	push	r28
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	2a 97       	sbiw	r28, 0x0a	; 10
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
	Led_tCfg Led1={
		.Pin=DIO_u8_PIN0,
		.Led_NestStruct.Port=DIO_u8_PORTA,
		.Led_NestStruct.Active_Status=Led_Active_High,
		.Led_NestStruct.Current_Status=Led_Active_High_Low,
	};
    3348:	1a 82       	std	Y+2, r1	; 0x02
    334a:	8b 81       	ldd	r24, Y+3	; 0x03
    334c:	8c 7f       	andi	r24, 0xFC	; 252
    334e:	8b 83       	std	Y+3, r24	; 0x03
    3350:	8b 81       	ldd	r24, Y+3	; 0x03
    3352:	84 60       	ori	r24, 0x04	; 4
    3354:	8b 83       	std	Y+3, r24	; 0x03
    3356:	8b 81       	ldd	r24, Y+3	; 0x03
    3358:	87 7f       	andi	r24, 0xF7	; 247
    335a:	8b 83       	std	Y+3, r24	; 0x03
			.UART_u8CharSize=UART_CHARACTER_SIZE_8_BIT,
			.UART_u8Parity=UART_PARITY_DISABLED,
			.UART_u8Mode=UART_MODE_ASYNCHRONOUS,
			.UART_u8StopBit=UART_STOP_BIT_SELECT_1_BIT,
			.UART_u8EnableTXorRX=UART_ENABLE_TX_RX,
	};
    335c:	87 e0       	ldi	r24, 0x07	; 7
    335e:	fe 01       	movw	r30, r28
    3360:	34 96       	adiw	r30, 0x04	; 4
    3362:	df 01       	movw	r26, r30
    3364:	98 2f       	mov	r25, r24
    3366:	1d 92       	st	X+, r1
    3368:	9a 95       	dec	r25
    336a:	e9 f7       	brne	.-6      	; 0x3366 <main+0x32>
    336c:	80 e8       	ldi	r24, 0x80	; 128
    336e:	8c 83       	std	Y+4, r24	; 0x04
    3370:	80 e8       	ldi	r24, 0x80	; 128
    3372:	8d 83       	std	Y+5, r24	; 0x05
    3374:	80 e8       	ldi	r24, 0x80	; 128
    3376:	8e 83       	std	Y+6, r24	; 0x06
    3378:	86 e8       	ldi	r24, 0x86	; 134
    337a:	8f 83       	std	Y+7, r24	; 0x07
    337c:	83 e3       	ldi	r24, 0x33	; 51
    337e:	89 87       	std	Y+9, r24	; 0x09
    3380:	88 e1       	ldi	r24, 0x18	; 24
    3382:	8a 87       	std	Y+10, r24	; 0x0a
Led_vidLedInit(&Led1);
    3384:	ce 01       	movw	r24, r28
    3386:	02 96       	adiw	r24, 0x02	; 2
    3388:	0e 94 3d 14 	call	0x287a	; 0x287a <Led_vidLedInit>
UART_voidInit(&uart);
    338c:	ce 01       	movw	r24, r28
    338e:	04 96       	adiw	r24, 0x04	; 4
    3390:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_voidInit>
u8 Loc_u8UARTReturnData;
while(1){
	Loc_u8UARTReturnData = UART_u8GetChar();
    3394:	0e 94 7e 07 	call	0xefc	; 0xefc <UART_u8GetChar>
    3398:	89 83       	std	Y+1, r24	; 0x01
	if(Loc_u8UARTReturnData=='1')
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	81 33       	cpi	r24, 0x31	; 49
    339e:	21 f4       	brne	.+8      	; 0x33a8 <main+0x74>
		Led_vidToggle(&Led1);
    33a0:	ce 01       	movw	r24, r28
    33a2:	02 96       	adiw	r24, 0x02	; 2
    33a4:	0e 94 c6 14 	call	0x298c	; 0x298c <Led_vidToggle>
	if(Loc_u8UARTReturnData=='2')
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	82 33       	cpi	r24, 0x32	; 50
    33ac:	99 f7       	brne	.-26     	; 0x3394 <main+0x60>
		Led_vidToggle(&Led1);
    33ae:	ce 01       	movw	r24, r28
    33b0:	02 96       	adiw	r24, 0x02	; 2
    33b2:	0e 94 c6 14 	call	0x298c	; 0x298c <Led_vidToggle>
    33b6:	ee cf       	rjmp	.-36     	; 0x3394 <main+0x60>

000033b8 <__udivmodqi4>:
    33b8:	99 1b       	sub	r25, r25
    33ba:	79 e0       	ldi	r23, 0x09	; 9
    33bc:	04 c0       	rjmp	.+8      	; 0x33c6 <__udivmodqi4_ep>

000033be <__udivmodqi4_loop>:
    33be:	99 1f       	adc	r25, r25
    33c0:	96 17       	cp	r25, r22
    33c2:	08 f0       	brcs	.+2      	; 0x33c6 <__udivmodqi4_ep>
    33c4:	96 1b       	sub	r25, r22

000033c6 <__udivmodqi4_ep>:
    33c6:	88 1f       	adc	r24, r24
    33c8:	7a 95       	dec	r23
    33ca:	c9 f7       	brne	.-14     	; 0x33be <__udivmodqi4_loop>
    33cc:	80 95       	com	r24
    33ce:	08 95       	ret

000033d0 <__prologue_saves__>:
    33d0:	2f 92       	push	r2
    33d2:	3f 92       	push	r3
    33d4:	4f 92       	push	r4
    33d6:	5f 92       	push	r5
    33d8:	6f 92       	push	r6
    33da:	7f 92       	push	r7
    33dc:	8f 92       	push	r8
    33de:	9f 92       	push	r9
    33e0:	af 92       	push	r10
    33e2:	bf 92       	push	r11
    33e4:	cf 92       	push	r12
    33e6:	df 92       	push	r13
    33e8:	ef 92       	push	r14
    33ea:	ff 92       	push	r15
    33ec:	0f 93       	push	r16
    33ee:	1f 93       	push	r17
    33f0:	cf 93       	push	r28
    33f2:	df 93       	push	r29
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
    33f8:	ca 1b       	sub	r28, r26
    33fa:	db 0b       	sbc	r29, r27
    33fc:	0f b6       	in	r0, 0x3f	; 63
    33fe:	f8 94       	cli
    3400:	de bf       	out	0x3e, r29	; 62
    3402:	0f be       	out	0x3f, r0	; 63
    3404:	cd bf       	out	0x3d, r28	; 61
    3406:	09 94       	ijmp

00003408 <__epilogue_restores__>:
    3408:	2a 88       	ldd	r2, Y+18	; 0x12
    340a:	39 88       	ldd	r3, Y+17	; 0x11
    340c:	48 88       	ldd	r4, Y+16	; 0x10
    340e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3410:	6e 84       	ldd	r6, Y+14	; 0x0e
    3412:	7d 84       	ldd	r7, Y+13	; 0x0d
    3414:	8c 84       	ldd	r8, Y+12	; 0x0c
    3416:	9b 84       	ldd	r9, Y+11	; 0x0b
    3418:	aa 84       	ldd	r10, Y+10	; 0x0a
    341a:	b9 84       	ldd	r11, Y+9	; 0x09
    341c:	c8 84       	ldd	r12, Y+8	; 0x08
    341e:	df 80       	ldd	r13, Y+7	; 0x07
    3420:	ee 80       	ldd	r14, Y+6	; 0x06
    3422:	fd 80       	ldd	r15, Y+5	; 0x05
    3424:	0c 81       	ldd	r16, Y+4	; 0x04
    3426:	1b 81       	ldd	r17, Y+3	; 0x03
    3428:	aa 81       	ldd	r26, Y+2	; 0x02
    342a:	b9 81       	ldd	r27, Y+1	; 0x01
    342c:	ce 0f       	add	r28, r30
    342e:	d1 1d       	adc	r29, r1
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	ed 01       	movw	r28, r26
    343c:	08 95       	ret

0000343e <_exit>:
    343e:	f8 94       	cli

00003440 <__stop_program>:
    3440:	ff cf       	rjmp	.-2      	; 0x3440 <__stop_program>
